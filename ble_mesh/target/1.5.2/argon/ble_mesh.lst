
/Users/arminmahmoudi/dev/lights/particle/ble_mesh/target/1.5.2/argon/ble_mesh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005764  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9780  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000009c  2003e2c4  000d9784  0001e2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000490  2003e360  2003e360  0002e360  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d9820  000d9820  00029820  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9848  000d9848  00029848  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e3311  00000000  00000000  0002984c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000ff5c  00000000  00000000  0010cb5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000209cf  00000000  00000000  0011cab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002960  00000000  00000000  0013d488  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004e18  00000000  00000000  0013fde8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00031e43  00000000  00000000  00144c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00024a1a  00000000  00000000  00176a43  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010783a  00000000  00000000  0019b45d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000db78  00000000  00000000  002a2c98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 fe0c 	bl	d8c4a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 fe2c 	bl	d8c96 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2c4 	.word	0x2003e2c4
   d4048:	000d9784 	.word	0x000d9784
   d404c:	2003e360 	.word	0x2003e360
   d4050:	2003e360 	.word	0x2003e360
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f004 fc3d 	bl	d88d8 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d977c 	.word	0x000d977c
   d4080:	000d9744 	.word	0x000d9744

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b984 	b.w	d4390 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8ed 	bl	d4268 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f004 bbe3 	b.w	d885c <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bdef 	b.w	d4c78 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f000 bded 	b.w	d4c78 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bdf3 	b.w	d4c88 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bdf1 	b.w	d4c88 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f000 fd2c 	bl	d4b0c <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d485d 	.word	0x000d485d

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40cc:	4770      	bx	lr

000d40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ce:	6a00      	ldr	r0, [r0, #32]
   d40d0:	6803      	ldr	r3, [r0, #0]
   d40d2:	68db      	ldr	r3, [r3, #12]
   d40d4:	4718      	bx	r3
	...

000d40d8 <_ZL11meshHandlerPKcS0_>:
// Set the RGB BLE service
BleUuid rgbService(serviceUuid);

// Mesh event handler
static void meshHandler(const char *event, const char *data)
{
   d40d8:	b510      	push	{r4, lr}
   d40da:	b088      	sub	sp, #32
   d40dc:	460c      	mov	r4, r1
  // Convert to String for useful conversion and comparison functions
  String eventString = String(event);
   d40de:	4601      	mov	r1, r0
   d40e0:	4668      	mov	r0, sp
   d40e2:	f003 fe12 	bl	d7d0a <_ZN6StringC1EPK19__FlashStringHelper>
  String dataString = String(data);
   d40e6:	4621      	mov	r1, r4
   d40e8:	a804      	add	r0, sp, #16
   d40ea:	f003 fe0e 	bl	d7d0a <_ZN6StringC1EPK19__FlashStringHelper>

  // Determine which event we recieved
  if (eventString.equals("red"))
   d40ee:	4917      	ldr	r1, [pc, #92]	; (d414c <_ZL11meshHandlerPKcS0_+0x74>)
   d40f0:	4668      	mov	r0, sp
   d40f2:	f003 fe7b 	bl	d7dec <_ZNK6String6equalsEPKc>
   d40f6:	b128      	cbz	r0, d4104 <_ZL11meshHandlerPKcS0_+0x2c>
  {
    m_led_level.red = dataString.toInt();
   d40f8:	a804      	add	r0, sp, #16
   d40fa:	f003 fe89 	bl	d7e10 <_ZNK6String5toIntEv>
   d40fe:	4b14      	ldr	r3, [pc, #80]	; (d4150 <_ZL11meshHandlerPKcS0_+0x78>)
   d4100:	7018      	strb	r0, [r3, #0]
   d4102:	e014      	b.n	d412e <_ZL11meshHandlerPKcS0_+0x56>
  }
  else if (eventString.equals("green"))
   d4104:	4913      	ldr	r1, [pc, #76]	; (d4154 <_ZL11meshHandlerPKcS0_+0x7c>)
   d4106:	4668      	mov	r0, sp
   d4108:	f003 fe70 	bl	d7dec <_ZNK6String6equalsEPKc>
   d410c:	b128      	cbz	r0, d411a <_ZL11meshHandlerPKcS0_+0x42>
  {
    m_led_level.green = dataString.toInt();
   d410e:	a804      	add	r0, sp, #16
   d4110:	f003 fe7e 	bl	d7e10 <_ZNK6String5toIntEv>
   d4114:	4b0e      	ldr	r3, [pc, #56]	; (d4150 <_ZL11meshHandlerPKcS0_+0x78>)
   d4116:	7058      	strb	r0, [r3, #1]
   d4118:	e009      	b.n	d412e <_ZL11meshHandlerPKcS0_+0x56>
  }
  else if (eventString.equals("blue"))
   d411a:	490f      	ldr	r1, [pc, #60]	; (d4158 <_ZL11meshHandlerPKcS0_+0x80>)
   d411c:	4668      	mov	r0, sp
   d411e:	f003 fe65 	bl	d7dec <_ZNK6String6equalsEPKc>
   d4122:	b150      	cbz	r0, d413a <_ZL11meshHandlerPKcS0_+0x62>
  {
    m_led_level.blue = dataString.toInt();
   d4124:	a804      	add	r0, sp, #16
   d4126:	f003 fe73 	bl	d7e10 <_ZNK6String5toIntEv>
   d412a:	4b09      	ldr	r3, [pc, #36]	; (d4150 <_ZL11meshHandlerPKcS0_+0x78>)
   d412c:	7098      	strb	r0, [r3, #2]
  {
    return;
  }

  // Set RGB color
  RGB.color(m_led_level.red, m_led_level.green, m_led_level.blue);
   d412e:	4b08      	ldr	r3, [pc, #32]	; (d4150 <_ZL11meshHandlerPKcS0_+0x78>)
   d4130:	789a      	ldrb	r2, [r3, #2]
   d4132:	7859      	ldrb	r1, [r3, #1]
   d4134:	7818      	ldrb	r0, [r3, #0]
   d4136:	f003 fd68 	bl	d7c0a <_ZN8RGBClass5colorEiii>
  {
    m_led_level.blue = dataString.toInt();
  }
  else
  {
    return;
   d413a:	a804      	add	r0, sp, #16
   d413c:	f003 fd9e 	bl	d7c7c <_ZN6StringD1Ev>
   d4140:	4668      	mov	r0, sp
   d4142:	f003 fd9b 	bl	d7c7c <_ZN6StringD1Ev>
  }

  // Set RGB color
  RGB.color(m_led_level.red, m_led_level.green, m_led_level.blue);
}
   d4146:	b008      	add	sp, #32
   d4148:	bd10      	pop	{r4, pc}
   d414a:	bf00      	nop
   d414c:	000d8f28 	.word	0x000d8f28
   d4150:	2003e3a0 	.word	0x2003e3a0
   d4154:	000d8f2c 	.word	0x000d8f2c
   d4158:	000d8f32 	.word	0x000d8f32

000d415c <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:

// Static function for handling Bluetooth Low Energy callbacks
static void onDataReceived(const uint8_t *data, size_t len, const BlePeerDevice &peer, void *context)
{
  // We're only looking for one byte
  if (len != 1)
   d415c:	2901      	cmp	r1, #1
  RGB.color(m_led_level.red, m_led_level.green, m_led_level.blue);
}

// Static function for handling Bluetooth Low Energy callbacks
static void onDataReceived(const uint8_t *data, size_t len, const BlePeerDevice &peer, void *context)
{
   d415e:	b510      	push	{r4, lr}
  // We're only looking for one byte
  if (len != 1)
   d4160:	d11c      	bne.n	d419c <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x40>
  {
    return;
  }
  // Sets the global level
  if (context == red)
   d4162:	4a0f      	ldr	r2, [pc, #60]	; (d41a0 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>)
   d4164:	4c0f      	ldr	r4, [pc, #60]	; (d41a4 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x48>)
   d4166:	6812      	ldr	r2, [r2, #0]
   d4168:	4293      	cmp	r3, r2
   d416a:	d102      	bne.n	d4172 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x16>
  {
    m_led_level.red = data[0];
   d416c:	7803      	ldrb	r3, [r0, #0]
   d416e:	7023      	strb	r3, [r4, #0]
   d4170:	e00c      	b.n	d418c <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x30>
  }
  else if (context == green)
   d4172:	4a0d      	ldr	r2, [pc, #52]	; (d41a8 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4c>)
   d4174:	6812      	ldr	r2, [r2, #0]
   d4176:	4293      	cmp	r3, r2
   d4178:	d102      	bne.n	d4180 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x24>
  {
    m_led_level.green = data[0];
   d417a:	7803      	ldrb	r3, [r0, #0]
   d417c:	7063      	strb	r3, [r4, #1]
   d417e:	e005      	b.n	d418c <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x30>
  }
  else if (context == blue)
   d4180:	4a0a      	ldr	r2, [pc, #40]	; (d41ac <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x50>)
   d4182:	6812      	ldr	r2, [r2, #0]
   d4184:	4293      	cmp	r3, r2
  {
    m_led_level.blue = data[0];
   d4186:	bf04      	itt	eq
   d4188:	7803      	ldrbeq	r3, [r0, #0]
   d418a:	70a3      	strbeq	r3, [r4, #2]
  }

  // Set RGB color
  RGB.color(m_led_level.red, m_led_level.green, m_led_level.blue);
   d418c:	78a2      	ldrb	r2, [r4, #2]
   d418e:	7861      	ldrb	r1, [r4, #1]
   d4190:	7820      	ldrb	r0, [r4, #0]
   d4192:	f003 fd3a 	bl	d7c0a <_ZN8RGBClass5colorEiii>

  // Set to publish
  m_publish = true;
   d4196:	4b06      	ldr	r3, [pc, #24]	; (d41b0 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x54>)
   d4198:	2201      	movs	r2, #1
   d419a:	701a      	strb	r2, [r3, #0]
   d419c:	bd10      	pop	{r4, pc}
   d419e:	bf00      	nop
   d41a0:	2003e2e8 	.word	0x2003e2e8
   d41a4:	2003e3a0 	.word	0x2003e3a0
   d41a8:	2003e2c4 	.word	0x2003e2c4
   d41ac:	2003e2cc 	.word	0x2003e2cc
   d41b0:	2003e3b0 	.word	0x2003e3b0

000d41b4 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41b4:	b510      	push	{r4, lr}
   d41b6:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d41b8:	6800      	ldr	r0, [r0, #0]
   d41ba:	b108      	cbz	r0, d41c0 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d41bc:	f000 fd64 	bl	d4c88 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41c0:	4620      	mov	r0, r4
   d41c2:	bd10      	pop	{r4, pc}

000d41c4 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d41c4:	4b0a      	ldr	r3, [pc, #40]	; (d41f0 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d41c6:	b510      	push	{r4, lr}
   d41c8:	4604      	mov	r4, r0
   d41ca:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d41cc:	f002 f976 	bl	d64bc <_ZN5spark10LogManager8instanceEv>
   d41d0:	4621      	mov	r1, r4
   d41d2:	f002 fb63 	bl	d689c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d41d6:	f004 fabf 	bl	d8758 <_Z16_fetch_usbserialv>
   d41da:	f004 fab1 	bl	d8740 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d41de:	4620      	mov	r0, r4
   d41e0:	4b04      	ldr	r3, [pc, #16]	; (d41f4 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d41e2:	f840 3b04 	str.w	r3, [r0], #4
   d41e6:	f002 fa5f 	bl	d66a8 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d41ea:	4620      	mov	r0, r4
   d41ec:	bd10      	pop	{r4, pc}
   d41ee:	bf00      	nop
   d41f0:	000d8f18 	.word	0x000d8f18
   d41f4:	000d8f00 	.word	0x000d8f00

000d41f8 <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d41f8:	b510      	push	{r4, lr}
   d41fa:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d41fc:	f7ff ffe2 	bl	d41c4 <_ZN5spark16SerialLogHandlerD1Ev>
   d4200:	4620      	mov	r0, r4
   d4202:	2124      	movs	r1, #36	; 0x24
   d4204:	f004 fb99 	bl	d893a <_ZdlPvj>
   d4208:	4620      	mov	r0, r4
   d420a:	bd10      	pop	{r4, pc}

000d420c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d420c:	b40e      	push	{r1, r2, r3}
   d420e:	b500      	push	{lr}
   d4210:	b08c      	sub	sp, #48	; 0x30
   d4212:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4214:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4216:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d421a:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d421c:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4220:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4222:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4224:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4226:	aa04      	add	r2, sp, #16
   d4228:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d422a:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d422c:	f000 fc7e 	bl	d4b2c <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d4230:	b00c      	add	sp, #48	; 0x30
   d4232:	f85d eb04 	ldr.w	lr, [sp], #4
   d4236:	b003      	add	sp, #12
   d4238:	4770      	bx	lr

000d423a <_ZNK5spark6Logger5errorEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_WARN, fmt, args);
    va_end(args);
}

inline void spark::Logger::error(const char *fmt, ...) const {
   d423a:	b40e      	push	{r1, r2, r3}
   d423c:	b500      	push	{lr}
   d423e:	b08c      	sub	sp, #48	; 0x30
   d4240:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4242:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_WARN, fmt, args);
    va_end(args);
}

inline void spark::Logger::error(const char *fmt, ...) const {
   d4244:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d4248:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d424a:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d424e:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4250:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4252:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4254:	aa04      	add	r2, sp, #16
   d4256:	2032      	movs	r0, #50	; 0x32
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4258:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d425a:	f000 fc67 	bl	d4b2c <log_message_v>
inline void spark::Logger::error(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_ERROR, fmt, args);
    va_end(args);
}
   d425e:	b00c      	add	sp, #48	; 0x30
   d4260:	f85d eb04 	ldr.w	lr, [sp], #4
   d4264:	b003      	add	sp, #12
   d4266:	4770      	bx	lr

000d4268 <loop>:

int rainbowIndex = 0;

// loop() runs over and over again, as quickly as it can execute.
void loop()
{
   d4268:	b530      	push	{r4, r5, lr}
  
  if (m_publish)
   d426a:	4d25      	ldr	r5, [pc, #148]	; (d4300 <loop+0x98>)
   d426c:	4c25      	ldr	r4, [pc, #148]	; (d4304 <loop+0x9c>)
   d426e:	782b      	ldrb	r3, [r5, #0]

int rainbowIndex = 0;

// loop() runs over and over again, as quickly as it can execute.
void loop()
{
   d4270:	b085      	sub	sp, #20
  
  if (m_publish)
   d4272:	b343      	cbz	r3, d42c6 <loop+0x5e>
  {
    // Reset flag
    m_publish = false;
   d4274:	2300      	movs	r3, #0

    // Publish to Mesh
    Mesh.publish("red", String::format("%d", m_led_level.red));
   d4276:	7822      	ldrb	r2, [r4, #0]
   d4278:	4923      	ldr	r1, [pc, #140]	; (d4308 <loop+0xa0>)
{
  
  if (m_publish)
  {
    // Reset flag
    m_publish = false;
   d427a:	702b      	strb	r3, [r5, #0]

    // Publish to Mesh
    Mesh.publish("red", String::format("%d", m_led_level.red));
   d427c:	4668      	mov	r0, sp
   d427e:	f003 fde7 	bl	d7e50 <_ZN6String6formatEPKcz>
   d4282:	9a00      	ldr	r2, [sp, #0]
   d4284:	4921      	ldr	r1, [pc, #132]	; (d430c <loop+0xa4>)
   d4286:	4822      	ldr	r0, [pc, #136]	; (d4310 <loop+0xa8>)
   d4288:	f003 faba 	bl	d7800 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d428c:	4668      	mov	r0, sp
   d428e:	f003 fcf5 	bl	d7c7c <_ZN6StringD1Ev>
    Mesh.publish("green", String::format("%d", m_led_level.green));
   d4292:	7862      	ldrb	r2, [r4, #1]
   d4294:	491c      	ldr	r1, [pc, #112]	; (d4308 <loop+0xa0>)
   d4296:	4668      	mov	r0, sp
   d4298:	f003 fdda 	bl	d7e50 <_ZN6String6formatEPKcz>
   d429c:	9a00      	ldr	r2, [sp, #0]
   d429e:	491d      	ldr	r1, [pc, #116]	; (d4314 <loop+0xac>)
   d42a0:	481b      	ldr	r0, [pc, #108]	; (d4310 <loop+0xa8>)
   d42a2:	f003 faad 	bl	d7800 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d42a6:	4668      	mov	r0, sp
   d42a8:	f003 fce8 	bl	d7c7c <_ZN6StringD1Ev>
    Mesh.publish("blue", String::format("%d", m_led_level.blue));
   d42ac:	78a2      	ldrb	r2, [r4, #2]
   d42ae:	4916      	ldr	r1, [pc, #88]	; (d4308 <loop+0xa0>)
   d42b0:	4668      	mov	r0, sp
   d42b2:	f003 fdcd 	bl	d7e50 <_ZN6String6formatEPKcz>
   d42b6:	9a00      	ldr	r2, [sp, #0]
   d42b8:	4917      	ldr	r1, [pc, #92]	; (d4318 <loop+0xb0>)
   d42ba:	4815      	ldr	r0, [pc, #84]	; (d4310 <loop+0xa8>)
   d42bc:	f003 faa0 	bl	d7800 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d42c0:	4668      	mov	r0, sp
   d42c2:	f003 fcdb 	bl	d7c7c <_ZN6StringD1Ev>
  }

  // // rainbow run
  
  rainbowIndex++;
   d42c6:	4b15      	ldr	r3, [pc, #84]	; (d431c <loop+0xb4>)
   d42c8:	681a      	ldr	r2, [r3, #0]
   d42ca:	3201      	adds	r2, #1
  if (rainbowIndex >= 7) {
   d42cc:	2a06      	cmp	r2, #6
    rainbowIndex = 0;
   d42ce:	bfc8      	it	gt
   d42d0:	2200      	movgt	r2, #0
   d42d2:	601a      	str	r2, [r3, #0]
  }

  // Set RGB color
  m_led_level = rainbow[rainbowIndex];
   d42d4:	681b      	ldr	r3, [r3, #0]
   d42d6:	4a12      	ldr	r2, [pc, #72]	; (d4320 <loop+0xb8>)
   d42d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d42dc:	4413      	add	r3, r2
   d42de:	881a      	ldrh	r2, [r3, #0]
   d42e0:	8022      	strh	r2, [r4, #0]
  RGB.color(m_led_level.red, m_led_level.green, m_led_level.blue);
   d42e2:	7861      	ldrb	r1, [r4, #1]
  if (rainbowIndex >= 7) {
    rainbowIndex = 0;
  }

  // Set RGB color
  m_led_level = rainbow[rainbowIndex];
   d42e4:	789a      	ldrb	r2, [r3, #2]
  RGB.color(m_led_level.red, m_led_level.green, m_led_level.blue);
   d42e6:	7820      	ldrb	r0, [r4, #0]
  if (rainbowIndex >= 7) {
    rainbowIndex = 0;
  }

  // Set RGB color
  m_led_level = rainbow[rainbowIndex];
   d42e8:	70a2      	strb	r2, [r4, #2]
  RGB.color(m_led_level.red, m_led_level.green, m_led_level.blue);
   d42ea:	f003 fc8e 	bl	d7c0a <_ZN8RGBClass5colorEiii>
  m_publish = true;
   d42ee:	2301      	movs	r3, #1

  delay(500);
   d42f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  }

  // Set RGB color
  m_led_level = rainbow[rainbowIndex];
  RGB.color(m_led_level.red, m_led_level.green, m_led_level.blue);
  m_publish = true;
   d42f4:	702b      	strb	r3, [r5, #0]

  delay(500);
   d42f6:	f000 fce7 	bl	d4cc8 <delay>
}
   d42fa:	b005      	add	sp, #20
   d42fc:	bd30      	pop	{r4, r5, pc}
   d42fe:	bf00      	nop
   d4300:	2003e3b0 	.word	0x2003e3b0
   d4304:	2003e3a0 	.word	0x2003e3a0
   d4308:	000d8f7c 	.word	0x000d8f7c
   d430c:	000d8f28 	.word	0x000d8f28
   d4310:	2003e40c 	.word	0x2003e40c
   d4314:	000d8f2c 	.word	0x000d8f2c
   d4318:	000d8f32 	.word	0x000d8f32
   d431c:	2003e39c 	.word	0x2003e39c
   d4320:	2003e2d0 	.word	0x2003e2d0

000d4324 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4324:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4326:	6804      	ldr	r4, [r0, #0]
   d4328:	6843      	ldr	r3, [r0, #4]
   d432a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d432c:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d432e:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4332:	42a6      	cmp	r6, r4
   d4334:	d004      	beq.n	d4340 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d4336:	4620      	mov	r0, r4
   d4338:	f003 fca0 	bl	d7c7c <_ZN6StringD1Ev>
   d433c:	3414      	adds	r4, #20
   d433e:	e7f8      	b.n	d4332 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4340:	6828      	ldr	r0, [r5, #0]
   d4342:	f000 fca1 	bl	d4c88 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d4346:	4628      	mov	r0, r5
   d4348:	bd70      	pop	{r4, r5, r6, pc}

000d434a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>:
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d434a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d434c:	460e      	mov	r6, r1
   d434e:	b091      	sub	sp, #68	; 0x44

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d4350:	2100      	movs	r1, #0
   d4352:	4604      	mov	r4, r0
   d4354:	6001      	str	r1, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d4356:	6041      	str	r1, [r0, #4]
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d4358:	ad0b      	add	r5, sp, #44	; 0x2c
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d435a:	4619      	mov	r1, r3
   d435c:	a806      	add	r0, sp, #24
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d435e:	4617      	mov	r7, r2
        BleUuid cUuid(charUuid);
   d4360:	f000 fe48 	bl	d4ff4 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   d4364:	9916      	ldr	r1, [sp, #88]	; 0x58
   d4366:	4628      	mov	r0, r5
   d4368:	f000 fe44 	bl	d4ff4 <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d436c:	aa10      	add	r2, sp, #64	; 0x40
   d436e:	783b      	ldrb	r3, [r7, #0]
   d4370:	f802 3d2c 	strb.w	r3, [r2, #-44]!
        construct(desc, properties, cUuid, sUuid, callback, context);
   d4374:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d4376:	9302      	str	r3, [sp, #8]
   d4378:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d437a:	9301      	str	r3, [sp, #4]
   d437c:	4620      	mov	r0, r4
   d437e:	9500      	str	r5, [sp, #0]
   d4380:	ab06      	add	r3, sp, #24
   d4382:	4631      	mov	r1, r6
   d4384:	f001 fafc 	bl	d5980 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d4388:	4620      	mov	r0, r4
   d438a:	b011      	add	sp, #68	; 0x44
   d438c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4390 <setup>:
  m_publish = true;
}

// setup() runs once, when the device is first turned on.
void setup()
{
   d4390:	b570      	push	{r4, r5, r6, lr}
  RGB.control(true);
   d4392:	2001      	movs	r0, #1
  m_publish = true;
}

// setup() runs once, when the device is first turned on.
void setup()
{
   d4394:	b09e      	sub	sp, #120	; 0x78
   d4396:	4c67      	ldr	r4, [pc, #412]	; (d4534 <setup+0x1a4>)
  RGB.control(true);
   d4398:	f003 fc27 	bl	d7bea <_ZN8RGBClass7controlEb>
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d439c:	2300      	movs	r3, #0
   d439e:	461a      	mov	r2, r3
   d43a0:	4619      	mov	r1, r3
   d43a2:	6860      	ldr	r0, [r4, #4]
   d43a4:	f000 fc38 	bl	d4c18 <network_on>
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d43a8:	2300      	movs	r3, #0
   d43aa:	461a      	mov	r2, r3
   d43ac:	4619      	mov	r1, r3
   d43ae:	6860      	ldr	r0, [r4, #4]
   d43b0:	f000 fc12 	bl	d4bd8 <network_connect>
  Mesh.on();
  // WiFi.off();

  Mesh.connect();
  Log.info("Mesh connect called");
   d43b4:	4960      	ldr	r1, [pc, #384]	; (d4538 <setup+0x1a8>)
   d43b6:	4861      	ldr	r0, [pc, #388]	; (d453c <setup+0x1ac>)
   d43b8:	f7ff ff28 	bl	d420c <_ZNK5spark6Logger4infoEPKcz>
  Log.info("localIP: %s", Mesh.localIP().toString().c_str());
   d43bc:	4621      	mov	r1, r4
   d43be:	a815      	add	r0, sp, #84	; 0x54
   d43c0:	f003 f922 	bl	d7608 <_ZN5spark9MeshClass7localIPEv>

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
   d43c4:	a915      	add	r1, sp, #84	; 0x54
   d43c6:	a810      	add	r0, sp, #64	; 0x40
   d43c8:	f003 fd28 	bl	d7e1c <_ZN6StringC1ERK9Printable>
   d43cc:	485b      	ldr	r0, [pc, #364]	; (d453c <setup+0x1ac>)
   d43ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
   d43d0:	495b      	ldr	r1, [pc, #364]	; (d4540 <setup+0x1b0>)
   d43d2:	f7ff ff1b 	bl	d420c <_ZNK5spark6Logger4infoEPKcz>
   d43d6:	a810      	add	r0, sp, #64	; 0x40
   d43d8:	f003 fc50 	bl	d7c7c <_ZN6StringD1Ev>
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d43dc:	2200      	movs	r2, #0
   d43de:	4611      	mov	r1, r2
   d43e0:	6860      	ldr	r0, [r4, #4]
   d43e2:	4d54      	ldr	r5, [pc, #336]	; (d4534 <setup+0x1a4>)
   d43e4:	f000 fc10 	bl	d4c08 <network_ready>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d43e8:	2800      	cmp	r0, #0
   d43ea:	f000 809f 	beq.w	d452c <setup+0x19c>
   d43ee:	2200      	movs	r2, #0
   d43f0:	4611      	mov	r1, r2
   d43f2:	6868      	ldr	r0, [r5, #4]
   d43f4:	f000 fc08 	bl	d4c08 <network_ready>
  waitUntil(Mesh.ready);
  Log.info("Mesh is ready!");
   d43f8:	4952      	ldr	r1, [pc, #328]	; (d4544 <setup+0x1b4>)
   d43fa:	4850      	ldr	r0, [pc, #320]	; (d453c <setup+0x1ac>)
   d43fc:	f7ff ff06 	bl	d420c <_ZNK5spark6Logger4infoEPKcz>

  // Set to false at first
  m_publish = false;
   d4400:	4b51      	ldr	r3, [pc, #324]	; (d4548 <setup+0x1b8>)

  // Set the subscription for Mesh updates
  int error = Mesh.subscribe("red", meshHandler);
   d4402:	4952      	ldr	r1, [pc, #328]	; (d454c <setup+0x1bc>)
  Log.info("localIP: %s", Mesh.localIP().toString().c_str());
  waitUntil(Mesh.ready);
  Log.info("Mesh is ready!");

  // Set to false at first
  m_publish = false;
   d4404:	2200      	movs	r2, #0
   d4406:	701a      	strb	r2, [r3, #0]

  // Set the subscription for Mesh updates
  int error = Mesh.subscribe("red", meshHandler);
   d4408:	f105 0008 	add.w	r0, r5, #8
   d440c:	4a50      	ldr	r2, [pc, #320]	; (d4550 <setup+0x1c0>)
   d440e:	f003 fa6f 	bl	d78f0 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
  if (error != SYSTEM_ERROR_NONE) {
   d4412:	4602      	mov	r2, r0
   d4414:	b118      	cbz	r0, d441e <setup+0x8e>
    // TODO: have a function for subscription with error checking
    Log.error("Failed to subscribe with error code: %d", error);
   d4416:	494f      	ldr	r1, [pc, #316]	; (d4554 <setup+0x1c4>)
   d4418:	4848      	ldr	r0, [pc, #288]	; (d453c <setup+0x1ac>)
   d441a:	f7ff ff0e 	bl	d423a <_ZNK5spark6Logger5errorEPKcz>
  }
  Mesh.subscribe("green", meshHandler);
   d441e:	4a4c      	ldr	r2, [pc, #304]	; (d4550 <setup+0x1c0>)
   d4420:	494d      	ldr	r1, [pc, #308]	; (d4558 <setup+0x1c8>)
   d4422:	484e      	ldr	r0, [pc, #312]	; (d455c <setup+0x1cc>)
  Mesh.subscribe("blue", meshHandler);

  // Set up characteristics
  BleCharacteristic redCharacteristic("red", BleCharacteristicProperty::WRITE_WO_RSP, red, serviceUuid, onDataReceived, (void *)red);
   d4424:	4c4e      	ldr	r4, [pc, #312]	; (d4560 <setup+0x1d0>)
   d4426:	4d4f      	ldr	r5, [pc, #316]	; (d4564 <setup+0x1d4>)
  int error = Mesh.subscribe("red", meshHandler);
  if (error != SYSTEM_ERROR_NONE) {
    // TODO: have a function for subscription with error checking
    Log.error("Failed to subscribe with error code: %d", error);
  }
  Mesh.subscribe("green", meshHandler);
   d4428:	f003 fa62 	bl	d78f0 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
  Mesh.subscribe("blue", meshHandler);
   d442c:	4a48      	ldr	r2, [pc, #288]	; (d4550 <setup+0x1c0>)
   d442e:	494e      	ldr	r1, [pc, #312]	; (d4568 <setup+0x1d8>)
   d4430:	484a      	ldr	r0, [pc, #296]	; (d455c <setup+0x1cc>)
   d4432:	f003 fa5d 	bl	d78f0 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>

  // Set up characteristics
  BleCharacteristic redCharacteristic("red", BleCharacteristicProperty::WRITE_WO_RSP, red, serviceUuid, onDataReceived, (void *)red);
   d4436:	4b4d      	ldr	r3, [pc, #308]	; (d456c <setup+0x1dc>)
   d4438:	4944      	ldr	r1, [pc, #272]	; (d454c <setup+0x1bc>)
   d443a:	681b      	ldr	r3, [r3, #0]
   d443c:	9302      	str	r3, [sp, #8]
   d443e:	9501      	str	r5, [sp, #4]
   d4440:	6822      	ldr	r2, [r4, #0]
   d4442:	9200      	str	r2, [sp, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d4444:	2604      	movs	r6, #4
   d4446:	aa15      	add	r2, sp, #84	; 0x54
   d4448:	a805      	add	r0, sp, #20
   d444a:	f88d 6054 	strb.w	r6, [sp, #84]	; 0x54
   d444e:	f7ff ff7c 	bl	d434a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
  BleCharacteristic greenCharacteristic("green", BleCharacteristicProperty::WRITE_WO_RSP, green, serviceUuid, onDataReceived, (void *)green);
   d4452:	4b47      	ldr	r3, [pc, #284]	; (d4570 <setup+0x1e0>)
   d4454:	4940      	ldr	r1, [pc, #256]	; (d4558 <setup+0x1c8>)
   d4456:	681b      	ldr	r3, [r3, #0]
   d4458:	9302      	str	r3, [sp, #8]
   d445a:	9501      	str	r5, [sp, #4]
   d445c:	6822      	ldr	r2, [r4, #0]
   d445e:	9200      	str	r2, [sp, #0]
   d4460:	a807      	add	r0, sp, #28
   d4462:	aa15      	add	r2, sp, #84	; 0x54
   d4464:	f88d 6054 	strb.w	r6, [sp, #84]	; 0x54
   d4468:	f7ff ff6f 	bl	d434a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
  BleCharacteristic blueCharacteristic("blue", BleCharacteristicProperty::WRITE_WO_RSP, blue, serviceUuid, onDataReceived, (void *)blue);
   d446c:	4b41      	ldr	r3, [pc, #260]	; (d4574 <setup+0x1e4>)
   d446e:	493e      	ldr	r1, [pc, #248]	; (d4568 <setup+0x1d8>)
   d4470:	681b      	ldr	r3, [r3, #0]
   d4472:	9302      	str	r3, [sp, #8]
   d4474:	9501      	str	r5, [sp, #4]
   d4476:	6822      	ldr	r2, [r4, #0]
   d4478:	9200      	str	r2, [sp, #0]
   d447a:	a809      	add	r0, sp, #36	; 0x24
   d447c:	aa15      	add	r2, sp, #84	; 0x54
   d447e:	f88d 6054 	strb.w	r6, [sp, #84]	; 0x54
   d4482:	f7ff ff62 	bl	d434a <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>

  // Add the characteristics
  BLE.addCharacteristic(redCharacteristic);
   d4486:	f000 fed7 	bl	d5238 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d448a:	aa05      	add	r2, sp, #20
   d448c:	4601      	mov	r1, r0
   d448e:	a815      	add	r0, sp, #84	; 0x54
   d4490:	f001 fb2a 	bl	d5ae8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4494:	a815      	add	r0, sp, #84	; 0x54
   d4496:	f000 ff84 	bl	d53a2 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(greenCharacteristic);
   d449a:	f000 fecd 	bl	d5238 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d449e:	aa07      	add	r2, sp, #28
   d44a0:	4601      	mov	r1, r0
   d44a2:	a815      	add	r0, sp, #84	; 0x54
   d44a4:	f001 fb20 	bl	d5ae8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d44a8:	a815      	add	r0, sp, #84	; 0x54
   d44aa:	f000 ff7a 	bl	d53a2 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(blueCharacteristic);
   d44ae:	f000 fec3 	bl	d5238 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d44b2:	aa09      	add	r2, sp, #36	; 0x24
   d44b4:	4601      	mov	r1, r0
   d44b6:	a815      	add	r0, sp, #84	; 0x54
   d44b8:	f001 fb16 	bl	d5ae8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d44bc:	a815      	add	r0, sp, #84	; 0x54
   d44be:	f000 ff70 	bl	d53a2 <_ZN8particle17BleCharacteristicD1Ev>

  // Advertising data
  BleAdvertisingData advData;
   d44c2:	a815      	add	r0, sp, #84	; 0x54
   d44c4:	f000 fe00 	bl	d50c8 <_ZN8particle18BleAdvertisingDataC1Ev>

  // Add the RGB LED service
  advData.appendServiceUUID(rgbService);
   d44c8:	492b      	ldr	r1, [pc, #172]	; (d4578 <setup+0x1e8>)
   d44ca:	a80b      	add	r0, sp, #44	; 0x2c
   d44cc:	f000 fc94 	bl	d4df8 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d44d0:	a90b      	add	r1, sp, #44	; 0x2c
   d44d2:	a810      	add	r0, sp, #64	; 0x40
   d44d4:	f000 fc90 	bl	d4df8 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d44d8:	a810      	add	r0, sp, #64	; 0x40
   d44da:	f000 fcd7 	bl	d4e8c <_ZNK8particle7BleUuid4typeEv>
   d44de:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d44e0:	a810      	add	r0, sp, #64	; 0x40
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
   d44e2:	b944      	cbnz	r4, d44f6 <setup+0x166>
            uint16_t uuid16 = tempUUID.shorted();
   d44e4:	f000 fcf0 	bl	d4ec8 <_ZNK8particle7BleUuid7shortedEv>
   d44e8:	aa1e      	add	r2, sp, #120	; 0x78
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d44ea:	2302      	movs	r3, #2

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
   d44ec:	f822 0d66 	strh.w	r0, [r2, #-102]!
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d44f0:	2103      	movs	r1, #3
   d44f2:	9400      	str	r4, [sp, #0]
   d44f4:	e006      	b.n	d4504 <setup+0x174>
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d44f6:	f000 fcec 	bl	d4ed2 <_ZNK8particle7BleUuid8rawBytesEv>
   d44fa:	2300      	movs	r3, #0
   d44fc:	9300      	str	r3, [sp, #0]
   d44fe:	4602      	mov	r2, r0
   d4500:	2310      	movs	r3, #16
   d4502:	2107      	movs	r1, #7
   d4504:	a815      	add	r0, sp, #84	; 0x54
   d4506:	f000 fd98 	bl	d503a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>

  // Start advertising!
  BLE.advertise(&advData);
   d450a:	f000 fe95 	bl	d5238 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d450e:	2200      	movs	r2, #0
   d4510:	a915      	add	r1, sp, #84	; 0x54
   d4512:	f000 fefe 	bl	d5312 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  Mesh.subscribe("blue", meshHandler);

  // Set up characteristics
  BleCharacteristic redCharacteristic("red", BleCharacteristicProperty::WRITE_WO_RSP, red, serviceUuid, onDataReceived, (void *)red);
  BleCharacteristic greenCharacteristic("green", BleCharacteristicProperty::WRITE_WO_RSP, green, serviceUuid, onDataReceived, (void *)green);
  BleCharacteristic blueCharacteristic("blue", BleCharacteristicProperty::WRITE_WO_RSP, blue, serviceUuid, onDataReceived, (void *)blue);
   d4516:	a809      	add	r0, sp, #36	; 0x24
   d4518:	f000 ff43 	bl	d53a2 <_ZN8particle17BleCharacteristicD1Ev>
  Mesh.subscribe("green", meshHandler);
  Mesh.subscribe("blue", meshHandler);

  // Set up characteristics
  BleCharacteristic redCharacteristic("red", BleCharacteristicProperty::WRITE_WO_RSP, red, serviceUuid, onDataReceived, (void *)red);
  BleCharacteristic greenCharacteristic("green", BleCharacteristicProperty::WRITE_WO_RSP, green, serviceUuid, onDataReceived, (void *)green);
   d451c:	a807      	add	r0, sp, #28
   d451e:	f000 ff40 	bl	d53a2 <_ZN8particle17BleCharacteristicD1Ev>
  }
  Mesh.subscribe("green", meshHandler);
  Mesh.subscribe("blue", meshHandler);

  // Set up characteristics
  BleCharacteristic redCharacteristic("red", BleCharacteristicProperty::WRITE_WO_RSP, red, serviceUuid, onDataReceived, (void *)red);
   d4522:	a805      	add	r0, sp, #20
   d4524:	f000 ff3d 	bl	d53a2 <_ZN8particle17BleCharacteristicD1Ev>
  // Add the RGB LED service
  advData.appendServiceUUID(rgbService);

  // Start advertising!
  BLE.advertise(&advData);
}
   d4528:	b01e      	add	sp, #120	; 0x78
   d452a:	bd70      	pop	{r4, r5, r6, pc}
            spark_process();
   d452c:	f000 fb44 	bl	d4bb8 <spark_process>
   d4530:	e754      	b.n	d43dc <setup+0x4c>
   d4532:	bf00      	nop
   d4534:	2003e404 	.word	0x2003e404
   d4538:	000d8f37 	.word	0x000d8f37
   d453c:	2003e400 	.word	0x2003e400
   d4540:	000d8f4b 	.word	0x000d8f4b
   d4544:	000d8f7f 	.word	0x000d8f7f
   d4548:	2003e3b0 	.word	0x2003e3b0
   d454c:	000d8f28 	.word	0x000d8f28
   d4550:	000d40d9 	.word	0x000d40d9
   d4554:	000d8f57 	.word	0x000d8f57
   d4558:	000d8f2c 	.word	0x000d8f2c
   d455c:	2003e40c 	.word	0x2003e40c
   d4560:	2003e2c8 	.word	0x2003e2c8
   d4564:	000d415d 	.word	0x000d415d
   d4568:	000d8f32 	.word	0x000d8f32
   d456c:	2003e2e8 	.word	0x2003e2e8
   d4570:	2003e2c4 	.word	0x2003e2c4
   d4574:	2003e2cc 	.word	0x2003e2cc
   d4578:	2003e388 	.word	0x2003e388

000d457c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d457c:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d457e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4580:	4606      	mov	r6, r0
   d4582:	460c      	mov	r4, r1
   d4584:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d4586:	d916      	bls.n	d45b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4588:	4290      	cmp	r0, r2
   d458a:	d215      	bcs.n	d45b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d458c:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d4590:	1a6c      	subs	r4, r5, r1
   d4592:	f1a1 0714 	sub.w	r7, r1, #20
   d4596:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d4598:	42af      	cmp	r7, r5
   d459a:	d01c      	beq.n	d45d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d459c:	b12c      	cbz	r4, d45aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d459e:	4629      	mov	r1, r5
   d45a0:	4620      	mov	r0, r4
   d45a2:	f003 fb5b 	bl	d7c5c <_ZN6StringC1EOS_>
   d45a6:	7c2b      	ldrb	r3, [r5, #16]
   d45a8:	7423      	strb	r3, [r4, #16]
   d45aa:	4628      	mov	r0, r5
   d45ac:	f003 fb66 	bl	d7c7c <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d45b0:	3d14      	subs	r5, #20
   d45b2:	3c14      	subs	r4, #20
   d45b4:	e7f0      	b.n	d4598 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d45b6:	d00e      	beq.n	d45d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d45b8:	42ac      	cmp	r4, r5
   d45ba:	d00c      	beq.n	d45d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d45bc:	b12e      	cbz	r6, d45ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d45be:	4621      	mov	r1, r4
   d45c0:	4630      	mov	r0, r6
   d45c2:	f003 fb4b 	bl	d7c5c <_ZN6StringC1EOS_>
   d45c6:	7c23      	ldrb	r3, [r4, #16]
   d45c8:	7433      	strb	r3, [r6, #16]
   d45ca:	4620      	mov	r0, r4
   d45cc:	f003 fb56 	bl	d7c7c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d45d0:	3414      	adds	r4, #20
   d45d2:	3614      	adds	r6, #20
   d45d4:	e7f0      	b.n	d45b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d45d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d45d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d45d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d45dc:	2300      	movs	r3, #0
   d45de:	6003      	str	r3, [r0, #0]
   d45e0:	6043      	str	r3, [r0, #4]
   d45e2:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d45e4:	684e      	ldr	r6, [r1, #4]
   d45e6:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d45e8:	4604      	mov	r4, r0
   d45ea:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d45ec:	dd24      	ble.n	d4638 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d45ee:	f04f 0814 	mov.w	r8, #20
   d45f2:	fb08 f006 	mul.w	r0, r8, r6
   d45f6:	f000 fb3f 	bl	d4c78 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d45fa:	4605      	mov	r5, r0
   d45fc:	b1e0      	cbz	r0, d4638 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d45fe:	e894 0006 	ldmia.w	r4, {r1, r2}
   d4602:	fb08 1202 	mla	r2, r8, r2, r1
   d4606:	f7ff ffb9 	bl	d457c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d460a:	6820      	ldr	r0, [r4, #0]
   d460c:	f000 fb3c 	bl	d4c88 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d4610:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4612:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4614:	683e      	ldr	r6, [r7, #0]
   d4616:	687b      	ldr	r3, [r7, #4]
   d4618:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d461c:	4546      	cmp	r6, r8
   d461e:	d009      	beq.n	d4634 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d4620:	b12d      	cbz	r5, d462e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d4622:	4631      	mov	r1, r6
   d4624:	4628      	mov	r0, r5
   d4626:	f003 fb92 	bl	d7d4e <_ZN6StringC1ERKS_>
   d462a:	7c33      	ldrb	r3, [r6, #16]
   d462c:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d462e:	3614      	adds	r6, #20
   d4630:	3514      	adds	r5, #20
   d4632:	e7f3      	b.n	d461c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d4634:	687b      	ldr	r3, [r7, #4]
   d4636:	6063      	str	r3, [r4, #4]
    }
}
   d4638:	4620      	mov	r0, r4
   d463a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4640 <_GLOBAL__sub_I_SystemMode>:
  m_led_level = rainbow[rainbowIndex];
  RGB.color(m_led_level.red, m_led_level.green, m_led_level.blue);
  m_publish = true;

  delay(500);
}
   d4640:	b5f0      	push	{r4, r5, r6, r7, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4642:	4d2c      	ldr	r5, [pc, #176]	; (d46f4 <_GLOBAL__sub_I_SystemMode+0xb4>)
 * Description: BLE Mesh network
 * Author: Armin Mahmoudi
 * Date: 9/26/2020
 */

SYSTEM_MODE(MANUAL);
   d4644:	4e2c      	ldr	r6, [pc, #176]	; (d46f8 <_GLOBAL__sub_I_SystemMode+0xb8>)
  m_led_level = rainbow[rainbowIndex];
  RGB.color(m_led_level.red, m_led_level.green, m_led_level.blue);
  m_publish = true;

  delay(500);
}
   d4646:	b08d      	sub	sp, #52	; 0x34

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4648:	f000 f918 	bl	d487c <HAL_Pin_Map>
   d464c:	2400      	movs	r4, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d464e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4652:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4654:	602c      	str	r4, [r5, #0]
   d4656:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4658:	71ac      	strb	r4, [r5, #6]
   d465a:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d465c:	2003      	movs	r0, #3
   d465e:	f000 fa7d 	bl	d4b5c <set_system_mode>
 * Description: BLE Mesh network
 * Author: Armin Mahmoudi
 * Date: 9/26/2020
 */

SYSTEM_MODE(MANUAL);
   d4662:	4632      	mov	r2, r6
   d4664:	4925      	ldr	r1, [pc, #148]	; (d46fc <_GLOBAL__sub_I_SystemMode+0xbc>)
   d4666:	4628      	mov	r0, r5
   d4668:	f004 f962 	bl	d8930 <__aeabi_atexit>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d466c:	9400      	str	r4, [sp, #0]
   d466e:	9401      	str	r4, [sp, #4]
   d4670:	9402      	str	r4, [sp, #8]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d4672:	f004 f871 	bl	d8758 <_Z16_fetch_usbserialv>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4676:	4c22      	ldr	r4, [pc, #136]	; (d4700 <_GLOBAL__sub_I_SystemMode+0xc0>)
   d4678:	4607      	mov	r7, r0
   d467a:	4669      	mov	r1, sp
   d467c:	a803      	add	r0, sp, #12
   d467e:	f7ff ffab 	bl	d45d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4682:	4625      	mov	r5, r4
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4684:	a903      	add	r1, sp, #12
   d4686:	a806      	add	r0, sp, #24
   d4688:	f7ff ffa6 	bl	d45d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d468c:	4b1d      	ldr	r3, [pc, #116]	; (d4704 <_GLOBAL__sub_I_SystemMode+0xc4>)
   d468e:	f845 3b04 	str.w	r3, [r5], #4
   d4692:	a906      	add	r1, sp, #24
   d4694:	a809      	add	r0, sp, #36	; 0x24
   d4696:	f7ff ff9f 	bl	d45d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d469a:	aa09      	add	r2, sp, #36	; 0x24
   d469c:	211e      	movs	r1, #30
   d469e:	4628      	mov	r0, r5
   d46a0:	f002 fa63 	bl	d6b6a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d46a4:	a809      	add	r0, sp, #36	; 0x24
   d46a6:	f7ff fe3d 	bl	d4324 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d46aa:	a806      	add	r0, sp, #24
   d46ac:	f7ff fe3a 	bl	d4324 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d46b0:	4b15      	ldr	r3, [pc, #84]	; (d4708 <_GLOBAL__sub_I_SystemMode+0xc8>)
   d46b2:	6023      	str	r3, [r4, #0]
   d46b4:	6227      	str	r7, [r4, #32]
   d46b6:	a803      	add	r0, sp, #12
   d46b8:	f7ff fe34 	bl	d4324 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d46bc:	4b13      	ldr	r3, [pc, #76]	; (d470c <_GLOBAL__sub_I_SystemMode+0xcc>)
   d46be:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d46c0:	f004 f84a 	bl	d8758 <_Z16_fetch_usbserialv>
   d46c4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d46c8:	f004 f836 	bl	d8738 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d46cc:	f001 fef6 	bl	d64bc <_ZN5spark10LogManager8instanceEv>
   d46d0:	4621      	mov	r1, r4
   d46d2:	f002 f9dd 	bl	d6a90 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   d46d6:	4668      	mov	r0, sp
   d46d8:	f7ff fe24 	bl	d4324 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d46dc:	4632      	mov	r2, r6
   d46de:	490c      	ldr	r1, [pc, #48]	; (d4710 <_GLOBAL__sub_I_SystemMode+0xd0>)
   d46e0:	4620      	mov	r0, r4
   d46e2:	f004 f925 	bl	d8930 <__aeabi_atexit>
const char *red = "52FBD5CB-8C9E-4C84-B3F7-E674BB439420";
const char *green = "52FBD5CC-8C9E-4C84-B3F7-E674BB439420";
const char *blue = "52FBD5CD-8C9E-4C84-B3F7-E674BB439420";

// Set the RGB BLE service
BleUuid rgbService(serviceUuid);
   d46e6:	4b0b      	ldr	r3, [pc, #44]	; (d4714 <_GLOBAL__sub_I_SystemMode+0xd4>)
   d46e8:	480b      	ldr	r0, [pc, #44]	; (d4718 <_GLOBAL__sub_I_SystemMode+0xd8>)
   d46ea:	6819      	ldr	r1, [r3, #0]
   d46ec:	f000 fc82 	bl	d4ff4 <_ZN8particle7BleUuidC1EPKc>
  m_led_level = rainbow[rainbowIndex];
  RGB.color(m_led_level.red, m_led_level.green, m_led_level.blue);
  m_publish = true;

  delay(500);
}
   d46f0:	b00d      	add	sp, #52	; 0x34
   d46f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d46f4:	2003e3a4 	.word	0x2003e3a4
   d46f8:	2003e360 	.word	0x2003e360
   d46fc:	000d41b5 	.word	0x000d41b5
   d4700:	2003e364 	.word	0x2003e364
   d4704:	000d8f00 	.word	0x000d8f00
   d4708:	000d93bc 	.word	0x000d93bc
   d470c:	000d8f18 	.word	0x000d8f18
   d4710:	000d41c5 	.word	0x000d41c5
   d4714:	2003e2c8 	.word	0x2003e2c8
   d4718:	2003e388 	.word	0x2003e388

000d471c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d471c:	b508      	push	{r3, lr}
   d471e:	4b02      	ldr	r3, [pc, #8]	; (d4728 <hal_ble_stack_init+0xc>)
   d4720:	681b      	ldr	r3, [r3, #0]
   d4722:	689b      	ldr	r3, [r3, #8]
   d4724:	9301      	str	r3, [sp, #4]
   d4726:	bd08      	pop	{r3, pc}
   d4728:	00030278 	.word	0x00030278

000d472c <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d472c:	b508      	push	{r3, lr}
   d472e:	4b02      	ldr	r3, [pc, #8]	; (d4738 <hal_ble_gap_set_advertising_data+0xc>)
   d4730:	681b      	ldr	r3, [r3, #0]
   d4732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4734:	9301      	str	r3, [sp, #4]
   d4736:	bd08      	pop	{r3, pc}
   d4738:	00030278 	.word	0x00030278

000d473c <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d473c:	b508      	push	{r3, lr}
   d473e:	4b02      	ldr	r3, [pc, #8]	; (d4748 <hal_ble_gap_set_scan_response_data+0xc>)
   d4740:	681b      	ldr	r3, [r3, #0]
   d4742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4744:	9301      	str	r3, [sp, #4]
   d4746:	bd08      	pop	{r3, pc}
   d4748:	00030278 	.word	0x00030278

000d474c <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d474c:	b508      	push	{r3, lr}
   d474e:	4b02      	ldr	r3, [pc, #8]	; (d4758 <hal_ble_gap_start_advertising+0xc>)
   d4750:	681b      	ldr	r3, [r3, #0]
   d4752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d4754:	9301      	str	r3, [sp, #4]
   d4756:	bd08      	pop	{r3, pc}
   d4758:	00030278 	.word	0x00030278

000d475c <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d475c:	b508      	push	{r3, lr}
   d475e:	4b03      	ldr	r3, [pc, #12]	; (d476c <hal_ble_gap_disconnect+0x10>)
   d4760:	681b      	ldr	r3, [r3, #0]
   d4762:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d4766:	9301      	str	r3, [sp, #4]
   d4768:	bd08      	pop	{r3, pc}
   d476a:	0000      	.short	0x0000
   d476c:	00030278 	.word	0x00030278

000d4770 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d4770:	b508      	push	{r3, lr}
   d4772:	4b03      	ldr	r3, [pc, #12]	; (d4780 <hal_ble_gatt_server_add_service+0x10>)
   d4774:	681b      	ldr	r3, [r3, #0]
   d4776:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d477a:	9301      	str	r3, [sp, #4]
   d477c:	bd08      	pop	{r3, pc}
   d477e:	0000      	.short	0x0000
   d4780:	00030278 	.word	0x00030278

000d4784 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d4784:	b508      	push	{r3, lr}
   d4786:	4b03      	ldr	r3, [pc, #12]	; (d4794 <hal_ble_gatt_server_add_characteristic+0x10>)
   d4788:	681b      	ldr	r3, [r3, #0]
   d478a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d478e:	9301      	str	r3, [sp, #4]
   d4790:	bd08      	pop	{r3, pc}
   d4792:	0000      	.short	0x0000
   d4794:	00030278 	.word	0x00030278

000d4798 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d4798:	b508      	push	{r3, lr}
   d479a:	4b03      	ldr	r3, [pc, #12]	; (d47a8 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d479c:	681b      	ldr	r3, [r3, #0]
   d479e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d47a2:	9301      	str	r3, [sp, #4]
   d47a4:	bd08      	pop	{r3, pc}
   d47a6:	0000      	.short	0x0000
   d47a8:	00030278 	.word	0x00030278

000d47ac <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d47ac:	b508      	push	{r3, lr}
   d47ae:	4b02      	ldr	r3, [pc, #8]	; (d47b8 <os_thread_create+0xc>)
   d47b0:	681b      	ldr	r3, [r3, #0]
   d47b2:	685b      	ldr	r3, [r3, #4]
   d47b4:	9301      	str	r3, [sp, #4]
   d47b6:	bd08      	pop	{r3, pc}
   d47b8:	00030248 	.word	0x00030248

000d47bc <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <os_thread_is_current+0xc>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	689b      	ldr	r3, [r3, #8]
   d47c4:	9301      	str	r3, [sp, #4]
   d47c6:	bd08      	pop	{r3, pc}
   d47c8:	00030248 	.word	0x00030248

000d47cc <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <os_thread_join+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	691b      	ldr	r3, [r3, #16]
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	00030248 	.word	0x00030248

000d47dc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <os_thread_cleanup+0xc>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	695b      	ldr	r3, [r3, #20]
   d47e4:	9301      	str	r3, [sp, #4]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	00030248 	.word	0x00030248

000d47ec <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d47ec:	b508      	push	{r3, lr}
   d47ee:	4b02      	ldr	r3, [pc, #8]	; (d47f8 <os_mutex_recursive_create+0xc>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	bd08      	pop	{r3, pc}
   d47f8:	00030248 	.word	0x00030248

000d47fc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d47fc:	b508      	push	{r3, lr}
   d47fe:	4b02      	ldr	r3, [pc, #8]	; (d4808 <os_mutex_recursive_destroy+0xc>)
   d4800:	681b      	ldr	r3, [r3, #0]
   d4802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4804:	9301      	str	r3, [sp, #4]
   d4806:	bd08      	pop	{r3, pc}
   d4808:	00030248 	.word	0x00030248

000d480c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d480c:	b508      	push	{r3, lr}
   d480e:	4b02      	ldr	r3, [pc, #8]	; (d4818 <os_mutex_recursive_lock+0xc>)
   d4810:	681b      	ldr	r3, [r3, #0]
   d4812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4814:	9301      	str	r3, [sp, #4]
   d4816:	bd08      	pop	{r3, pc}
   d4818:	00030248 	.word	0x00030248

000d481c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d481c:	b508      	push	{r3, lr}
   d481e:	4b02      	ldr	r3, [pc, #8]	; (d4828 <os_mutex_recursive_unlock+0xc>)
   d4820:	681b      	ldr	r3, [r3, #0]
   d4822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4824:	9301      	str	r3, [sp, #4]
   d4826:	bd08      	pop	{r3, pc}
   d4828:	00030248 	.word	0x00030248

000d482c <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d482c:	b508      	push	{r3, lr}
   d482e:	4b02      	ldr	r3, [pc, #8]	; (d4838 <os_thread_exit+0xc>)
   d4830:	681b      	ldr	r3, [r3, #0]
   d4832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4834:	9301      	str	r3, [sp, #4]
   d4836:	bd08      	pop	{r3, pc}
   d4838:	00030248 	.word	0x00030248

000d483c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d483c:	b508      	push	{r3, lr}
   d483e:	4b02      	ldr	r3, [pc, #8]	; (d4848 <HAL_RNG_GetRandomNumber+0xc>)
   d4840:	681b      	ldr	r3, [r3, #0]
   d4842:	685b      	ldr	r3, [r3, #4]
   d4844:	9301      	str	r3, [sp, #4]
   d4846:	bd08      	pop	{r3, pc}
   d4848:	00030218 	.word	0x00030218

000d484c <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d484c:	b508      	push	{r3, lr}
   d484e:	4b02      	ldr	r3, [pc, #8]	; (d4858 <HAL_Delay_Milliseconds+0xc>)
   d4850:	681b      	ldr	r3, [r3, #0]
   d4852:	689b      	ldr	r3, [r3, #8]
   d4854:	9301      	str	r3, [sp, #4]
   d4856:	bd08      	pop	{r3, pc}
   d4858:	00030218 	.word	0x00030218

000d485c <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d485c:	b508      	push	{r3, lr}
   d485e:	4b02      	ldr	r3, [pc, #8]	; (d4868 <HAL_Delay_Microseconds+0xc>)
   d4860:	681b      	ldr	r3, [r3, #0]
   d4862:	68db      	ldr	r3, [r3, #12]
   d4864:	9301      	str	r3, [sp, #4]
   d4866:	bd08      	pop	{r3, pc}
   d4868:	00030218 	.word	0x00030218

000d486c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d486c:	b508      	push	{r3, lr}
   d486e:	4b02      	ldr	r3, [pc, #8]	; (d4878 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4870:	681b      	ldr	r3, [r3, #0]
   d4872:	695b      	ldr	r3, [r3, #20]
   d4874:	9301      	str	r3, [sp, #4]
   d4876:	bd08      	pop	{r3, pc}
   d4878:	00030218 	.word	0x00030218

000d487c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d487c:	b508      	push	{r3, lr}
   d487e:	4b02      	ldr	r3, [pc, #8]	; (d4888 <HAL_Pin_Map+0xc>)
   d4880:	681b      	ldr	r3, [r3, #0]
   d4882:	681b      	ldr	r3, [r3, #0]
   d4884:	9301      	str	r3, [sp, #4]
   d4886:	bd08      	pop	{r3, pc}
   d4888:	0003022c 	.word	0x0003022c

000d488c <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d488c:	b508      	push	{r3, lr}
   d488e:	4b02      	ldr	r3, [pc, #8]	; (d4898 <if_name_to_index+0xc>)
   d4890:	681b      	ldr	r3, [r3, #0]
   d4892:	691b      	ldr	r3, [r3, #16]
   d4894:	9301      	str	r3, [sp, #4]
   d4896:	bd08      	pop	{r3, pc}
   d4898:	0003026c 	.word	0x0003026c

000d489c <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d489c:	b508      	push	{r3, lr}
   d489e:	4b02      	ldr	r3, [pc, #8]	; (d48a8 <if_index_to_name+0xc>)
   d48a0:	681b      	ldr	r3, [r3, #0]
   d48a2:	695b      	ldr	r3, [r3, #20]
   d48a4:	9301      	str	r3, [sp, #4]
   d48a6:	bd08      	pop	{r3, pc}
   d48a8:	0003026c 	.word	0x0003026c

000d48ac <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d48ac:	b508      	push	{r3, lr}
   d48ae:	4b02      	ldr	r3, [pc, #8]	; (d48b8 <if_get_by_index+0xc>)
   d48b0:	681b      	ldr	r3, [r3, #0]
   d48b2:	699b      	ldr	r3, [r3, #24]
   d48b4:	9301      	str	r3, [sp, #4]
   d48b6:	bd08      	pop	{r3, pc}
   d48b8:	0003026c 	.word	0x0003026c

000d48bc <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d48bc:	b508      	push	{r3, lr}
   d48be:	4b02      	ldr	r3, [pc, #8]	; (d48c8 <if_get_addrs+0xc>)
   d48c0:	681b      	ldr	r3, [r3, #0]
   d48c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d48c4:	9301      	str	r3, [sp, #4]
   d48c6:	bd08      	pop	{r3, pc}
   d48c8:	0003026c 	.word	0x0003026c

000d48cc <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d48cc:	b508      	push	{r3, lr}
   d48ce:	4b02      	ldr	r3, [pc, #8]	; (d48d8 <if_free_if_addrs+0xc>)
   d48d0:	681b      	ldr	r3, [r3, #0]
   d48d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d48d4:	9301      	str	r3, [sp, #4]
   d48d6:	bd08      	pop	{r3, pc}
   d48d8:	0003026c 	.word	0x0003026c

000d48dc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d48dc:	b508      	push	{r3, lr}
   d48de:	4b02      	ldr	r3, [pc, #8]	; (d48e8 <inet_inet_ntop+0xc>)
   d48e0:	681b      	ldr	r3, [r3, #0]
   d48e2:	695b      	ldr	r3, [r3, #20]
   d48e4:	9301      	str	r3, [sp, #4]
   d48e6:	bd08      	pop	{r3, pc}
   d48e8:	00030264 	.word	0x00030264

000d48ec <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d48ec:	b508      	push	{r3, lr}
   d48ee:	4b02      	ldr	r3, [pc, #8]	; (d48f8 <inet_inet_pton+0xc>)
   d48f0:	681b      	ldr	r3, [r3, #0]
   d48f2:	699b      	ldr	r3, [r3, #24]
   d48f4:	9301      	str	r3, [sp, #4]
   d48f6:	bd08      	pop	{r3, pc}
   d48f8:	00030264 	.word	0x00030264

000d48fc <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d48fc:	b508      	push	{r3, lr}
   d48fe:	4b02      	ldr	r3, [pc, #8]	; (d4908 <inet_htonl+0xc>)
   d4900:	681b      	ldr	r3, [r3, #0]
   d4902:	6a1b      	ldr	r3, [r3, #32]
   d4904:	9301      	str	r3, [sp, #4]
   d4906:	bd08      	pop	{r3, pc}
   d4908:	00030264 	.word	0x00030264

000d490c <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d490c:	b508      	push	{r3, lr}
   d490e:	4b02      	ldr	r3, [pc, #8]	; (d4918 <inet_ntohs+0xc>)
   d4910:	681b      	ldr	r3, [r3, #0]
   d4912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4914:	9301      	str	r3, [sp, #4]
   d4916:	bd08      	pop	{r3, pc}
   d4918:	00030264 	.word	0x00030264

000d491c <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d491c:	b508      	push	{r3, lr}
   d491e:	4b02      	ldr	r3, [pc, #8]	; (d4928 <inet_htons+0xc>)
   d4920:	681b      	ldr	r3, [r3, #0]
   d4922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4924:	9301      	str	r3, [sp, #4]
   d4926:	bd08      	pop	{r3, pc}
   d4928:	00030264 	.word	0x00030264

000d492c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d492c:	b508      	push	{r3, lr}
   d492e:	4b02      	ldr	r3, [pc, #8]	; (d4938 <netdb_freeaddrinfo+0xc>)
   d4930:	681b      	ldr	r3, [r3, #0]
   d4932:	689b      	ldr	r3, [r3, #8]
   d4934:	9301      	str	r3, [sp, #4]
   d4936:	bd08      	pop	{r3, pc}
   d4938:	00030268 	.word	0x00030268

000d493c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d493c:	b508      	push	{r3, lr}
   d493e:	4b02      	ldr	r3, [pc, #8]	; (d4948 <netdb_getaddrinfo+0xc>)
   d4940:	681b      	ldr	r3, [r3, #0]
   d4942:	68db      	ldr	r3, [r3, #12]
   d4944:	9301      	str	r3, [sp, #4]
   d4946:	bd08      	pop	{r3, pc}
   d4948:	00030268 	.word	0x00030268

000d494c <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d494c:	b508      	push	{r3, lr}
   d494e:	4b02      	ldr	r3, [pc, #8]	; (d4958 <sock_bind+0xc>)
   d4950:	681b      	ldr	r3, [r3, #0]
   d4952:	685b      	ldr	r3, [r3, #4]
   d4954:	9301      	str	r3, [sp, #4]
   d4956:	bd08      	pop	{r3, pc}
   d4958:	00030238 	.word	0x00030238

000d495c <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d495c:	b508      	push	{r3, lr}
   d495e:	4b02      	ldr	r3, [pc, #8]	; (d4968 <sock_setsockopt+0xc>)
   d4960:	681b      	ldr	r3, [r3, #0]
   d4962:	699b      	ldr	r3, [r3, #24]
   d4964:	9301      	str	r3, [sp, #4]
   d4966:	bd08      	pop	{r3, pc}
   d4968:	00030238 	.word	0x00030238

000d496c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d496c:	b508      	push	{r3, lr}
   d496e:	4b02      	ldr	r3, [pc, #8]	; (d4978 <sock_close+0xc>)
   d4970:	681b      	ldr	r3, [r3, #0]
   d4972:	69db      	ldr	r3, [r3, #28]
   d4974:	9301      	str	r3, [sp, #4]
   d4976:	bd08      	pop	{r3, pc}
   d4978:	00030238 	.word	0x00030238

000d497c <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d497c:	b508      	push	{r3, lr}
   d497e:	4b02      	ldr	r3, [pc, #8]	; (d4988 <sock_recvfrom+0xc>)
   d4980:	681b      	ldr	r3, [r3, #0]
   d4982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4984:	9301      	str	r3, [sp, #4]
   d4986:	bd08      	pop	{r3, pc}
   d4988:	00030238 	.word	0x00030238

000d498c <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d498c:	b508      	push	{r3, lr}
   d498e:	4b02      	ldr	r3, [pc, #8]	; (d4998 <sock_sendto+0xc>)
   d4990:	681b      	ldr	r3, [r3, #0]
   d4992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4994:	9301      	str	r3, [sp, #4]
   d4996:	bd08      	pop	{r3, pc}
   d4998:	00030238 	.word	0x00030238

000d499c <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d499c:	b508      	push	{r3, lr}
   d499e:	4b02      	ldr	r3, [pc, #8]	; (d49a8 <sock_socket+0xc>)
   d49a0:	681b      	ldr	r3, [r3, #0]
   d49a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d49a4:	9301      	str	r3, [sp, #4]
   d49a6:	bd08      	pop	{r3, pc}
   d49a8:	00030238 	.word	0x00030238

000d49ac <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d49ac:	b508      	push	{r3, lr}
   d49ae:	4b02      	ldr	r3, [pc, #8]	; (d49b8 <HAL_USART_Init+0xc>)
   d49b0:	681b      	ldr	r3, [r3, #0]
   d49b2:	681b      	ldr	r3, [r3, #0]
   d49b4:	9301      	str	r3, [sp, #4]
   d49b6:	bd08      	pop	{r3, pc}
   d49b8:	0003023c 	.word	0x0003023c

000d49bc <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d49bc:	b508      	push	{r3, lr}
   d49be:	4b02      	ldr	r3, [pc, #8]	; (d49c8 <HAL_USART_End+0xc>)
   d49c0:	681b      	ldr	r3, [r3, #0]
   d49c2:	689b      	ldr	r3, [r3, #8]
   d49c4:	9301      	str	r3, [sp, #4]
   d49c6:	bd08      	pop	{r3, pc}
   d49c8:	0003023c 	.word	0x0003023c

000d49cc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d49cc:	b508      	push	{r3, lr}
   d49ce:	4b02      	ldr	r3, [pc, #8]	; (d49d8 <HAL_USART_Write_Data+0xc>)
   d49d0:	681b      	ldr	r3, [r3, #0]
   d49d2:	68db      	ldr	r3, [r3, #12]
   d49d4:	9301      	str	r3, [sp, #4]
   d49d6:	bd08      	pop	{r3, pc}
   d49d8:	0003023c 	.word	0x0003023c

000d49dc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d49dc:	b508      	push	{r3, lr}
   d49de:	4b02      	ldr	r3, [pc, #8]	; (d49e8 <HAL_USART_Available_Data+0xc>)
   d49e0:	681b      	ldr	r3, [r3, #0]
   d49e2:	691b      	ldr	r3, [r3, #16]
   d49e4:	9301      	str	r3, [sp, #4]
   d49e6:	bd08      	pop	{r3, pc}
   d49e8:	0003023c 	.word	0x0003023c

000d49ec <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d49ec:	b508      	push	{r3, lr}
   d49ee:	4b02      	ldr	r3, [pc, #8]	; (d49f8 <HAL_USART_Read_Data+0xc>)
   d49f0:	681b      	ldr	r3, [r3, #0]
   d49f2:	695b      	ldr	r3, [r3, #20]
   d49f4:	9301      	str	r3, [sp, #4]
   d49f6:	bd08      	pop	{r3, pc}
   d49f8:	0003023c 	.word	0x0003023c

000d49fc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d49fc:	b508      	push	{r3, lr}
   d49fe:	4b02      	ldr	r3, [pc, #8]	; (d4a08 <HAL_USART_Peek_Data+0xc>)
   d4a00:	681b      	ldr	r3, [r3, #0]
   d4a02:	699b      	ldr	r3, [r3, #24]
   d4a04:	9301      	str	r3, [sp, #4]
   d4a06:	bd08      	pop	{r3, pc}
   d4a08:	0003023c 	.word	0x0003023c

000d4a0c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4a0c:	b508      	push	{r3, lr}
   d4a0e:	4b02      	ldr	r3, [pc, #8]	; (d4a18 <HAL_USART_Flush_Data+0xc>)
   d4a10:	681b      	ldr	r3, [r3, #0]
   d4a12:	69db      	ldr	r3, [r3, #28]
   d4a14:	9301      	str	r3, [sp, #4]
   d4a16:	bd08      	pop	{r3, pc}
   d4a18:	0003023c 	.word	0x0003023c

000d4a1c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4a1c:	b508      	push	{r3, lr}
   d4a1e:	4b02      	ldr	r3, [pc, #8]	; (d4a28 <HAL_USART_Available_Data_For_Write+0xc>)
   d4a20:	681b      	ldr	r3, [r3, #0]
   d4a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a24:	9301      	str	r3, [sp, #4]
   d4a26:	bd08      	pop	{r3, pc}
   d4a28:	0003023c 	.word	0x0003023c

000d4a2c <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d4a2c:	b508      	push	{r3, lr}
   d4a2e:	4b02      	ldr	r3, [pc, #8]	; (d4a38 <HAL_USART_BeginConfig+0xc>)
   d4a30:	681b      	ldr	r3, [r3, #0]
   d4a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4a34:	9301      	str	r3, [sp, #4]
   d4a36:	bd08      	pop	{r3, pc}
   d4a38:	0003023c 	.word	0x0003023c

000d4a3c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4a3c:	b508      	push	{r3, lr}
   d4a3e:	4b02      	ldr	r3, [pc, #8]	; (d4a48 <HAL_USB_USART_Init+0xc>)
   d4a40:	681b      	ldr	r3, [r3, #0]
   d4a42:	681b      	ldr	r3, [r3, #0]
   d4a44:	9301      	str	r3, [sp, #4]
   d4a46:	bd08      	pop	{r3, pc}
   d4a48:	0003024c 	.word	0x0003024c

000d4a4c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4a4c:	b508      	push	{r3, lr}
   d4a4e:	4b02      	ldr	r3, [pc, #8]	; (d4a58 <HAL_USB_USART_Begin+0xc>)
   d4a50:	681b      	ldr	r3, [r3, #0]
   d4a52:	685b      	ldr	r3, [r3, #4]
   d4a54:	9301      	str	r3, [sp, #4]
   d4a56:	bd08      	pop	{r3, pc}
   d4a58:	0003024c 	.word	0x0003024c

000d4a5c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d4a5c:	b508      	push	{r3, lr}
   d4a5e:	4b02      	ldr	r3, [pc, #8]	; (d4a68 <HAL_USB_USART_End+0xc>)
   d4a60:	681b      	ldr	r3, [r3, #0]
   d4a62:	689b      	ldr	r3, [r3, #8]
   d4a64:	9301      	str	r3, [sp, #4]
   d4a66:	bd08      	pop	{r3, pc}
   d4a68:	0003024c 	.word	0x0003024c

000d4a6c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4a6c:	b508      	push	{r3, lr}
   d4a6e:	4b02      	ldr	r3, [pc, #8]	; (d4a78 <HAL_USB_USART_Available_Data+0xc>)
   d4a70:	681b      	ldr	r3, [r3, #0]
   d4a72:	691b      	ldr	r3, [r3, #16]
   d4a74:	9301      	str	r3, [sp, #4]
   d4a76:	bd08      	pop	{r3, pc}
   d4a78:	0003024c 	.word	0x0003024c

000d4a7c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4a7c:	b508      	push	{r3, lr}
   d4a7e:	4b02      	ldr	r3, [pc, #8]	; (d4a88 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4a80:	681b      	ldr	r3, [r3, #0]
   d4a82:	695b      	ldr	r3, [r3, #20]
   d4a84:	9301      	str	r3, [sp, #4]
   d4a86:	bd08      	pop	{r3, pc}
   d4a88:	0003024c 	.word	0x0003024c

000d4a8c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4a8c:	b508      	push	{r3, lr}
   d4a8e:	4b02      	ldr	r3, [pc, #8]	; (d4a98 <HAL_USB_USART_Receive_Data+0xc>)
   d4a90:	681b      	ldr	r3, [r3, #0]
   d4a92:	699b      	ldr	r3, [r3, #24]
   d4a94:	9301      	str	r3, [sp, #4]
   d4a96:	bd08      	pop	{r3, pc}
   d4a98:	0003024c 	.word	0x0003024c

000d4a9c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4a9c:	b508      	push	{r3, lr}
   d4a9e:	4b02      	ldr	r3, [pc, #8]	; (d4aa8 <HAL_USB_USART_Send_Data+0xc>)
   d4aa0:	681b      	ldr	r3, [r3, #0]
   d4aa2:	69db      	ldr	r3, [r3, #28]
   d4aa4:	9301      	str	r3, [sp, #4]
   d4aa6:	bd08      	pop	{r3, pc}
   d4aa8:	0003024c 	.word	0x0003024c

000d4aac <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4aac:	b508      	push	{r3, lr}
   d4aae:	4b02      	ldr	r3, [pc, #8]	; (d4ab8 <HAL_USB_USART_Flush_Data+0xc>)
   d4ab0:	681b      	ldr	r3, [r3, #0]
   d4ab2:	6a1b      	ldr	r3, [r3, #32]
   d4ab4:	9301      	str	r3, [sp, #4]
   d4ab6:	bd08      	pop	{r3, pc}
   d4ab8:	0003024c 	.word	0x0003024c

000d4abc <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d4abc:	b508      	push	{r3, lr}
   d4abe:	4b02      	ldr	r3, [pc, #8]	; (d4ac8 <LED_SetSignalingColor+0xc>)
   d4ac0:	681b      	ldr	r3, [r3, #0]
   d4ac2:	685b      	ldr	r3, [r3, #4]
   d4ac4:	9301      	str	r3, [sp, #4]
   d4ac6:	bd08      	pop	{r3, pc}
   d4ac8:	00030260 	.word	0x00030260

000d4acc <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d4acc:	b508      	push	{r3, lr}
   d4ace:	4b02      	ldr	r3, [pc, #8]	; (d4ad8 <LED_Signaling_Start+0xc>)
   d4ad0:	681b      	ldr	r3, [r3, #0]
   d4ad2:	689b      	ldr	r3, [r3, #8]
   d4ad4:	9301      	str	r3, [sp, #4]
   d4ad6:	bd08      	pop	{r3, pc}
   d4ad8:	00030260 	.word	0x00030260

000d4adc <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d4adc:	b508      	push	{r3, lr}
   d4ade:	4b02      	ldr	r3, [pc, #8]	; (d4ae8 <LED_Signaling_Stop+0xc>)
   d4ae0:	681b      	ldr	r3, [r3, #0]
   d4ae2:	68db      	ldr	r3, [r3, #12]
   d4ae4:	9301      	str	r3, [sp, #4]
   d4ae6:	bd08      	pop	{r3, pc}
   d4ae8:	00030260 	.word	0x00030260

000d4aec <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d4aec:	b508      	push	{r3, lr}
   d4aee:	4b02      	ldr	r3, [pc, #8]	; (d4af8 <LED_RGB_IsOverRidden+0xc>)
   d4af0:	681b      	ldr	r3, [r3, #0]
   d4af2:	699b      	ldr	r3, [r3, #24]
   d4af4:	9301      	str	r3, [sp, #4]
   d4af6:	bd08      	pop	{r3, pc}
   d4af8:	00030260 	.word	0x00030260

000d4afc <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d4afc:	b508      	push	{r3, lr}
   d4afe:	4b02      	ldr	r3, [pc, #8]	; (d4b08 <LED_On+0xc>)
   d4b00:	681b      	ldr	r3, [r3, #0]
   d4b02:	69db      	ldr	r3, [r3, #28]
   d4b04:	9301      	str	r3, [sp, #4]
   d4b06:	bd08      	pop	{r3, pc}
   d4b08:	00030260 	.word	0x00030260

000d4b0c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4b0c:	b508      	push	{r3, lr}
   d4b0e:	4b02      	ldr	r3, [pc, #8]	; (d4b18 <panic_+0xc>)
   d4b10:	681b      	ldr	r3, [r3, #0]
   d4b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4b14:	9301      	str	r3, [sp, #4]
   d4b16:	bd08      	pop	{r3, pc}
   d4b18:	00030260 	.word	0x00030260

000d4b1c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4b1c:	b508      	push	{r3, lr}
   d4b1e:	4b02      	ldr	r3, [pc, #8]	; (d4b28 <log_message+0xc>)
   d4b20:	681b      	ldr	r3, [r3, #0]
   d4b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4b24:	9301      	str	r3, [sp, #4]
   d4b26:	bd08      	pop	{r3, pc}
   d4b28:	00030260 	.word	0x00030260

000d4b2c <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d4b2c:	b508      	push	{r3, lr}
   d4b2e:	4b02      	ldr	r3, [pc, #8]	; (d4b38 <log_message_v+0xc>)
   d4b30:	681b      	ldr	r3, [r3, #0]
   d4b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4b34:	9301      	str	r3, [sp, #4]
   d4b36:	bd08      	pop	{r3, pc}
   d4b38:	00030260 	.word	0x00030260

000d4b3c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d4b3c:	b508      	push	{r3, lr}
   d4b3e:	4b02      	ldr	r3, [pc, #8]	; (d4b48 <log_level_name+0xc>)
   d4b40:	681b      	ldr	r3, [r3, #0]
   d4b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4b44:	9301      	str	r3, [sp, #4]
   d4b46:	bd08      	pop	{r3, pc}
   d4b48:	00030260 	.word	0x00030260

000d4b4c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d4b4c:	b508      	push	{r3, lr}
   d4b4e:	4b02      	ldr	r3, [pc, #8]	; (d4b58 <log_set_callbacks+0xc>)
   d4b50:	681b      	ldr	r3, [r3, #0]
   d4b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4b54:	9301      	str	r3, [sp, #4]
   d4b56:	bd08      	pop	{r3, pc}
   d4b58:	00030260 	.word	0x00030260

000d4b5c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4b5c:	b508      	push	{r3, lr}
   d4b5e:	4b02      	ldr	r3, [pc, #8]	; (d4b68 <set_system_mode+0xc>)
   d4b60:	681b      	ldr	r3, [r3, #0]
   d4b62:	685b      	ldr	r3, [r3, #4]
   d4b64:	9301      	str	r3, [sp, #4]
   d4b66:	bd08      	pop	{r3, pc}
   d4b68:	00030220 	.word	0x00030220

000d4b6c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4b6c:	b508      	push	{r3, lr}
   d4b6e:	4b02      	ldr	r3, [pc, #8]	; (d4b78 <system_delay_ms+0xc>)
   d4b70:	681b      	ldr	r3, [r3, #0]
   d4b72:	695b      	ldr	r3, [r3, #20]
   d4b74:	9301      	str	r3, [sp, #4]
   d4b76:	bd08      	pop	{r3, pc}
   d4b78:	00030220 	.word	0x00030220

000d4b7c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4b7c:	b508      	push	{r3, lr}
   d4b7e:	4b03      	ldr	r3, [pc, #12]	; (d4b8c <system_ctrl_set_app_request_handler+0x10>)
   d4b80:	681b      	ldr	r3, [r3, #0]
   d4b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4b86:	9301      	str	r3, [sp, #4]
   d4b88:	bd08      	pop	{r3, pc}
   d4b8a:	0000      	.short	0x0000
   d4b8c:	00030220 	.word	0x00030220

000d4b90 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4b90:	b508      	push	{r3, lr}
   d4b92:	4b03      	ldr	r3, [pc, #12]	; (d4ba0 <system_ctrl_set_result+0x10>)
   d4b94:	681b      	ldr	r3, [r3, #0]
   d4b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4b9a:	9301      	str	r3, [sp, #4]
   d4b9c:	bd08      	pop	{r3, pc}
   d4b9e:	0000      	.short	0x0000
   d4ba0:	00030220 	.word	0x00030220

000d4ba4 <system_invoke_event_handler>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))
   d4ba4:	b508      	push	{r3, lr}
   d4ba6:	4b03      	ldr	r3, [pc, #12]	; (d4bb4 <system_invoke_event_handler+0x10>)
   d4ba8:	681b      	ldr	r3, [r3, #0]
   d4baa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   d4bae:	9301      	str	r3, [sp, #4]
   d4bb0:	bd08      	pop	{r3, pc}
   d4bb2:	0000      	.short	0x0000
   d4bb4:	00030220 	.word	0x00030220

000d4bb8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4bb8:	b508      	push	{r3, lr}
   d4bba:	4b02      	ldr	r3, [pc, #8]	; (d4bc4 <spark_process+0xc>)
   d4bbc:	681b      	ldr	r3, [r3, #0]
   d4bbe:	689b      	ldr	r3, [r3, #8]
   d4bc0:	9301      	str	r3, [sp, #4]
   d4bc2:	bd08      	pop	{r3, pc}
   d4bc4:	00030244 	.word	0x00030244

000d4bc8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4bc8:	b508      	push	{r3, lr}
   d4bca:	4b02      	ldr	r3, [pc, #8]	; (d4bd4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4bcc:	681b      	ldr	r3, [r3, #0]
   d4bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4bd0:	9301      	str	r3, [sp, #4]
   d4bd2:	bd08      	pop	{r3, pc}
   d4bd4:	00030244 	.word	0x00030244

000d4bd8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4bd8:	b508      	push	{r3, lr}
   d4bda:	4b02      	ldr	r3, [pc, #8]	; (d4be4 <network_connect+0xc>)
   d4bdc:	681b      	ldr	r3, [r3, #0]
   d4bde:	685b      	ldr	r3, [r3, #4]
   d4be0:	9301      	str	r3, [sp, #4]
   d4be2:	bd08      	pop	{r3, pc}
   d4be4:	00030240 	.word	0x00030240

000d4be8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4be8:	b508      	push	{r3, lr}
   d4bea:	4b02      	ldr	r3, [pc, #8]	; (d4bf4 <network_connecting+0xc>)
   d4bec:	681b      	ldr	r3, [r3, #0]
   d4bee:	689b      	ldr	r3, [r3, #8]
   d4bf0:	9301      	str	r3, [sp, #4]
   d4bf2:	bd08      	pop	{r3, pc}
   d4bf4:	00030240 	.word	0x00030240

000d4bf8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4bf8:	b508      	push	{r3, lr}
   d4bfa:	4b02      	ldr	r3, [pc, #8]	; (d4c04 <network_disconnect+0xc>)
   d4bfc:	681b      	ldr	r3, [r3, #0]
   d4bfe:	68db      	ldr	r3, [r3, #12]
   d4c00:	9301      	str	r3, [sp, #4]
   d4c02:	bd08      	pop	{r3, pc}
   d4c04:	00030240 	.word	0x00030240

000d4c08 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4c08:	b508      	push	{r3, lr}
   d4c0a:	4b02      	ldr	r3, [pc, #8]	; (d4c14 <network_ready+0xc>)
   d4c0c:	681b      	ldr	r3, [r3, #0]
   d4c0e:	691b      	ldr	r3, [r3, #16]
   d4c10:	9301      	str	r3, [sp, #4]
   d4c12:	bd08      	pop	{r3, pc}
   d4c14:	00030240 	.word	0x00030240

000d4c18 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c18:	b508      	push	{r3, lr}
   d4c1a:	4b02      	ldr	r3, [pc, #8]	; (d4c24 <network_on+0xc>)
   d4c1c:	681b      	ldr	r3, [r3, #0]
   d4c1e:	695b      	ldr	r3, [r3, #20]
   d4c20:	9301      	str	r3, [sp, #4]
   d4c22:	bd08      	pop	{r3, pc}
   d4c24:	00030240 	.word	0x00030240

000d4c28 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c28:	b508      	push	{r3, lr}
   d4c2a:	4b02      	ldr	r3, [pc, #8]	; (d4c34 <network_off+0xc>)
   d4c2c:	681b      	ldr	r3, [r3, #0]
   d4c2e:	699b      	ldr	r3, [r3, #24]
   d4c30:	9301      	str	r3, [sp, #4]
   d4c32:	bd08      	pop	{r3, pc}
   d4c34:	00030240 	.word	0x00030240

000d4c38 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4c38:	b508      	push	{r3, lr}
   d4c3a:	4b02      	ldr	r3, [pc, #8]	; (d4c44 <network_listen+0xc>)
   d4c3c:	681b      	ldr	r3, [r3, #0]
   d4c3e:	69db      	ldr	r3, [r3, #28]
   d4c40:	9301      	str	r3, [sp, #4]
   d4c42:	bd08      	pop	{r3, pc}
   d4c44:	00030240 	.word	0x00030240

000d4c48 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4c48:	b508      	push	{r3, lr}
   d4c4a:	4b02      	ldr	r3, [pc, #8]	; (d4c54 <network_listening+0xc>)
   d4c4c:	681b      	ldr	r3, [r3, #0]
   d4c4e:	6a1b      	ldr	r3, [r3, #32]
   d4c50:	9301      	str	r3, [sp, #4]
   d4c52:	bd08      	pop	{r3, pc}
   d4c54:	00030240 	.word	0x00030240

000d4c58 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4c58:	b508      	push	{r3, lr}
   d4c5a:	4b02      	ldr	r3, [pc, #8]	; (d4c64 <network_set_listen_timeout+0xc>)
   d4c5c:	681b      	ldr	r3, [r3, #0]
   d4c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c60:	9301      	str	r3, [sp, #4]
   d4c62:	bd08      	pop	{r3, pc}
   d4c64:	00030240 	.word	0x00030240

000d4c68 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4c68:	b508      	push	{r3, lr}
   d4c6a:	4b02      	ldr	r3, [pc, #8]	; (d4c74 <network_get_listen_timeout+0xc>)
   d4c6c:	681b      	ldr	r3, [r3, #0]
   d4c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c70:	9301      	str	r3, [sp, #4]
   d4c72:	bd08      	pop	{r3, pc}
   d4c74:	00030240 	.word	0x00030240

000d4c78 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4c78:	b508      	push	{r3, lr}
   d4c7a:	4b02      	ldr	r3, [pc, #8]	; (d4c84 <malloc+0xc>)
   d4c7c:	681b      	ldr	r3, [r3, #0]
   d4c7e:	681b      	ldr	r3, [r3, #0]
   d4c80:	9301      	str	r3, [sp, #4]
   d4c82:	bd08      	pop	{r3, pc}
   d4c84:	0003021c 	.word	0x0003021c

000d4c88 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4c88:	b508      	push	{r3, lr}
   d4c8a:	4b02      	ldr	r3, [pc, #8]	; (d4c94 <free+0xc>)
   d4c8c:	681b      	ldr	r3, [r3, #0]
   d4c8e:	685b      	ldr	r3, [r3, #4]
   d4c90:	9301      	str	r3, [sp, #4]
   d4c92:	bd08      	pop	{r3, pc}
   d4c94:	0003021c 	.word	0x0003021c

000d4c98 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4c98:	b508      	push	{r3, lr}
   d4c9a:	4b02      	ldr	r3, [pc, #8]	; (d4ca4 <realloc+0xc>)
   d4c9c:	681b      	ldr	r3, [r3, #0]
   d4c9e:	689b      	ldr	r3, [r3, #8]
   d4ca0:	9301      	str	r3, [sp, #4]
   d4ca2:	bd08      	pop	{r3, pc}
   d4ca4:	0003021c 	.word	0x0003021c

000d4ca8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4ca8:	b508      	push	{r3, lr}
   d4caa:	4b02      	ldr	r3, [pc, #8]	; (d4cb4 <vsnprintf+0xc>)
   d4cac:	681b      	ldr	r3, [r3, #0]
   d4cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4cb0:	9301      	str	r3, [sp, #4]
   d4cb2:	bd08      	pop	{r3, pc}
   d4cb4:	0003021c 	.word	0x0003021c

000d4cb8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4cb8:	b508      	push	{r3, lr}
   d4cba:	4b02      	ldr	r3, [pc, #8]	; (d4cc4 <abort+0xc>)
   d4cbc:	681b      	ldr	r3, [r3, #0]
   d4cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4cc0:	9301      	str	r3, [sp, #4]
   d4cc2:	bd08      	pop	{r3, pc}
   d4cc4:	0003021c 	.word	0x0003021c

000d4cc8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4cc8:	2100      	movs	r1, #0
   d4cca:	f7ff bf4f 	b.w	d4b6c <system_delay_ms>

000d4cce <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4cce:	4770      	bx	lr

000d4cd0 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4cd0:	2000      	movs	r0, #0
   d4cd2:	4770      	bx	lr

000d4cd4 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4cd4:	4770      	bx	lr

000d4cd6 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4cd6:	2000      	movs	r0, #0
   d4cd8:	4770      	bx	lr

000d4cda <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4cda:	4770      	bx	lr

000d4cdc <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4cdc:	2000      	movs	r0, #0
   d4cde:	4770      	bx	lr

000d4ce0 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4ce0:	b510      	push	{r4, lr}
   d4ce2:	2114      	movs	r1, #20
   d4ce4:	4604      	mov	r4, r0
   d4ce6:	f003 fe28 	bl	d893a <_ZdlPvj>
   d4cea:	4620      	mov	r0, r4
   d4cec:	bd10      	pop	{r4, pc}

000d4cee <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d4cee:	b510      	push	{r4, lr}
   d4cf0:	2114      	movs	r1, #20
   d4cf2:	4604      	mov	r4, r0
   d4cf4:	f003 fe21 	bl	d893a <_ZdlPvj>
   d4cf8:	4620      	mov	r0, r4
   d4cfa:	bd10      	pop	{r4, pc}

000d4cfc <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d4cfc:	b510      	push	{r4, lr}
   d4cfe:	2114      	movs	r1, #20
   d4d00:	4604      	mov	r4, r0
   d4d02:	f003 fe1a 	bl	d893a <_ZdlPvj>
   d4d06:	4620      	mov	r0, r4
   d4d08:	bd10      	pop	{r4, pc}

000d4d0a <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4d0a:	f7ff b9c8 	b.w	d409e <_ZdlPv>

000d4d0e <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d4d0e:	f7ff b9c6 	b.w	d409e <_ZdlPv>

000d4d12 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d4d12:	f7ff b9c4 	b.w	d409e <_ZdlPv>

000d4d16 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4d16:	b510      	push	{r4, lr}
   d4d18:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4d1a:	6800      	ldr	r0, [r0, #0]
   d4d1c:	b108      	cbz	r0, d4d22 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4d1e:	f7ff fd6d 	bl	d47fc <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4d22:	4620      	mov	r0, r4
   d4d24:	bd10      	pop	{r4, pc}
	...

000d4d28 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d4d28:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d4d2a:	200a      	movs	r0, #10
   d4d2c:	4a02      	ldr	r2, [pc, #8]	; (d4d38 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d4d2e:	2100      	movs	r1, #0
   d4d30:	f7ff feec 	bl	d4b0c <panic_>
    }
}
   d4d34:	bd08      	pop	{r3, pc}
   d4d36:	bf00      	nop
   d4d38:	000d485d 	.word	0x000d485d

000d4d3c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4d3c:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4d3e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4d40:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4d42:	689b      	ldr	r3, [r3, #8]
   d4d44:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4d46:	68a3      	ldr	r3, [r4, #8]
   d4d48:	3b01      	subs	r3, #1
   d4d4a:	60a3      	str	r3, [r4, #8]
   d4d4c:	b92b      	cbnz	r3, d4d5a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d4d4e:	6823      	ldr	r3, [r4, #0]
   d4d50:	4620      	mov	r0, r4
   d4d52:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4d58:	4718      	bx	r3
   d4d5a:	bd10      	pop	{r4, pc}

000d4d5c <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d4d5c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d4d60:	b2da      	uxtb	r2, r3
   d4d62:	2a09      	cmp	r2, #9
   d4d64:	d801      	bhi.n	d4d6a <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d4d66:	4618      	mov	r0, r3
   d4d68:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d4d6a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d4d6e:	2b05      	cmp	r3, #5
   d4d70:	d801      	bhi.n	d4d76 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d4d72:	3857      	subs	r0, #87	; 0x57
   d4d74:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d4d76:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d4d7a:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d4d7c:	bf94      	ite	ls
   d4d7e:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d4d80:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   d4d84:	4770      	bx	lr
	...

000d4d88 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4d88:	b510      	push	{r4, lr}
            locked_(false) {
   d4d8a:	2300      	movs	r3, #0
   d4d8c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d4d8e:	4b04      	ldr	r3, [pc, #16]	; (d4da0 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4d90:	4604      	mov	r4, r0
   d4d92:	6818      	ldr	r0, [r3, #0]
   d4d94:	f7ff fd3a 	bl	d480c <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d4d98:	2301      	movs	r3, #1
   d4d9a:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d4d9c:	4620      	mov	r0, r4
   d4d9e:	bd10      	pop	{r4, pc}
   d4da0:	2003e3c0 	.word	0x2003e3c0

000d4da4 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d4da4:	b510      	push	{r4, lr}
        if (locked_) {
   d4da6:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d4da8:	4604      	mov	r4, r0
        if (locked_) {
   d4daa:	b11b      	cbz	r3, d4db4 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d4dac:	4b02      	ldr	r3, [pc, #8]	; (d4db8 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d4dae:	6818      	ldr	r0, [r3, #0]
   d4db0:	f7ff fd34 	bl	d481c <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d4db4:	4620      	mov	r0, r4
   d4db6:	bd10      	pop	{r4, pc}
   d4db8:	2003e3c0 	.word	0x2003e3c0

000d4dbc <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d4dbc:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d4dbe:	7982      	ldrb	r2, [r0, #6]
   d4dc0:	798b      	ldrb	r3, [r1, #6]
   d4dc2:	429a      	cmp	r2, r3
   d4dc4:	d106      	bne.n	d4dd4 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d4dc6:	2206      	movs	r2, #6
   d4dc8:	f003 ff30 	bl	d8c2c <memcmp>
   d4dcc:	fab0 f080 	clz	r0, r0
   d4dd0:	0940      	lsrs	r0, r0, #5
   d4dd2:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d4dd4:	2000      	movs	r0, #0
}
   d4dd6:	bd08      	pop	{r3, pc}

000d4dd8 <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d4dd8:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d4dda:	2301      	movs	r3, #1
   d4ddc:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4dde:	4b05      	ldr	r3, [pc, #20]	; (d4df4 <_ZN8particle7BleUuidC1Ev+0x1c>)
   d4de0:	4602      	mov	r2, r0
   d4de2:	f103 0110 	add.w	r1, r3, #16
   d4de6:	f853 4b04 	ldr.w	r4, [r3], #4
   d4dea:	f842 4b04 	str.w	r4, [r2], #4
   d4dee:	428b      	cmp	r3, r1
   d4df0:	d1f9      	bne.n	d4de6 <_ZN8particle7BleUuidC1Ev+0xe>
}
   d4df2:	bd10      	pop	{r4, pc}
   d4df4:	000d9228 	.word	0x000d9228

000d4df8 <_ZN8particle7BleUuidC1ERKS0_>:
        type_ = BleUuidType::LONG;
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
    }
}

BleUuid::BleUuid(const BleUuid& uuid)
   d4df8:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d4dfa:	690b      	ldr	r3, [r1, #16]
   d4dfc:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d4dfe:	f101 0210 	add.w	r2, r1, #16
   d4e02:	4603      	mov	r3, r0
   d4e04:	f851 4b04 	ldr.w	r4, [r1], #4
   d4e08:	f843 4b04 	str.w	r4, [r3], #4
   d4e0c:	4291      	cmp	r1, r2
   d4e0e:	d1f9      	bne.n	d4e04 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d4e10:	bd10      	pop	{r4, pc}

000d4e12 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d4e12:	b510      	push	{r4, lr}
    if (uuid128) {
   d4e14:	460b      	mov	r3, r1
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d4e16:	4604      	mov	r4, r0
    if (uuid128) {
   d4e18:	b1b9      	cbz	r1, d4e4a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x38>
        if (order == BleUuidOrder::LSB) {
   d4e1a:	2a01      	cmp	r2, #1
   d4e1c:	d109      	bne.n	d4e32 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x20>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4e1e:	4603      	mov	r3, r0
   d4e20:	f101 0210 	add.w	r2, r1, #16
   d4e24:	f851 0b04 	ldr.w	r0, [r1], #4
   d4e28:	f843 0b04 	str.w	r0, [r3], #4
   d4e2c:	4291      	cmp	r1, r2
   d4e2e:	d1f9      	bne.n	d4e24 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
   d4e30:	e008      	b.n	d4e44 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
   d4e32:	1e41      	subs	r1, r0, #1
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
   d4e34:	220f      	movs	r2, #15
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid128_[i] = uuid128[j];
   d4e36:	5c98      	ldrb	r0, [r3, r2]
   d4e38:	f801 0f01 	strb.w	r0, [r1, #1]!
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d4e3c:	3a01      	subs	r2, #1
   d4e3e:	b2d2      	uxtb	r2, r2
   d4e40:	2aff      	cmp	r2, #255	; 0xff
   d4e42:	d1f8      	bne.n	d4e36 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
                uuid128_[i] = uuid128[j];
            }
        }
        type_ = BleUuidType::LONG;
   d4e44:	2301      	movs	r3, #1
   d4e46:	6123      	str	r3, [r4, #16]
   d4e48:	e002      	b.n	d4e50 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x3e>
    } else {
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d4e4a:	2210      	movs	r2, #16
   d4e4c:	f003 ff23 	bl	d8c96 <memset>
    }
}
   d4e50:	4620      	mov	r0, r4
   d4e52:	bd10      	pop	{r4, pc}

000d4e54 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
    type_ = BleUuidType::SHORT;
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d4e54:	b538      	push	{r3, r4, r5, lr}
   d4e56:	4605      	mov	r5, r0
   d4e58:	4614      	mov	r4, r2
        : BleUuid(uuid128, order) {
   d4e5a:	461a      	mov	r2, r3
   d4e5c:	f7ff ffd9 	bl	d4e12 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d4e60:	732c      	strb	r4, [r5, #12]
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d4e62:	0a24      	lsrs	r4, r4, #8
   d4e64:	736c      	strb	r4, [r5, #13]
}
   d4e66:	4628      	mov	r0, r5
   d4e68:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4e6c <_ZNK8particle7BleUuid7isValidEv>:

BleUuid::BleUuid(const String& uuid)
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
   d4e6c:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d4e6e:	6902      	ldr	r2, [r0, #16]
   d4e70:	b90a      	cbnz	r2, d4e76 <_ZNK8particle7BleUuid7isValidEv+0xa>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d4e72:	8980      	ldrh	r0, [r0, #12]
   d4e74:	e003      	b.n	d4e7e <_ZNK8particle7BleUuid7isValidEv+0x12>
    } else {
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4e76:	2210      	movs	r2, #16
   d4e78:	4903      	ldr	r1, [pc, #12]	; (d4e88 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d4e7a:	f003 fed7 	bl	d8c2c <memcmp>
   d4e7e:	3000      	adds	r0, #0
   d4e80:	bf18      	it	ne
   d4e82:	2001      	movne	r0, #1
    }
}
   d4e84:	bd08      	pop	{r3, pc}
   d4e86:	bf00      	nop
   d4e88:	000d9228 	.word	0x000d9228

000d4e8c <_ZNK8particle7BleUuid4typeEv>:

BleUuidType BleUuid::type() const {
    return type_;
}
   d4e8c:	6900      	ldr	r0, [r0, #16]
   d4e8e:	4770      	bx	lr

000d4e90 <_ZN8particle7BleUuid7halUUIDEv>:

hal_ble_uuid_t BleUuid::halUUID() {
   d4e90:	b538      	push	{r3, r4, r5, lr}
   d4e92:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d4e94:	2214      	movs	r2, #20
   d4e96:	2100      	movs	r1, #0

BleUuidType BleUuid::type() const {
    return type_;
}

hal_ble_uuid_t BleUuid::halUUID() {
   d4e98:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d4e9a:	f003 fefc 	bl	d8c96 <memset>
    if (type_ == BleUuidType::SHORT) {
   d4e9e:	6923      	ldr	r3, [r4, #16]
   d4ea0:	b92b      	cbnz	r3, d4eae <_ZN8particle7BleUuid7halUUIDEv+0x1e>
        uuid.type = BLE_UUID_TYPE_16BIT;
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d4ea2:	7b62      	ldrb	r2, [r4, #13]
   d4ea4:	7b23      	ldrb	r3, [r4, #12]
   d4ea6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4eaa:	802b      	strh	r3, [r5, #0]
   d4eac:	e00a      	b.n	d4ec4 <_ZN8particle7BleUuid7halUUIDEv+0x34>
    } else {
        uuid.type = BLE_UUID_TYPE_128BIT;
   d4eae:	2301      	movs	r3, #1
   d4eb0:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d4eb2:	f104 0210 	add.w	r2, r4, #16
   d4eb6:	462b      	mov	r3, r5
   d4eb8:	f854 1b04 	ldr.w	r1, [r4], #4
   d4ebc:	f843 1b04 	str.w	r1, [r3], #4
   d4ec0:	4294      	cmp	r4, r2
   d4ec2:	d1f9      	bne.n	d4eb8 <_ZN8particle7BleUuid7halUUIDEv+0x28>
    }
    return uuid;
}
   d4ec4:	4628      	mov	r0, r5
   d4ec6:	bd38      	pop	{r3, r4, r5, pc}

000d4ec8 <_ZNK8particle7BleUuid7shortedEv>:

uint16_t BleUuid::shorted() const {
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d4ec8:	7b42      	ldrb	r2, [r0, #13]
   d4eca:	7b00      	ldrb	r0, [r0, #12]
}
   d4ecc:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d4ed0:	4770      	bx	lr

000d4ed2 <_ZNK8particle7BleUuid8rawBytesEv>:
    return BLE_SIG_UUID_128BIT_LEN;
}

const uint8_t* BleUuid::rawBytes() const {
    return uuid128_;
}
   d4ed2:	4770      	bx	lr

000d4ed4 <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d4ed4:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d4ed6:	690b      	ldr	r3, [r1, #16]
   d4ed8:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d4eda:	f101 0210 	add.w	r2, r1, #16
   d4ede:	4603      	mov	r3, r0
   d4ee0:	f851 4b04 	ldr.w	r4, [r1], #4
   d4ee4:	f843 4b04 	str.w	r4, [r3], #4
   d4ee8:	4291      	cmp	r1, r2
   d4eea:	d1f9      	bne.n	d4ee0 <_ZN8particle7BleUuidaSERKS0_+0xc>
    return *this;
}
   d4eec:	bd10      	pop	{r4, pc}

000d4eee <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d4eee:	b510      	push	{r4, lr}
   d4ef0:	b086      	sub	sp, #24
   d4ef2:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d4ef4:	2201      	movs	r2, #1
   d4ef6:	a801      	add	r0, sp, #4
   d4ef8:	f7ff ff8b 	bl	d4e12 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d4efc:	a901      	add	r1, sp, #4
   d4efe:	4620      	mov	r0, r4
   d4f00:	f7ff ffe8 	bl	d4ed4 <_ZN8particle7BleUuidaSERKS0_>
}
   d4f04:	b006      	add	sp, #24
   d4f06:	bd10      	pop	{r4, pc}

000d4f08 <_ZNK8particle7BleUuideqERKS0_>:

BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
    return *this = BleUuid(uuid);
}

bool BleUuid::operator==(const BleUuid& uuid) const {
   d4f08:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d4f0a:	6902      	ldr	r2, [r0, #16]
   d4f0c:	690b      	ldr	r3, [r1, #16]
   d4f0e:	429a      	cmp	r2, r3
   d4f10:	d106      	bne.n	d4f20 <_ZNK8particle7BleUuideqERKS0_+0x18>
   d4f12:	2210      	movs	r2, #16
   d4f14:	f003 fe8a 	bl	d8c2c <memcmp>
   d4f18:	fab0 f080 	clz	r0, r0
   d4f1c:	0940      	lsrs	r0, r0, #5
   d4f1e:	bd08      	pop	{r3, pc}
   d4f20:	2000      	movs	r0, #0
}
   d4f22:	bd08      	pop	{r3, pc}

000d4f24 <_ZN8particle7BleUuid9constructEPKc>:
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
    type_ = BleUuidType::LONG;
   d4f24:	2301      	movs	r3, #1
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d4f26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    type_ = BleUuidType::LONG;
   d4f28:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4f2a:	4b31      	ldr	r3, [pc, #196]	; (d4ff0 <_ZN8particle7BleUuid9constructEPKc+0xcc>)
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d4f2c:	460e      	mov	r6, r1
   d4f2e:	4605      	mov	r5, r0
    type_ = BleUuidType::LONG;
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4f30:	4602      	mov	r2, r0
   d4f32:	f103 0110 	add.w	r1, r3, #16
   d4f36:	f853 0b04 	ldr.w	r0, [r3], #4
   d4f3a:	f842 0b04 	str.w	r0, [r2], #4
   d4f3e:	428b      	cmp	r3, r1
   d4f40:	d1f9      	bne.n	d4f36 <_ZN8particle7BleUuid9constructEPKc+0x12>
    if (uuid == nullptr) {
   d4f42:	2e00      	cmp	r6, #0
   d4f44:	d051      	beq.n	d4fea <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d4f46:	2124      	movs	r1, #36	; 0x24
   d4f48:	4630      	mov	r0, r6
   d4f4a:	f003 ff1c 	bl	d8d86 <strnlen>
   d4f4e:	2804      	cmp	r0, #4
   d4f50:	d010      	beq.n	d4f74 <_ZN8particle7BleUuid9constructEPKc+0x50>
   d4f52:	2700      	movs	r7, #0
   d4f54:	2410      	movs	r4, #16
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d4f56:	2124      	movs	r1, #36	; 0x24
   d4f58:	4630      	mov	r0, r6
   d4f5a:	f003 ff14 	bl	d8d86 <strnlen>
   d4f5e:	42b8      	cmp	r0, r7
   d4f60:	d901      	bls.n	d4f66 <_ZN8particle7BleUuid9constructEPKc+0x42>
   d4f62:	bb44      	cbnz	r4, d4fb6 <_ZN8particle7BleUuid9constructEPKc+0x92>
   d4f64:	e041      	b.n	d4fea <_ZN8particle7BleUuid9constructEPKc+0xc6>
   d4f66:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
   d4f68:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d4f6a:	42a5      	cmp	r5, r4
   d4f6c:	d03d      	beq.n	d4fea <_ZN8particle7BleUuid9constructEPKc+0xc6>
        uuid128_[len - 1] = 0x00;
   d4f6e:	f804 3d01 	strb.w	r3, [r4, #-1]!
   d4f72:	e7fa      	b.n	d4f6a <_ZN8particle7BleUuid9constructEPKc+0x46>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d4f74:	7830      	ldrb	r0, [r6, #0]
   d4f76:	f7ff fef1 	bl	d4d5c <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d4f7a:	1e04      	subs	r4, r0, #0
   d4f7c:	db18      	blt.n	d4fb0 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d4f7e:	7870      	ldrb	r0, [r6, #1]
   d4f80:	f7ff feec 	bl	d4d5c <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d4f84:	2800      	cmp	r0, #0
   d4f86:	db13      	blt.n	d4fb0 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d4f88:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d4f8c:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d4f90:	78b0      	ldrb	r0, [r6, #2]
   d4f92:	f7ff fee3 	bl	d4d5c <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d4f96:	1e04      	subs	r4, r0, #0
   d4f98:	db0a      	blt.n	d4fb0 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d4f9a:	78f0      	ldrb	r0, [r6, #3]
   d4f9c:	f7ff fede 	bl	d4d5c <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d4fa0:	2800      	cmp	r0, #0
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d4fa2:	bfa1      	itttt	ge
   d4fa4:	ea40 1004 	orrge.w	r0, r0, r4, lsl #4
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
            uuid128_[UUID16_HI] = buf[0];
   d4fa8:	f89d 3004 	ldrbge.w	r3, [sp, #4]
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
   d4fac:	7328      	strbge	r0, [r5, #12]
            uuid128_[UUID16_HI] = buf[0];
   d4fae:	736b      	strbge	r3, [r5, #13]
        }
        type_ = BleUuidType::SHORT;
   d4fb0:	2300      	movs	r3, #0
   d4fb2:	612b      	str	r3, [r5, #16]
   d4fb4:	e019      	b.n	d4fea <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
        int8_t hi = hexToNibble(uuid[i]);
   d4fb6:	5df0      	ldrb	r0, [r6, r7]
   d4fb8:	f7ff fed0 	bl	d4d5c <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d4fbc:	0603      	lsls	r3, r0, #24
   d4fbe:	d412      	bmi.n	d4fe6 <_ZN8particle7BleUuid9constructEPKc+0xc2>
            uuid128_[len - 1] = hi << 4;
   d4fc0:	3c01      	subs	r4, #1
   d4fc2:	0100      	lsls	r0, r0, #4
   d4fc4:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d4fc6:	2124      	movs	r1, #36	; 0x24
   d4fc8:	4630      	mov	r0, r6
   d4fca:	f003 fedc 	bl	d8d86 <strnlen>
   d4fce:	3701      	adds	r7, #1
   d4fd0:	4287      	cmp	r7, r0
   d4fd2:	d208      	bcs.n	d4fe6 <_ZN8particle7BleUuid9constructEPKc+0xc2>
                int8_t lo = hexToNibble(uuid[i]);
   d4fd4:	5df0      	ldrb	r0, [r6, r7]
   d4fd6:	f7ff fec1 	bl	d4d5c <_ZN8particle11hexToNibbleEc>
   d4fda:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d4fdc:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d4fde:	bfa2      	ittt	ge
   d4fe0:	5d2b      	ldrbge	r3, [r5, r4]
   d4fe2:	4318      	orrge	r0, r3
   d4fe4:	5528      	strbge	r0, [r5, r4]
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d4fe6:	3701      	adds	r7, #1
   d4fe8:	e7b5      	b.n	d4f56 <_ZN8particle7BleUuid9constructEPKc+0x32>
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
        len--;
    }
}
   d4fea:	b003      	add	sp, #12
   d4fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4fee:	bf00      	nop
   d4ff0:	000d9228 	.word	0x000d9228

000d4ff4 <_ZN8particle7BleUuidC1EPKc>:
        : BleUuid(uuid128, order) {
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const char* uuid)
   d4ff4:	b538      	push	{r3, r4, r5, lr}
   d4ff6:	4604      	mov	r4, r0
   d4ff8:	460d      	mov	r5, r1
        : BleUuid() {
   d4ffa:	f7ff feed 	bl	d4dd8 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d4ffe:	4620      	mov	r0, r4
   d5000:	4629      	mov	r1, r5
   d5002:	f7ff ff8f 	bl	d4f24 <_ZN8particle7BleUuid9constructEPKc>
}
   d5006:	4620      	mov	r0, r4
   d5008:	bd38      	pop	{r3, r4, r5, pc}

000d500a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d500a:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d500c:	b18b      	cbz	r3, d5032 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d500e:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5010:	1ce5      	adds	r5, r4, #3
   d5012:	428d      	cmp	r5, r1
   d5014:	d80f      	bhi.n	d5036 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d5016:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d5018:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d501a:	5d87      	ldrb	r7, [r0, r6]
   d501c:	4297      	cmp	r7, r2
   d501e:	d105      	bne.n	d502c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d5020:	442e      	add	r6, r5
   d5022:	42b1      	cmp	r1, r6
   d5024:	d307      	bcc.n	d5036 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d5026:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d5028:	1c68      	adds	r0, r5, #1
                return adsLen;
   d502a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d502c:	3501      	adds	r5, #1
   d502e:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5030:	e7ee      	b.n	d5010 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d5032:	4618      	mov	r0, r3
   d5034:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5036:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d5038:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d503a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d503a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d503e:	4604      	mov	r4, r0
   d5040:	460e      	mov	r6, r1
   d5042:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d5044:	4617      	mov	r7, r2
   d5046:	2a00      	cmp	r2, #0
   d5048:	d03a      	beq.n	d50c0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d504a:	460a      	mov	r2, r1
   d504c:	ab01      	add	r3, sp, #4
   d504e:	6a01      	ldr	r1, [r0, #32]
   d5050:	f7ff ffdb 	bl	d500a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d5054:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d5058:	6a22      	ldr	r2, [r4, #32]
   d505a:	bb03      	cbnz	r3, d509e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d505c:	b1f8      	cbz	r0, d509e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d505e:	1c96      	adds	r6, r2, #2
   d5060:	442e      	add	r6, r5
   d5062:	1a36      	subs	r6, r6, r0
   d5064:	2e1f      	cmp	r6, #31
   d5066:	d82b      	bhi.n	d50c0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d5068:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d506c:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d5070:	ebc8 0202 	rsb	r2, r8, r2
   d5074:	1a12      	subs	r2, r2, r0
   d5076:	eb00 0108 	add.w	r1, r0, r8
   d507a:	eb05 0009 	add.w	r0, r5, r9
   d507e:	b292      	uxth	r2, r2
   d5080:	4421      	add	r1, r4
   d5082:	4420      	add	r0, r4
   d5084:	f003 fdec 	bl	d8c60 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d5088:	1c6b      	adds	r3, r5, #1
   d508a:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d508e:	462a      	mov	r2, r5
   d5090:	4639      	mov	r1, r7
   d5092:	eb04 0009 	add.w	r0, r4, r9
   d5096:	f003 fdd8 	bl	d8c4a <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d509a:	6226      	str	r6, [r4, #32]
   d509c:	e010      	b.n	d50c0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d509e:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d50a0:	182b      	adds	r3, r5, r0
   d50a2:	2b1f      	cmp	r3, #31
   d50a4:	d80c      	bhi.n	d50c0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d50a6:	1c6b      	adds	r3, r5, #1
   d50a8:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d50aa:	4422      	add	r2, r4
   d50ac:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d50ae:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d50b0:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d50b2:	4420      	add	r0, r4
   d50b4:	462a      	mov	r2, r5
   d50b6:	f003 fdc8 	bl	d8c4a <memcpy>
        selfLen_ += len;
   d50ba:	6a22      	ldr	r2, [r4, #32]
   d50bc:	442a      	add	r2, r5
   d50be:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d50c0:	6a20      	ldr	r0, [r4, #32]
}
   d50c2:	b003      	add	sp, #12
   d50c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d50c8 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d50c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d50ca:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d50cc:	4603      	mov	r3, r0
   d50ce:	f100 021f 	add.w	r2, r0, #31
   d50d2:	2000      	movs	r0, #0
   d50d4:	f803 0b01 	strb.w	r0, [r3], #1
   d50d8:	4293      	cmp	r3, r2
   d50da:	f04f 0100 	mov.w	r1, #0
   d50de:	d1f9      	bne.n	d50d4 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d50e0:	aa04      	add	r2, sp, #16
   d50e2:	2306      	movs	r3, #6
   d50e4:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d50e8:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d50ea:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d50ec:	9100      	str	r1, [sp, #0]
   d50ee:	4620      	mov	r0, r4
   d50f0:	4619      	mov	r1, r3
   d50f2:	f7ff ffa2 	bl	d503a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d50f6:	4620      	mov	r0, r4
   d50f8:	b004      	add	sp, #16
   d50fa:	bd10      	pop	{r4, pc}

000d50fc <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d50fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d50fe:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5100:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d5102:	ab01      	add	r3, sp, #4
   d5104:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5106:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d5108:	f7ff ff7f 	bl	d500a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d510c:	4605      	mov	r5, r0
   d510e:	b178      	cbz	r0, d5130 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d5110:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d5112:	6a22      	ldr	r2, [r4, #32]
   d5114:	1829      	adds	r1, r5, r0
   d5116:	1a12      	subs	r2, r2, r0
   d5118:	1b52      	subs	r2, r2, r5
   d511a:	4421      	add	r1, r4
   d511c:	4420      	add	r0, r4
   d511e:	f003 fd94 	bl	d8c4a <memcpy>
        selfLen_ -= len;
   d5122:	6a23      	ldr	r3, [r4, #32]
   d5124:	1b5d      	subs	r5, r3, r5
   d5126:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d5128:	4631      	mov	r1, r6
   d512a:	4620      	mov	r0, r4
   d512c:	f7ff ffe6 	bl	d50fc <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d5130:	b002      	add	sp, #8
   d5132:	bd70      	pop	{r4, r5, r6, pc}

000d5134 <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d5134:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d5136:	2500      	movs	r5, #0
   d5138:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d513c:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d513e:	8043      	strh	r3, [r0, #2]
   d5140:	220e      	movs	r2, #14
   d5142:	4629      	mov	r1, r5
   d5144:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d5146:	7105      	strb	r5, [r0, #4]
   d5148:	3006      	adds	r0, #6
   d514a:	f003 fda4 	bl	d8c96 <memset>
   d514e:	f104 0014 	add.w	r0, r4, #20
   d5152:	f7ff fe41 	bl	d4dd8 <_ZN8particle7BleUuidC1Ev>
   d5156:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d515a:	f7ff fe3d 	bl	d4dd8 <_ZN8particle7BleUuidC1Ev>
   d515e:	4904      	ldr	r1, [pc, #16]	; (d5170 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d5160:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d5164:	f002 fdd1 	bl	d7d0a <_ZN6StringC1EPK19__FlashStringHelper>
   d5168:	64e5      	str	r5, [r4, #76]	; 0x4c
   d516a:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d516c:	4620      	mov	r0, r4
   d516e:	bd38      	pop	{r3, r4, r5, pc}
   d5170:	000d937c 	.word	0x000d937c

000d5174 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d5174:	b510      	push	{r4, lr}
   d5176:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5178:	69c2      	ldr	r2, [r0, #28]
   d517a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d517e:	4293      	cmp	r3, r2
   d5180:	4618      	mov	r0, r3
   d5182:	d006      	beq.n	d5192 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d5184:	6804      	ldr	r4, [r0, #0]
   d5186:	8824      	ldrh	r4, [r4, #0]
   d5188:	428c      	cmp	r4, r1
   d518a:	f103 0308 	add.w	r3, r3, #8
   d518e:	d1f6      	bne.n	d517e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d5190:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d5192:	2000      	movs	r0, #0
    }
   d5194:	bd10      	pop	{r4, pc}

000d5196 <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d5196:	b510      	push	{r4, lr}
    return impl()->address();
   d5198:	680a      	ldr	r2, [r1, #0]
   d519a:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d519e:	6003      	str	r3, [r0, #0]
   d51a0:	6853      	ldr	r3, [r2, #4]
   d51a2:	6043      	str	r3, [r0, #4]
}
   d51a4:	bd10      	pop	{r4, pc}

000d51a6 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d51a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d51a8:	6802      	ldr	r2, [r0, #0]
   d51aa:	680b      	ldr	r3, [r1, #0]
   d51ac:	8812      	ldrh	r2, [r2, #0]
   d51ae:	881b      	ldrh	r3, [r3, #0]
   d51b0:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d51b2:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d51b4:	d10c      	bne.n	d51d0 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d51b6:	4601      	mov	r1, r0
   d51b8:	4668      	mov	r0, sp
   d51ba:	f7ff ffec 	bl	d5196 <_ZNK8particle13BlePeerDevice7addressEv>
   d51be:	4621      	mov	r1, r4
   d51c0:	a802      	add	r0, sp, #8
   d51c2:	f7ff ffe8 	bl	d5196 <_ZNK8particle13BlePeerDevice7addressEv>
   d51c6:	a902      	add	r1, sp, #8
   d51c8:	4668      	mov	r0, sp
   d51ca:	f7ff fdf7 	bl	d4dbc <_ZNK8particle10BleAddresseqERKS0_>
   d51ce:	b900      	cbnz	r0, d51d2 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d51d0:	2000      	movs	r0, #0
}
   d51d2:	b004      	add	sp, #16
   d51d4:	bd10      	pop	{r4, pc}
	...

000d51d8 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d51d8:	b510      	push	{r4, lr}
   d51da:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d51dc:	2034      	movs	r0, #52	; 0x34
   d51de:	f7fe ff5a 	bl	d4096 <_Znwj>
   d51e2:	4601      	mov	r1, r0
   d51e4:	b168      	cbz	r0, d5202 <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d51e6:	2300      	movs	r3, #0
   d51e8:	6003      	str	r3, [r0, #0]
   d51ea:	6043      	str	r3, [r0, #4]
   d51ec:	6083      	str	r3, [r0, #8]
   d51ee:	60c3      	str	r3, [r0, #12]
   d51f0:	6103      	str	r3, [r0, #16]
   d51f2:	6143      	str	r3, [r0, #20]
   d51f4:	6183      	str	r3, [r0, #24]
   d51f6:	61c3      	str	r3, [r0, #28]
   d51f8:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d51fa:	6243      	str	r3, [r0, #36]	; 0x24
   d51fc:	6283      	str	r3, [r0, #40]	; 0x28
   d51fe:	62c3      	str	r3, [r0, #44]	; 0x2c
   d5200:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5202:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d5204:	b919      	cbnz	r1, d520e <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d5206:	4a0a      	ldr	r2, [pc, #40]	; (d5230 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5208:	200a      	movs	r0, #10
   d520a:	f7ff fc7f 	bl	d4b0c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d520e:	2000      	movs	r0, #0
   d5210:	f7ff fa84 	bl	d471c <hal_ble_stack_init>
   d5214:	b120      	cbz	r0, d5220 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d5216:	4a06      	ldr	r2, [pc, #24]	; (d5230 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5218:	2100      	movs	r1, #0
   d521a:	200a      	movs	r0, #10
   d521c:	f7ff fc76 	bl	d4b0c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d5220:	2200      	movs	r2, #0
   d5222:	6821      	ldr	r1, [r4, #0]
   d5224:	4803      	ldr	r0, [pc, #12]	; (d5234 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d5226:	f7ff fab7 	bl	d4798 <hal_ble_set_callback_on_periph_link_events>
}
   d522a:	4620      	mov	r0, r4
   d522c:	bd10      	pop	{r4, pc}
   d522e:	bf00      	nop
   d5230:	000d485d 	.word	0x000d485d
   d5234:	000d562d 	.word	0x000d562d

000d5238 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d5238:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d523a:	4c0a      	ldr	r4, [pc, #40]	; (d5264 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d523c:	6823      	ldr	r3, [r4, #0]
   d523e:	07db      	lsls	r3, r3, #31
   d5240:	d40e      	bmi.n	d5260 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d5242:	4620      	mov	r0, r4
   d5244:	f7fe ff3a 	bl	d40bc <__cxa_guard_acquire>
   d5248:	b150      	cbz	r0, d5260 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d524a:	4807      	ldr	r0, [pc, #28]	; (d5268 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d524c:	f7ff ffc4 	bl	d51d8 <_ZN8particle14BleLocalDeviceC1Ev>
   d5250:	4620      	mov	r0, r4
   d5252:	f7fe ff38 	bl	d40c6 <__cxa_guard_release>
   d5256:	4a05      	ldr	r2, [pc, #20]	; (d526c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5258:	4905      	ldr	r1, [pc, #20]	; (d5270 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d525a:	4803      	ldr	r0, [pc, #12]	; (d5268 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d525c:	f003 fb68 	bl	d8930 <__aeabi_atexit>
    return instance;
}
   d5260:	4801      	ldr	r0, [pc, #4]	; (d5268 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5262:	bd10      	pop	{r4, pc}
   d5264:	2003e3b8 	.word	0x2003e3b8
   d5268:	2003e3b4 	.word	0x2003e3b4
   d526c:	2003e360 	.word	0x2003e360
   d5270:	000d5417 	.word	0x000d5417

000d5274 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5274:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d5276:	6803      	ldr	r3, [r0, #0]
   d5278:	3b09      	subs	r3, #9
   d527a:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d527c:	b08a      	sub	sp, #40	; 0x28
   d527e:	4604      	mov	r4, r0
   d5280:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d5282:	d819      	bhi.n	d52b8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d5284:	f7ff ffd8 	bl	d5238 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5288:	88a1      	ldrh	r1, [r4, #4]
   d528a:	6800      	ldr	r0, [r0, #0]
   d528c:	f7ff ff72 	bl	d5174 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d5290:	4602      	mov	r2, r0
   d5292:	b958      	cbnz	r0, d52ac <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d5294:	2320      	movs	r3, #32
   d5296:	9302      	str	r3, [sp, #8]
   d5298:	4b08      	ldr	r3, [pc, #32]	; (d52bc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d529a:	9003      	str	r0, [sp, #12]
   d529c:	9300      	str	r3, [sp, #0]
   d529e:	aa02      	add	r2, sp, #8
   d52a0:	4603      	mov	r3, r0
   d52a2:	4907      	ldr	r1, [pc, #28]	; (d52c0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d52a4:	2032      	movs	r0, #50	; 0x32
   d52a6:	f7ff fc39 	bl	d4b1c <log_message>
   d52aa:	e005      	b.n	d52b8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d52ac:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d52ae:	b11d      	cbz	r5, d52b8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d52b0:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d52b2:	68e1      	ldr	r1, [r4, #12]
   d52b4:	6920      	ldr	r0, [r4, #16]
   d52b6:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d52b8:	b00a      	add	sp, #40	; 0x28
   d52ba:	bd70      	pop	{r4, r5, r6, pc}
   d52bc:	000d90d2 	.word	0x000d90d2
   d52c0:	000d9088 	.word	0x000d9088

000d52c4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d52c4:	4608      	mov	r0, r1
   d52c6:	b909      	cbnz	r1, d52cc <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d52c8:	460a      	mov	r2, r1
   d52ca:	e001      	b.n	d52d0 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d52cc:	6a09      	ldr	r1, [r1, #32]
   d52ce:	2200      	movs	r2, #0
   d52d0:	f7ff ba2c 	b.w	d472c <hal_ble_gap_set_advertising_data>

000d52d4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d52d4:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d52d6:	460c      	mov	r4, r1
   d52d8:	b911      	cbnz	r1, d52e0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d52da:	460a      	mov	r2, r1
   d52dc:	4608      	mov	r0, r1
   d52de:	e006      	b.n	d52ee <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d52e0:	2101      	movs	r1, #1
   d52e2:	4620      	mov	r0, r4
   d52e4:	f7ff ff0a 	bl	d50fc <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d52e8:	6a21      	ldr	r1, [r4, #32]
   d52ea:	2200      	movs	r2, #0
   d52ec:	4620      	mov	r0, r4
    }
}
   d52ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d52f2:	f7ff ba23 	b.w	d473c <hal_ble_gap_set_scan_response_data>

000d52f6 <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d52f6:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d52f8:	a801      	add	r0, sp, #4
   d52fa:	f7ff fd45 	bl	d4d88 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d52fe:	2000      	movs	r0, #0
   d5300:	f7ff fa24 	bl	d474c <hal_ble_gap_start_advertising>
   d5304:	4604      	mov	r4, r0
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d5306:	a801      	add	r0, sp, #4
   d5308:	f7ff fd4c 	bl	d4da4 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d530c:	4620      	mov	r0, r4
   d530e:	b002      	add	sp, #8
   d5310:	bd10      	pop	{r4, pc}

000d5312 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d5312:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5314:	4605      	mov	r5, r0
   d5316:	460c      	mov	r4, r1
    WiringBleLock lk;
   d5318:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d531a:	4616      	mov	r6, r2
    WiringBleLock lk;
   d531c:	f7ff fd34 	bl	d4d88 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d5320:	4621      	mov	r1, r4
   d5322:	4628      	mov	r0, r5
   d5324:	f7ff ffce 	bl	d52c4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d5328:	2800      	cmp	r0, #0
   d532a:	db08      	blt.n	d533e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d532c:	4631      	mov	r1, r6
   d532e:	4628      	mov	r0, r5
   d5330:	f7ff ffd0 	bl	d52d4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d5334:	2800      	cmp	r0, #0
   d5336:	db02      	blt.n	d533e <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d5338:	4628      	mov	r0, r5
   d533a:	f7ff ffdc 	bl	d52f6 <_ZNK8particle14BleLocalDevice9advertiseEv>
   d533e:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d5340:	a801      	add	r0, sp, #4
   d5342:	f7ff fd2f 	bl	d4da4 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d5346:	4620      	mov	r0, r4
   d5348:	b002      	add	sp, #8
   d534a:	bd70      	pop	{r4, r5, r6, pc}

000d534c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d534c:	680b      	ldr	r3, [r1, #0]
   d534e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5350:	b113      	cbz	r3, d5358 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5352:	685a      	ldr	r2, [r3, #4]
   d5354:	3201      	adds	r2, #1
   d5356:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5358:	4770      	bx	lr

000d535a <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d535a:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d535c:	f851 3b04 	ldr.w	r3, [r1], #4
   d5360:	4604      	mov	r4, r0
   d5362:	f840 3b04 	str.w	r3, [r0], #4
   d5366:	f7ff fff1 	bl	d534c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d536a:	6823      	ldr	r3, [r4, #0]
   d536c:	b90b      	cbnz	r3, d5372 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d536e:	f7ff fcdb 	bl	d4d28 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d5372:	4620      	mov	r0, r4
   d5374:	bd10      	pop	{r4, pc}

000d5376 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d5376:	b510      	push	{r4, lr}
   d5378:	f851 3b04 	ldr.w	r3, [r1], #4
   d537c:	4604      	mov	r4, r0
   d537e:	f840 3b04 	str.w	r3, [r0], #4
   d5382:	f7ff ffe3 	bl	d534c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d5386:	4620      	mov	r0, r4
   d5388:	bd10      	pop	{r4, pc}

000d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d538a:	b510      	push	{r4, lr}
   d538c:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d538e:	6800      	ldr	r0, [r0, #0]
   d5390:	b128      	cbz	r0, d539e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5392:	6843      	ldr	r3, [r0, #4]
   d5394:	3b01      	subs	r3, #1
   d5396:	6043      	str	r3, [r0, #4]
   d5398:	b90b      	cbnz	r3, d539e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d539a:	f7ff fccf 	bl	d4d3c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d539e:	4620      	mov	r0, r4
   d53a0:	bd10      	pop	{r4, pc}

000d53a2 <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d53a2:	b510      	push	{r4, lr}
   d53a4:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d53a6:	3004      	adds	r0, #4
   d53a8:	f7ff ffef 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d53ac:	4620      	mov	r0, r4
   d53ae:	bd10      	pop	{r4, pc}

000d53b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d53b0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d53b2:	6804      	ldr	r4, [r0, #0]
   d53b4:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d53b6:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d53b8:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d53bc:	42a6      	cmp	r6, r4
   d53be:	d004      	beq.n	d53ca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d53c0:	1d20      	adds	r0, r4, #4
   d53c2:	f7ff ffe2 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d53c6:	3408      	adds	r4, #8
   d53c8:	e7f8      	b.n	d53bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d53ca:	6828      	ldr	r0, [r5, #0]
   d53cc:	f7ff fc5c 	bl	d4c88 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d53d0:	4628      	mov	r0, r5
   d53d2:	bd70      	pop	{r4, r5, r6, pc}

000d53d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d53d4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d53d6:	6804      	ldr	r4, [r0, #0]
   d53d8:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d53da:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d53dc:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d53e0:	42a6      	cmp	r6, r4
   d53e2:	d004      	beq.n	d53ee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d53e4:	1d20      	adds	r0, r4, #4
   d53e6:	f7ff ffd0 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d53ea:	3408      	adds	r4, #8
   d53ec:	e7f8      	b.n	d53e0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d53ee:	6828      	ldr	r0, [r5, #0]
   d53f0:	f7ff fc4a 	bl	d4c88 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d53f4:	4628      	mov	r0, r5
   d53f6:	bd70      	pop	{r4, r5, r6, pc}

000d53f8 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d53f8:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d53fa:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d53fc:	f104 0018 	add.w	r0, r4, #24
   d5400:	f7ff ffe8 	bl	d53d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5404:	f104 000c 	add.w	r0, r4, #12
   d5408:	f7ff ffd2 	bl	d53b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d540c:	4620      	mov	r0, r4
   d540e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5412:	f7fe be44 	b.w	d409e <_ZdlPv>

000d5416 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d5416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5418:	6804      	ldr	r4, [r0, #0]
   d541a:	4607      	mov	r7, r0
   d541c:	b1c4      	cbz	r4, d5450 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d541e:	69a5      	ldr	r5, [r4, #24]
   d5420:	69e3      	ldr	r3, [r4, #28]
   d5422:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5426:	42ae      	cmp	r6, r5
   d5428:	d004      	beq.n	d5434 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d542a:	1d28      	adds	r0, r5, #4
   d542c:	f7ff ffad 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5430:	3508      	adds	r5, #8
   d5432:	e7f8      	b.n	d5426 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5434:	69a0      	ldr	r0, [r4, #24]
   d5436:	f7ff fc27 	bl	d4c88 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d543a:	f104 000c 	add.w	r0, r4, #12
   d543e:	f7ff ffc9 	bl	d53d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5442:	4620      	mov	r0, r4
   d5444:	f7ff ffb4 	bl	d53b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5448:	2134      	movs	r1, #52	; 0x34
   d544a:	4620      	mov	r0, r4
   d544c:	f003 fa75 	bl	d893a <_ZdlPvj>
   d5450:	4638      	mov	r0, r7
   d5452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5454 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5454:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5456:	2500      	movs	r5, #0
   d5458:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d545a:	6045      	str	r5, [r0, #4]
   d545c:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d545e:	2024      	movs	r0, #36	; 0x24
   d5460:	f7fe fe19 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5464:	4604      	mov	r4, r0
   d5466:	b178      	cbz	r0, d5488 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5468:	4603      	mov	r3, r0
   d546a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d546e:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d5472:	f8c0 5002 	str.w	r5, [r0, #2]
   d5476:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5478:	7285      	strb	r5, [r0, #10]
   d547a:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d547c:	60c5      	str	r5, [r0, #12]
   d547e:	6105      	str	r5, [r0, #16]
   d5480:	6145      	str	r5, [r0, #20]
   d5482:	6185      	str	r5, [r0, #24]
   d5484:	61c5      	str	r5, [r0, #28]
   d5486:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5488:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d548a:	2014      	movs	r0, #20
   d548c:	9301      	str	r3, [sp, #4]
   d548e:	f7fe fe02 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5492:	4603      	mov	r3, r0
   d5494:	b128      	cbz	r0, d54a2 <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5496:	2201      	movs	r2, #1
   d5498:	6042      	str	r2, [r0, #4]
   d549a:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d549c:	4a08      	ldr	r2, [pc, #32]	; (d54c0 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d549e:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d54a0:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d54a2:	a802      	add	r0, sp, #8
   d54a4:	6872      	ldr	r2, [r6, #4]
   d54a6:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d54aa:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d54ac:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d54ae:	f7ff ff6c 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d54b2:	6833      	ldr	r3, [r6, #0]
   d54b4:	b90b      	cbnz	r3, d54ba <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d54b6:	f7ff fc37 	bl	d4d28 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d54ba:	4630      	mov	r0, r6
   d54bc:	b002      	add	sp, #8
   d54be:	bd70      	pop	{r4, r5, r6, pc}
   d54c0:	000d9064 	.word	0x000d9064

000d54c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d54c4:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d54c6:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d54c8:	6803      	ldr	r3, [r0, #0]
   d54ca:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d54cc:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d54ce:	d00c      	beq.n	d54ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d54d0:	b114      	cbz	r4, d54d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d54d2:	6863      	ldr	r3, [r4, #4]
   d54d4:	3301      	adds	r3, #1
   d54d6:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d54d8:	6828      	ldr	r0, [r5, #0]
   d54da:	b128      	cbz	r0, d54e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d54dc:	6843      	ldr	r3, [r0, #4]
   d54de:	3b01      	subs	r3, #1
   d54e0:	6043      	str	r3, [r0, #4]
   d54e2:	b90b      	cbnz	r3, d54e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d54e4:	f7ff fc2a 	bl	d4d3c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d54e8:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d54ea:	4628      	mov	r0, r5
   d54ec:	bd38      	pop	{r3, r4, r5, pc}

000d54ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d54ee:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d54f0:	b570      	push	{r4, r5, r6, lr}
   d54f2:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d54f4:	d91a      	bls.n	d552c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d54f6:	4290      	cmp	r0, r2
   d54f8:	d219      	bcs.n	d552e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d54fa:	f1a1 0608 	sub.w	r6, r1, #8
   d54fe:	1a51      	subs	r1, r2, r1
   d5500:	3904      	subs	r1, #4
   d5502:	1f15      	subs	r5, r2, #4
   d5504:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d5506:	1f2b      	subs	r3, r5, #4
   d5508:	429e      	cmp	r6, r3
   d550a:	d025      	beq.n	d5558 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d550c:	2c04      	cmp	r4, #4
   d550e:	d007      	beq.n	d5520 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5510:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d5514:	f844 3c04 	str.w	r3, [r4, #-4]
   d5518:	4629      	mov	r1, r5
   d551a:	4620      	mov	r0, r4
   d551c:	f7ff ff16 	bl	d534c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5520:	4628      	mov	r0, r5
   d5522:	f7ff ff32 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5526:	3d08      	subs	r5, #8
   d5528:	3c08      	subs	r4, #8
   d552a:	e7ec      	b.n	d5506 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d552c:	d014      	beq.n	d5558 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d552e:	1d0c      	adds	r4, r1, #4
   d5530:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d5532:	1f23      	subs	r3, r4, #4
   d5534:	429d      	cmp	r5, r3
   d5536:	d00f      	beq.n	d5558 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d5538:	2e04      	cmp	r6, #4
   d553a:	d007      	beq.n	d554c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d553c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d5540:	f846 3c04 	str.w	r3, [r6, #-4]
   d5544:	4621      	mov	r1, r4
   d5546:	4630      	mov	r0, r6
   d5548:	f7ff ff00 	bl	d534c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d554c:	4620      	mov	r0, r4
   d554e:	f7ff ff1c 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5552:	3408      	adds	r4, #8
   d5554:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5556:	e7ec      	b.n	d5532 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d5558:	bd70      	pop	{r4, r5, r6, pc}

000d555a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d555a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d555e:	6804      	ldr	r4, [r0, #0]
   d5560:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5562:	4605      	mov	r5, r0
   d5564:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d5566:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d556a:	42a7      	cmp	r7, r4
   d556c:	d018      	beq.n	d55a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d556e:	4641      	mov	r1, r8
   d5570:	4620      	mov	r0, r4
   d5572:	f7ff fe18 	bl	d51a6 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d5576:	4606      	mov	r6, r0
   d5578:	b908      	cbnz	r0, d557e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d557a:	3408      	adds	r4, #8
   d557c:	e7f5      	b.n	d556a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d557e:	b18c      	cbz	r4, d55a4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d5580:	1d20      	adds	r0, r4, #4
   d5582:	f7ff ff02 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d5586:	682b      	ldr	r3, [r5, #0]
   d5588:	686a      	ldr	r2, [r5, #4]
   d558a:	f104 0108 	add.w	r1, r4, #8
   d558e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5592:	4620      	mov	r0, r4
   d5594:	f7ff ffab 	bl	d54ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d5598:	686b      	ldr	r3, [r5, #4]
   d559a:	3b01      	subs	r3, #1
   d559c:	606b      	str	r3, [r5, #4]
    return true;
   d559e:	e002      	b.n	d55a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d55a0:	2600      	movs	r6, #0
   d55a2:	e000      	b.n	d55a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d55a4:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d55a6:	4630      	mov	r0, r6
   d55a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d55ac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d55ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d55ae:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d55b0:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d55b4:	6847      	ldr	r7, [r0, #4]
   d55b6:	9300      	str	r3, [sp, #0]
   d55b8:	a801      	add	r0, sp, #4
   d55ba:	f7ff fec7 	bl	d534c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d55be:	6866      	ldr	r6, [r4, #4]
   d55c0:	68a3      	ldr	r3, [r4, #8]
   d55c2:	429e      	cmp	r6, r3
   d55c4:	db14      	blt.n	d55f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d55c6:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d55c8:	2e00      	cmp	r6, #0
   d55ca:	dd0b      	ble.n	d55e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d55cc:	00f0      	lsls	r0, r6, #3
   d55ce:	f7ff fb53 	bl	d4c78 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d55d2:	4605      	mov	r5, r0
   d55d4:	b318      	cbz	r0, d561e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d55d6:	e894 0006 	ldmia.w	r4, {r1, r2}
   d55da:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d55de:	f7ff ff86 	bl	d54ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d55e2:	e000      	b.n	d55e6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d55e4:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d55e6:	6820      	ldr	r0, [r4, #0]
   d55e8:	f7ff fb4e 	bl	d4c88 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d55ec:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d55ee:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d55f0:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d55f2:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d55f4:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d55f8:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d55fc:	4629      	mov	r1, r5
   d55fe:	f105 0008 	add.w	r0, r5, #8
   d5602:	f7ff ff74 	bl	d54ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5606:	b135      	cbz	r5, d5616 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d5608:	9b00      	ldr	r3, [sp, #0]
   d560a:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d560e:	a901      	add	r1, sp, #4
   d5610:	1d28      	adds	r0, r5, #4
   d5612:	f7ff fe9b 	bl	d534c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d5616:	6863      	ldr	r3, [r4, #4]
   d5618:	3301      	adds	r3, #1
   d561a:	6063      	str	r3, [r4, #4]
   d561c:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d561e:	a801      	add	r0, sp, #4
   d5620:	f7ff feb3 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5624:	4628      	mov	r0, r5
   d5626:	b003      	add	sp, #12
   d5628:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d562c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d562c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5630:	4604      	mov	r4, r0
   d5632:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5634:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5636:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5638:	f7ff fba6 	bl	d4d88 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d563c:	6823      	ldr	r3, [r4, #0]
   d563e:	2b03      	cmp	r3, #3
   d5640:	d002      	beq.n	d5648 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d5642:	2b04      	cmp	r3, #4
   d5644:	d042      	beq.n	d56cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d5646:	e087      	b.n	d5758 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d5648:	a804      	add	r0, sp, #16
   d564a:	f7ff ff03 	bl	d5454 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d564e:	9b04      	ldr	r3, [sp, #16]
   d5650:	8922      	ldrh	r2, [r4, #8]
   d5652:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d5654:	6862      	ldr	r2, [r4, #4]
   d5656:	9904      	ldr	r1, [sp, #16]
   d5658:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d565c:	f8c1 3002 	str.w	r3, [r1, #2]
   d5660:	6853      	ldr	r3, [r2, #4]
   d5662:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5666:	a807      	add	r0, sp, #28
   d5668:	9b04      	ldr	r3, [sp, #16]
   d566a:	9306      	str	r3, [sp, #24]
   d566c:	a905      	add	r1, sp, #20
   d566e:	f7ff fe6d 	bl	d534c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5672:	a906      	add	r1, sp, #24
   d5674:	f105 0018 	add.w	r0, r5, #24
   d5678:	f7ff ff98 	bl	d55ac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d567c:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d567e:	a807      	add	r0, sp, #28
   d5680:	f7ff fe83 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5684:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d5686:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5688:	b974      	cbnz	r4, d56a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d568a:	4b36      	ldr	r3, [pc, #216]	; (d5764 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d568c:	9300      	str	r3, [sp, #0]
   d568e:	aa06      	add	r2, sp, #24
   d5690:	4623      	mov	r3, r4
   d5692:	4935      	ldr	r1, [pc, #212]	; (d5768 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5694:	9407      	str	r4, [sp, #28]
   d5696:	2032      	movs	r0, #50	; 0x32
   d5698:	f7ff fa40 	bl	d4b1c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d569c:	9b04      	ldr	r3, [sp, #16]
   d569e:	4621      	mov	r1, r4
   d56a0:	8818      	ldrh	r0, [r3, #0]
   d56a2:	f7ff f85b 	bl	d475c <hal_ble_gap_disconnect>
   d56a6:	e00d      	b.n	d56c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d56a8:	4a30      	ldr	r2, [pc, #192]	; (d576c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d56aa:	9200      	str	r2, [sp, #0]
   d56ac:	2300      	movs	r3, #0
   d56ae:	aa06      	add	r2, sp, #24
   d56b0:	492d      	ldr	r1, [pc, #180]	; (d5768 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d56b2:	9307      	str	r3, [sp, #28]
   d56b4:	2001      	movs	r0, #1
   d56b6:	f7ff fa31 	bl	d4b1c <log_message>
                if (impl->connectedCb_) {
   d56ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d56bc:	b113      	cbz	r3, d56c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d56be:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d56c0:	a804      	add	r0, sp, #16
   d56c2:	4798      	blx	r3
   d56c4:	a805      	add	r0, sp, #20
   d56c6:	f7ff fe60 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d56ca:	e045      	b.n	d5758 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d56cc:	8921      	ldrh	r1, [r4, #8]
   d56ce:	4628      	mov	r0, r5
   d56d0:	f7ff fd50 	bl	d5174 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d56d4:	4607      	mov	r7, r0
   d56d6:	2800      	cmp	r0, #0
   d56d8:	d03e      	beq.n	d5758 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d56da:	6804      	ldr	r4, [r0, #0]
   d56dc:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d56de:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d56e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d56e4:	8022      	strh	r2, [r4, #0]
   d56e6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d56ea:	4299      	cmp	r1, r3
   d56ec:	d003      	beq.n	d56f6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d56ee:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d56f2:	8042      	strh	r2, [r0, #2]
   d56f4:	e7f9      	b.n	d56ea <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d56f6:	68e6      	ldr	r6, [r4, #12]
   d56f8:	6923      	ldr	r3, [r4, #16]
   d56fa:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d56fe:	45b0      	cmp	r8, r6
   d5700:	d004      	beq.n	d570c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d5702:	1d30      	adds	r0, r6, #4
   d5704:	f7ff fe41 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5708:	3608      	adds	r6, #8
   d570a:	e7f8      	b.n	d56fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d570c:	2300      	movs	r3, #0
   d570e:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5710:	69a6      	ldr	r6, [r4, #24]
   d5712:	69e3      	ldr	r3, [r4, #28]
   d5714:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5718:	45b0      	cmp	r8, r6
   d571a:	d004      	beq.n	d5726 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d571c:	1d30      	adds	r0, r6, #4
   d571e:	f7ff fe34 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5722:	3608      	adds	r6, #8
   d5724:	e7f8      	b.n	d5718 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5726:	2300      	movs	r3, #0
   d5728:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d572a:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d572c:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d572e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d5730:	b113      	cbz	r3, d5738 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d5732:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d5734:	4638      	mov	r0, r7
   d5736:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d5738:	2320      	movs	r3, #32
   d573a:	4a0d      	ldr	r2, [pc, #52]	; (d5770 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d573c:	9306      	str	r3, [sp, #24]
   d573e:	9200      	str	r2, [sp, #0]
   d5740:	2300      	movs	r3, #0
   d5742:	4909      	ldr	r1, [pc, #36]	; (d5768 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5744:	9307      	str	r3, [sp, #28]
   d5746:	2001      	movs	r0, #1
   d5748:	aa06      	add	r2, sp, #24
   d574a:	f7ff f9e7 	bl	d4b1c <log_message>
                    impl->peers_.removeOne(*peer);
   d574e:	4639      	mov	r1, r7
   d5750:	f105 0018 	add.w	r0, r5, #24
   d5754:	f7ff ff01 	bl	d555a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5758:	a803      	add	r0, sp, #12
   d575a:	f7ff fb23 	bl	d4da4 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d575e:	b00e      	add	sp, #56	; 0x38
   d5760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5764:	000d90ea 	.word	0x000d90ea
   d5768:	000d9088 	.word	0x000d9088
   d576c:	000d9110 	.word	0x000d9110
   d5770:	000d912d 	.word	0x000d912d

000d5774 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5774:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5778:	4606      	mov	r6, r0
   d577a:	460c      	mov	r4, r1
   d577c:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d577e:	d914      	bls.n	d57aa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5780:	4290      	cmp	r0, r2
   d5782:	d213      	bcs.n	d57ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d5784:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d5788:	1a6c      	subs	r4, r5, r1
   d578a:	f1a1 0708 	sub.w	r7, r1, #8
   d578e:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d5790:	42af      	cmp	r7, r5
   d5792:	d018      	beq.n	d57c6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d5794:	b11c      	cbz	r4, d579e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d5796:	4629      	mov	r1, r5
   d5798:	4620      	mov	r0, r4
   d579a:	f7ff fdec 	bl	d5376 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d579e:	1d28      	adds	r0, r5, #4
   d57a0:	f7ff fdf3 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d57a4:	3d08      	subs	r5, #8
   d57a6:	3c08      	subs	r4, #8
   d57a8:	e7f2      	b.n	d5790 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d57aa:	d00c      	beq.n	d57c6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d57ac:	42ac      	cmp	r4, r5
   d57ae:	d00a      	beq.n	d57c6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d57b0:	b11e      	cbz	r6, d57ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d57b2:	4621      	mov	r1, r4
   d57b4:	4630      	mov	r0, r6
   d57b6:	f7ff fdde 	bl	d5376 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d57ba:	1d20      	adds	r0, r4, #4
   d57bc:	f7ff fde5 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d57c0:	3408      	adds	r4, #8
   d57c2:	3608      	adds	r6, #8
   d57c4:	e7f2      	b.n	d57ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d57c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d57c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d57c8:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d57ca:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d57cc:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d57ce:	dd0b      	ble.n	d57e8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d57d0:	00f0      	lsls	r0, r6, #3
   d57d2:	f7ff fa51 	bl	d4c78 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d57d6:	4604      	mov	r4, r0
   d57d8:	b170      	cbz	r0, d57f8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d57da:	e895 0006 	ldmia.w	r5, {r1, r2}
   d57de:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d57e2:	f7ff ffc7 	bl	d5774 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d57e6:	e000      	b.n	d57ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d57e8:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d57ea:	6828      	ldr	r0, [r5, #0]
   d57ec:	f7ff fa4c 	bl	d4c88 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d57f0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d57f2:	60ae      	str	r6, [r5, #8]
        return true;
   d57f4:	2001      	movs	r0, #1
   d57f6:	bd70      	pop	{r4, r5, r6, pc}
    }
   d57f8:	bd70      	pop	{r4, r5, r6, pc}

000d57fa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d57fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d57fc:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d57fe:	6845      	ldr	r5, [r0, #4]
   d5800:	4668      	mov	r0, sp
   d5802:	f7ff fdb8 	bl	d5376 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5806:	6861      	ldr	r1, [r4, #4]
   d5808:	68a3      	ldr	r3, [r4, #8]
   d580a:	4299      	cmp	r1, r3
   d580c:	db05      	blt.n	d581a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d580e:	3101      	adds	r1, #1
   d5810:	4620      	mov	r0, r4
   d5812:	f7ff ffd9 	bl	d57c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d5816:	4606      	mov	r6, r0
   d5818:	b198      	cbz	r0, d5842 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d581a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d581c:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d581e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d5822:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5826:	4629      	mov	r1, r5
   d5828:	f105 0008 	add.w	r0, r5, #8
   d582c:	f7ff ffa2 	bl	d5774 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5830:	b11d      	cbz	r5, d583a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d5832:	4669      	mov	r1, sp
   d5834:	4628      	mov	r0, r5
   d5836:	f7ff fd9e 	bl	d5376 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d583a:	6863      	ldr	r3, [r4, #4]
   d583c:	3301      	adds	r3, #1
   d583e:	6063      	str	r3, [r4, #4]
   d5840:	2601      	movs	r6, #1
   d5842:	a801      	add	r0, sp, #4
   d5844:	f7ff fda1 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5848:	4630      	mov	r0, r6
   d584a:	b002      	add	sp, #8
   d584c:	bd70      	pop	{r4, r5, r6, pc}

000d584e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d584e:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5852:	4606      	mov	r6, r0
   d5854:	460c      	mov	r4, r1
   d5856:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5858:	d914      	bls.n	d5884 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d585a:	4290      	cmp	r0, r2
   d585c:	d213      	bcs.n	d5886 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d585e:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d5862:	1a6c      	subs	r4, r5, r1
   d5864:	f1a1 0708 	sub.w	r7, r1, #8
   d5868:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d586a:	42af      	cmp	r7, r5
   d586c:	d018      	beq.n	d58a0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d586e:	b11c      	cbz	r4, d5878 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d5870:	4629      	mov	r1, r5
   d5872:	4620      	mov	r0, r4
   d5874:	f7ff fd71 	bl	d535a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5878:	1d28      	adds	r0, r5, #4
   d587a:	f7ff fd86 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d587e:	3d08      	subs	r5, #8
   d5880:	3c08      	subs	r4, #8
   d5882:	e7f2      	b.n	d586a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d5884:	d00c      	beq.n	d58a0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d5886:	42ac      	cmp	r4, r5
   d5888:	d00a      	beq.n	d58a0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d588a:	b11e      	cbz	r6, d5894 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d588c:	4621      	mov	r1, r4
   d588e:	4630      	mov	r0, r6
   d5890:	f7ff fd63 	bl	d535a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5894:	1d20      	adds	r0, r4, #4
   d5896:	f7ff fd78 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d589a:	3408      	adds	r4, #8
   d589c:	3608      	adds	r6, #8
   d589e:	e7f2      	b.n	d5886 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d58a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d58a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d58a2:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d58a4:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d58a6:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d58a8:	dd0b      	ble.n	d58c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d58aa:	00f0      	lsls	r0, r6, #3
   d58ac:	f7ff f9e4 	bl	d4c78 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d58b0:	4604      	mov	r4, r0
   d58b2:	b170      	cbz	r0, d58d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d58b4:	e895 0006 	ldmia.w	r5, {r1, r2}
   d58b8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d58bc:	f7ff ffc7 	bl	d584e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d58c0:	e000      	b.n	d58c4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d58c2:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d58c4:	6828      	ldr	r0, [r5, #0]
   d58c6:	f7ff f9df 	bl	d4c88 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d58ca:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d58cc:	60ae      	str	r6, [r5, #8]
        return true;
   d58ce:	2001      	movs	r0, #1
   d58d0:	bd70      	pop	{r4, r5, r6, pc}
    }
   d58d2:	bd70      	pop	{r4, r5, r6, pc}

000d58d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d58d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d58d6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d58d8:	6845      	ldr	r5, [r0, #4]
   d58da:	4668      	mov	r0, sp
   d58dc:	f7ff fd3d 	bl	d535a <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d58e0:	6861      	ldr	r1, [r4, #4]
   d58e2:	68a3      	ldr	r3, [r4, #8]
   d58e4:	4299      	cmp	r1, r3
   d58e6:	db05      	blt.n	d58f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d58e8:	3101      	adds	r1, #1
   d58ea:	4620      	mov	r0, r4
   d58ec:	f7ff ffd9 	bl	d58a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d58f0:	4606      	mov	r6, r0
   d58f2:	b198      	cbz	r0, d591c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d58f4:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d58f6:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d58f8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d58fc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5900:	4629      	mov	r1, r5
   d5902:	f105 0008 	add.w	r0, r5, #8
   d5906:	f7ff ffa2 	bl	d584e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d590a:	b11d      	cbz	r5, d5914 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d590c:	4669      	mov	r1, sp
   d590e:	4628      	mov	r0, r5
   d5910:	f7ff fd23 	bl	d535a <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d5914:	6863      	ldr	r3, [r4, #4]
   d5916:	3301      	adds	r3, #1
   d5918:	6063      	str	r3, [r4, #4]
   d591a:	2601      	movs	r6, #1
   d591c:	a801      	add	r0, sp, #4
   d591e:	f7ff fd34 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5922:	4630      	mov	r0, r6
   d5924:	b002      	add	sp, #8
   d5926:	bd70      	pop	{r4, r5, r6, pc}

000d5928 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d5928:	b510      	push	{r4, lr}
   d592a:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d592c:	6840      	ldr	r0, [r0, #4]
   d592e:	b108      	cbz	r0, d5934 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5930:	f7fe fbb5 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d5934:	4620      	mov	r0, r4
   d5936:	bd10      	pop	{r4, pc}

000d5938 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5938:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d593a:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d593c:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d593e:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d5942:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d5946:	f002 f999 	bl	d7c7c <_ZN6StringD1Ev>
   d594a:	4668      	mov	r0, sp
   d594c:	f7ff ffec 	bl	d5928 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5950:	b003      	add	sp, #12
   d5952:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5958 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5958:	b538      	push	{r3, r4, r5, lr}
   d595a:	2300      	movs	r3, #0
   d595c:	4604      	mov	r4, r0
   d595e:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5960:	2014      	movs	r0, #20
   d5962:	460d      	mov	r5, r1
   d5964:	f7fe fb97 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5968:	b128      	cbz	r0, d5976 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d596a:	2301      	movs	r3, #1
   d596c:	6043      	str	r3, [r0, #4]
   d596e:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5970:	4b02      	ldr	r3, [pc, #8]	; (d597c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d5972:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5974:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d5976:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d5978:	4620      	mov	r0, r4
   d597a:	bd38      	pop	{r3, r4, r5, pc}
   d597c:	000d902c 	.word	0x000d902c

000d5980 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d5980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5984:	b088      	sub	sp, #32
   d5986:	4605      	mov	r5, r0
   d5988:	461e      	mov	r6, r3
   d598a:	2054      	movs	r0, #84	; 0x54
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d598c:	2300      	movs	r3, #0
   d598e:	460f      	mov	r7, r1
   d5990:	4690      	mov	r8, r2
   d5992:	9304      	str	r3, [sp, #16]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5994:	9305      	str	r3, [sp, #20]
   d5996:	f7fe fb7e 	bl	d4096 <_Znwj>
   d599a:	f8cd d018 	str.w	sp, [sp, #24]
   d599e:	4604      	mov	r4, r0
   d59a0:	9007      	str	r0, [sp, #28]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d59a2:	b1c0      	cbz	r0, d59d6 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x56>
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d59a4:	f898 8000 	ldrb.w	r8, [r8]
              callback_(nullptr),
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
   d59a8:	f7ff fbc4 	bl	d5134 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
        description_ = desc;
   d59ac:	4639      	mov	r1, r7
   d59ae:	f104 003c 	add.w	r0, r4, #60	; 0x3c
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
   d59b2:	f884 8004 	strb.w	r8, [r4, #4]
        description_ = desc;
   d59b6:	f002 f9d5 	bl	d7d64 <_ZN6StringaSEPKc>
        callback_ = callback;
   d59ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d59bc:	64e3      	str	r3, [r4, #76]	; 0x4c
        context_ = context;
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d59be:	4631      	mov	r1, r6
    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
        description_ = desc;
        callback_ = callback;
        context_ = context;
   d59c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d59c2:	6523      	str	r3, [r4, #80]	; 0x50
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d59c4:	f104 0014 	add.w	r0, r4, #20
   d59c8:	f7ff fa84 	bl	d4ed4 <_ZN8particle7BleUuidaSERKS0_>
        svcUuid_ = svcUuid;
   d59cc:	990e      	ldr	r1, [sp, #56]	; 0x38
   d59ce:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d59d2:	f7ff fa7f 	bl	d4ed4 <_ZN8particle7BleUuidaSERKS0_>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d59d6:	4621      	mov	r1, r4

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d59d8:	2600      	movs	r6, #0
   d59da:	ab01      	add	r3, sp, #4
   d59dc:	aa02      	add	r2, sp, #8
   d59de:	a803      	add	r0, sp, #12
   d59e0:	9607      	str	r6, [sp, #28]
   d59e2:	f7ff ffb9 	bl	d5958 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d59e6:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d59e8:	9a05      	ldr	r2, [sp, #20]
   d59ea:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d59ec:	a803      	add	r0, sp, #12
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d59ee:	9305      	str	r3, [sp, #20]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d59f0:	9404      	str	r4, [sp, #16]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d59f2:	f7ff fcca 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d59f6:	a806      	add	r0, sp, #24
   d59f8:	f7ff ff96 	bl	d5928 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d59fc:	9b04      	ldr	r3, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d59fe:	6829      	ldr	r1, [r5, #0]
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5a00:	9a05      	ldr	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a02:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5a04:	a808      	add	r0, sp, #32
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5a06:	686b      	ldr	r3, [r5, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5a08:	9106      	str	r1, [sp, #24]
	__r._M_pi = _M_pi;
   d5a0a:	606a      	str	r2, [r5, #4]
	_M_pi = __tmp;
   d5a0c:	f840 3d04 	str.w	r3, [r0, #-4]!

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5a10:	9605      	str	r6, [sp, #20]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5a12:	9604      	str	r6, [sp, #16]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5a14:	f7ff fcb9 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5a18:	a805      	add	r0, sp, #20
   d5a1a:	f7ff fcb6 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
    impl_ = std::make_shared<BleCharacteristicImpl>(desc, properties, charUuid, svcUuid, callback, context);
    if (!impl()) {
   d5a1e:	6829      	ldr	r1, [r5, #0]
   d5a20:	b919      	cbnz	r1, d5a2a <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0xaa>
        SPARK_ASSERT(false);
   d5a22:	4a03      	ldr	r2, [pc, #12]	; (d5a30 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0xb0>)
   d5a24:	200a      	movs	r0, #10
   d5a26:	f7ff f871 	bl	d4b0c <panic_>
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d5a2a:	b008      	add	sp, #32
   d5a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5a30:	000d485d 	.word	0x000d485d

000d5a34 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d5a34:	b510      	push	{r4, lr}
   d5a36:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d5a38:	6840      	ldr	r0, [r0, #4]
   d5a3a:	b108      	cbz	r0, d5a40 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5a3c:	f7fe fb2f 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d5a40:	4620      	mov	r0, r4
   d5a42:	bd10      	pop	{r4, pc}

000d5a44 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5a44:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5a46:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d5a48:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d5a4a:	e88d 0009 	stmia.w	sp, {r0, r3}
   d5a4e:	4668      	mov	r0, sp
   d5a50:	f7ff fff0 	bl	d5a34 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5a54:	b003      	add	sp, #12
   d5a56:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5a5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5a5c:	b538      	push	{r3, r4, r5, lr}
   d5a5e:	2300      	movs	r3, #0
   d5a60:	4604      	mov	r4, r0
   d5a62:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5a64:	2014      	movs	r0, #20
   d5a66:	460d      	mov	r5, r1
   d5a68:	f7fe fb15 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5a6c:	b128      	cbz	r0, d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5a6e:	2301      	movs	r3, #1
   d5a70:	6043      	str	r3, [r0, #4]
   d5a72:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5a74:	4b02      	ldr	r3, [pc, #8]	; (d5a80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d5a76:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5a78:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d5a7a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d5a7c:	4620      	mov	r0, r4
   d5a7e:	bd38      	pop	{r3, r4, r5, pc}
   d5a80:	000d9048 	.word	0x000d9048

000d5a84 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d5a84:	b5f0      	push	{r4, r5, r6, r7, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5a86:	2600      	movs	r6, #0
   d5a88:	b087      	sub	sp, #28
   d5a8a:	6006      	str	r6, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5a8c:	6046      	str	r6, [r0, #4]
   d5a8e:	4604      	mov	r4, r0
   d5a90:	2018      	movs	r0, #24
   d5a92:	460f      	mov	r7, r1
   d5a94:	f7fe faff 	bl	d4096 <_Znwj>
   d5a98:	f8cd d010 	str.w	sp, [sp, #16]
   d5a9c:	4605      	mov	r5, r0
   d5a9e:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5aa0:	b138      	cbz	r0, d5ab2 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x2e>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d5aa2:	f7ff f999 	bl	d4dd8 <_ZN8particle7BleUuidC1Ev>
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d5aa6:	4639      	mov	r1, r7
   d5aa8:	4628      	mov	r0, r5
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d5aaa:	82ae      	strh	r6, [r5, #20]
   d5aac:	82ee      	strh	r6, [r5, #22]
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d5aae:	f7ff fa11 	bl	d4ed4 <_ZN8particle7BleUuidaSERKS0_>

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d5ab2:	2300      	movs	r3, #0
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5ab4:	4629      	mov	r1, r5
   d5ab6:	9305      	str	r3, [sp, #20]
   d5ab8:	aa02      	add	r2, sp, #8
   d5aba:	ab01      	add	r3, sp, #4
   d5abc:	a803      	add	r0, sp, #12
   d5abe:	f7ff ffcd 	bl	d5a5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5ac2:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d5ac4:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5ac6:	6025      	str	r5, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5ac8:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5aca:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5acc:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5ace:	f7ff fc5c 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d5ad2:	a804      	add	r0, sp, #16
   d5ad4:	f7ff ffae 	bl	d5a34 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
    }
}

BleService::BleService(const BleUuid& uuid)
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
   d5ad8:	6823      	ldr	r3, [r4, #0]
   d5ada:	b90b      	cbnz	r3, d5ae0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x5c>
   d5adc:	f7ff f924 	bl	d4d28 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d5ae0:	4620      	mov	r0, r4
   d5ae2:	b007      	add	sp, #28
   d5ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5ae8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d5ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5aec:	4617      	mov	r7, r2
   d5aee:	b0a1      	sub	sp, #132	; 0x84
   d5af0:	4680      	mov	r8, r0
    WiringBleLock lk;
   d5af2:	a80a      	add	r0, sp, #40	; 0x28
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d5af4:	460e      	mov	r6, r1
    WiringBleLock lk;
   d5af6:	f7ff f947 	bl	d4d88 <_ZN8particle3ble13WiringBleLockC1Ev>
   d5afa:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d5afc:	7923      	ldrb	r3, [r4, #4]
   d5afe:	2b00      	cmp	r3, #0
   d5b00:	f000 80de 	beq.w	d5cc0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5b04:	6833      	ldr	r3, [r6, #0]
   d5b06:	68dd      	ldr	r5, [r3, #12]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5b08:	691b      	ldr	r3, [r3, #16]
   d5b0a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d5b0e:	9303      	str	r3, [sp, #12]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d5b10:	f104 0a14 	add.w	sl, r4, #20
                svcUuid_ == impl.svcUuid_ &&
   d5b14:	f104 0b28 	add.w	fp, r4, #40	; 0x28
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d5b18:	9b03      	ldr	r3, [sp, #12]
   d5b1a:	42ab      	cmp	r3, r5
   d5b1c:	d023      	beq.n	d5b66 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
   d5b1e:	f8d5 9000 	ldr.w	r9, [r5]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d5b22:	4650      	mov	r0, sl
   d5b24:	f109 0114 	add.w	r1, r9, #20
   d5b28:	f7ff f9ee 	bl	d4f08 <_ZNK8particle7BleUuideqERKS0_>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d5b2c:	2800      	cmp	r0, #0
   d5b2e:	f000 80cc 	beq.w	d5cca <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
                svcUuid_ == impl.svcUuid_ &&
   d5b32:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d5b36:	4658      	mov	r0, fp
   d5b38:	f7ff f9e6 	bl	d4f08 <_ZNK8particle7BleUuideqERKS0_>
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d5b3c:	2800      	cmp	r0, #0
   d5b3e:	f000 80c4 	beq.w	d5cca <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d5b42:	6823      	ldr	r3, [r4, #0]
   d5b44:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   d5b48:	f8d9 3000 	ldr.w	r3, [r9]
   d5b4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   d5b50:	4299      	cmp	r1, r3
   d5b52:	f040 80ba 	bne.w	d5cca <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d5b56:	2320      	movs	r3, #32
   d5b58:	4a60      	ldr	r2, [pc, #384]	; (d5cdc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d5b5a:	9315      	str	r3, [sp, #84]	; 0x54
   d5b5c:	2300      	movs	r3, #0
   d5b5e:	9200      	str	r2, [sp, #0]
   d5b60:	9316      	str	r3, [sp, #88]	; 0x58
   d5b62:	aa15      	add	r2, sp, #84	; 0x54
   d5b64:	e0a8      	b.n	d5cb8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d0>
    BleUuid& charUUID() {
        return charUuid_;
    }

    BleUuid& svcUUID() {
        return svcUuid_;
   d5b66:	f104 0928 	add.w	r9, r4, #40	; 0x28
            return characteristic;
        }
    }
    // If the service that the characteristic belongs to is not specified,
    // put the characteristic to the default service.
    if (!charImpl->svcUUID().isValid()) {
   d5b6a:	4648      	mov	r0, r9
   d5b6c:	f7ff f97e 	bl	d4e6c <_ZNK8particle7BleUuid7isValidEv>
   d5b70:	b918      	cbnz	r0, d5b7a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x92>
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
   d5b72:	495b      	ldr	r1, [pc, #364]	; (d5ce0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d5b74:	4648      	mov	r0, r9
   d5b76:	f7ff f9ba 	bl	d4eee <_ZN8particle7BleUuidaSEPKh>
   d5b7a:	6833      	ldr	r3, [r6, #0]
   d5b7c:	681d      	ldr	r5, [r3, #0]
   d5b7e:	685b      	ldr	r3, [r3, #4]
   d5b80:	eb05 0ac3 	add.w	sl, r5, r3, lsl #3
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d5b84:	4555      	cmp	r5, sl
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d5b86:	4649      	mov	r1, r9
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d5b88:	d005      	beq.n	d5b96 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d5b8a:	6828      	ldr	r0, [r5, #0]
   d5b8c:	f7ff f9bc 	bl	d4f08 <_ZNK8particle7BleUuideqERKS0_>
   d5b90:	bb58      	cbnz	r0, d5bea <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x102>
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d5b92:	3508      	adds	r5, #8
   d5b94:	e7f6      	b.n	d5b84 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x9c>
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d5b96:	a80b      	add	r0, sp, #44	; 0x2c
   d5b98:	f7ff ff74 	bl	d5a84 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d5b9c:	4649      	mov	r1, r9
   d5b9e:	a815      	add	r0, sp, #84	; 0x54
   d5ba0:	f7ff f976 	bl	d4e90 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d5ba4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d5ba6:	2300      	movs	r3, #0
   d5ba8:	3214      	adds	r2, #20
   d5baa:	a915      	add	r1, sp, #84	; 0x54
   d5bac:	2001      	movs	r0, #1
   d5bae:	f7fe fddf 	bl	d4770 <hal_ble_gatt_server_add_service>
   d5bb2:	2800      	cmp	r0, #0
   d5bb4:	d178      	bne.n	d5ca8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1c0>
    }

    ~BleLocalDeviceImpl() = default;

    Vector<BleService>& services() {
        return services_;
   d5bb6:	6835      	ldr	r5, [r6, #0]
   d5bb8:	a90b      	add	r1, sp, #44	; 0x2c
   d5bba:	a80d      	add	r0, sp, #52	; 0x34
   d5bbc:	f7ff fbdb 	bl	d5376 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
        }
        if(!impl()->services().append(svc)) {
   d5bc0:	4628      	mov	r0, r5
   d5bc2:	a90d      	add	r1, sp, #52	; 0x34
   d5bc4:	f7ff fe19 	bl	d57fa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d5bc8:	4605      	mov	r5, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5bca:	a80e      	add	r0, sp, #56	; 0x38
   d5bcc:	f7ff fbdd 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5bd0:	2d00      	cmp	r5, #0
   d5bd2:	d069      	beq.n	d5ca8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1c0>
   d5bd4:	6832      	ldr	r2, [r6, #0]
    return data_[0];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::last() {
    return data_[size_ - 1];
   d5bd6:	6855      	ldr	r5, [r2, #4]
   d5bd8:	f105 5300 	add.w	r3, r5, #536870912	; 0x20000000
   d5bdc:	6815      	ldr	r5, [r2, #0]
   d5bde:	3b01      	subs	r3, #1
   d5be0:	a80c      	add	r0, sp, #48	; 0x30
   d5be2:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d5be6:	f7ff fbd0 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            context_ = charImpl.context_;
        }
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
   d5bea:	f104 0914 	add.w	r9, r4, #20
   d5bee:	4648      	mov	r0, r9
   d5bf0:	f7ff f93c 	bl	d4e6c <_ZNK8particle7BleUuid7isValidEv>
   d5bf4:	b968      	cbnz	r0, d5c12 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x12a>
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d5bf6:	4b3b      	ldr	r3, [pc, #236]	; (d5ce4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d5bf8:	4939      	ldr	r1, [pc, #228]	; (d5ce0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d5bfa:	881a      	ldrh	r2, [r3, #0]
   d5bfc:	3201      	adds	r2, #1
   d5bfe:	b292      	uxth	r2, r2
   d5c00:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d5c02:	a815      	add	r0, sp, #84	; 0x54
   d5c04:	2301      	movs	r3, #1
   d5c06:	f7ff f925 	bl	d4e54 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d5c0a:	a915      	add	r1, sp, #84	; 0x54
   d5c0c:	4648      	mov	r0, r9
   d5c0e:	f7ff f961 	bl	d4ed4 <_ZN8particle7BleUuidaSERKS0_>
            return characteristic;
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
   d5c12:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
   d5c16:	4652      	mov	r2, sl
   d5c18:	2100      	movs	r1, #0
   d5c1a:	a815      	add	r0, sp, #84	; 0x54
   d5c1c:	f003 f83b 	bl	d8c96 <memset>
    charInit.version = BLE_API_VERSION;
   d5c20:	2301      	movs	r3, #1
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
   d5c22:	4649      	mov	r1, r9
   d5c24:	a804      	add	r0, sp, #16
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
   d5c26:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    charInit.size = sizeof(hal_ble_char_init_t);
   d5c2a:	f8ad a056 	strh.w	sl, [sp, #86]	; 0x56
    charInit.uuid = charImpl->charUUID().halUUID();
   d5c2e:	f7ff f92f 	bl	d4e90 <_ZN8particle7BleUuid7halUUIDEv>
   d5c32:	ab04      	add	r3, sp, #16
   d5c34:	aa18      	add	r2, sp, #96	; 0x60
   d5c36:	f10d 0c20 	add.w	ip, sp, #32
   d5c3a:	6818      	ldr	r0, [r3, #0]
   d5c3c:	6859      	ldr	r1, [r3, #4]
   d5c3e:	4696      	mov	lr, r2
   d5c40:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   d5c44:	3308      	adds	r3, #8
   d5c46:	4563      	cmp	r3, ip
   d5c48:	4672      	mov	r2, lr
   d5c4a:	d1f6      	bne.n	d5c3a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x152>
   d5c4c:	6818      	ldr	r0, [r3, #0]
   d5c4e:	f8ce 0000 	str.w	r0, [lr]
    return *this;
}

template<typename T>
inline typename std::underlying_type_t<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::value() const {
    return value_;
   d5c52:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   d5c54:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d5c58:	682b      	ldr	r3, [r5, #0]
   d5c5a:	8a9b      	ldrh	r3, [r3, #20]
   d5c5c:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d5c60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5c62:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d5c64:	2200      	movs	r2, #0
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = charImpl->properties().value();
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
   d5c66:	4b20      	ldr	r3, [pc, #128]	; (d5ce8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
   d5c68:	931e      	str	r3, [sp, #120]	; 0x78
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d5c6a:	1da1      	adds	r1, r4, #6
   d5c6c:	a815      	add	r0, sp, #84	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = charImpl->properties().value();
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
   d5c6e:	941f      	str	r4, [sp, #124]	; 0x7c
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d5c70:	f7fe fd88 	bl	d4784 <hal_ble_gatt_server_add_characteristic>
   d5c74:	bb20      	cbnz	r0, d5cc0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
        return characteristic;
    }
    charImpl->local() = true;
   d5c76:	2301      	movs	r3, #1
   d5c78:	7023      	strb	r3, [r4, #0]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d5c7a:	6834      	ldr	r4, [r6, #0]
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d5c7c:	4639      	mov	r1, r7
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d5c7e:	340c      	adds	r4, #12
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d5c80:	a80d      	add	r0, sp, #52	; 0x34
   d5c82:	f7ff fb6a 	bl	d535a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5c86:	4620      	mov	r0, r4
   d5c88:	a90d      	add	r1, sp, #52	; 0x34
   d5c8a:	f7ff fe23 	bl	d58d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d5c8e:	4604      	mov	r4, r0
   d5c90:	a80e      	add	r0, sp, #56	; 0x38
   d5c92:	f7ff fb7a 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5c96:	b99c      	cbnz	r4, d5cc0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
        LOG(ERROR, "Failed to append local characteristic.");
   d5c98:	2320      	movs	r3, #32
   d5c9a:	930d      	str	r3, [sp, #52]	; 0x34
   d5c9c:	4b13      	ldr	r3, [pc, #76]	; (d5cec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d5c9e:	9300      	str	r3, [sp, #0]
   d5ca0:	940e      	str	r4, [sp, #56]	; 0x38
   d5ca2:	4623      	mov	r3, r4
   d5ca4:	aa0d      	add	r2, sp, #52	; 0x34
   d5ca6:	e007      	b.n	d5cb8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d0>
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
   d5ca8:	4639      	mov	r1, r7
   d5caa:	4640      	mov	r0, r8
   d5cac:	f7ff fb55 	bl	d535a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5cb0:	a80c      	add	r0, sp, #48	; 0x30
   d5cb2:	f7ff fb6a 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5cb6:	e00a      	b.n	d5cce <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e6>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d5cb8:	490d      	ldr	r1, [pc, #52]	; (d5cf0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
   d5cba:	2032      	movs	r0, #50	; 0x32
   d5cbc:	f7fe ff2e 	bl	d4b1c <log_message>
            return characteristic;
   d5cc0:	4639      	mov	r1, r7
   d5cc2:	4640      	mov	r0, r8
   d5cc4:	f7ff fb49 	bl	d535a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5cc8:	e001      	b.n	d5cce <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e6>
   d5cca:	3508      	adds	r5, #8
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d5ccc:	e724      	b.n	d5b18 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x30>
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
    WiringBleLock lk;
   d5cce:	a80a      	add	r0, sp, #40	; 0x28
   d5cd0:	f7ff f868 	bl	d4da4 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d5cd4:	4640      	mov	r0, r8
   d5cd6:	b021      	add	sp, #132	; 0x84
   d5cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5cdc:	000d91fd 	.word	0x000d91fd
   d5ce0:	000d9078 	.word	0x000d9078
   d5ce4:	2003e3bc 	.word	0x2003e3bc
   d5ce8:	000d5275 	.word	0x000d5275
   d5cec:	000d91d6 	.word	0x000d91d6
   d5cf0:	000d9088 	.word	0x000d9088

000d5cf4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5cf4:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5cf6:	4c06      	ldr	r4, [pc, #24]	; (d5d10 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5cf8:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d5cfa:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5cfc:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5cfe:	f7fe fd75 	bl	d47ec <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5d02:	4620      	mov	r0, r4
   d5d04:	4a03      	ldr	r2, [pc, #12]	; (d5d14 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5d06:	4904      	ldr	r1, [pc, #16]	; (d5d18 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5d0c:	f002 be10 	b.w	d8930 <__aeabi_atexit>
   d5d10:	2003e3c0 	.word	0x2003e3c0
   d5d14:	2003e360 	.word	0x2003e360
   d5d18:	000d4d17 	.word	0x000d4d17

000d5d1c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5d1c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5d1e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5d20:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5d22:	b113      	cbz	r3, d5d2a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5d24:	2203      	movs	r2, #3
   d5d26:	4601      	mov	r1, r0
   d5d28:	4798      	blx	r3
    }
   d5d2a:	4620      	mov	r0, r4
   d5d2c:	bd10      	pop	{r4, pc}

000d5d2e <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5d2e:	2200      	movs	r2, #0
   d5d30:	4611      	mov	r1, r2
   d5d32:	6840      	ldr	r0, [r0, #4]
   d5d34:	f7fe bf88 	b.w	d4c48 <network_listening>

000d5d38 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5d38:	2200      	movs	r2, #0
   d5d3a:	4611      	mov	r1, r2
   d5d3c:	6840      	ldr	r0, [r0, #4]
   d5d3e:	f7fe bf93 	b.w	d4c68 <network_get_listen_timeout>

000d5d42 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5d42:	2200      	movs	r2, #0
   d5d44:	6840      	ldr	r0, [r0, #4]
   d5d46:	f7fe bf87 	b.w	d4c58 <network_set_listen_timeout>

000d5d4a <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5d4a:	2200      	movs	r2, #0
   d5d4c:	f081 0101 	eor.w	r1, r1, #1
   d5d50:	6840      	ldr	r0, [r0, #4]
   d5d52:	f7fe bf71 	b.w	d4c38 <network_listen>

000d5d56 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5d56:	2300      	movs	r3, #0
   d5d58:	461a      	mov	r2, r3
   d5d5a:	4619      	mov	r1, r3
   d5d5c:	6840      	ldr	r0, [r0, #4]
   d5d5e:	f7fe bf63 	b.w	d4c28 <network_off>

000d5d62 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5d62:	2300      	movs	r3, #0
   d5d64:	461a      	mov	r2, r3
   d5d66:	4619      	mov	r1, r3
   d5d68:	6840      	ldr	r0, [r0, #4]
   d5d6a:	f7fe bf55 	b.w	d4c18 <network_on>

000d5d6e <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5d6e:	2200      	movs	r2, #0
   d5d70:	4611      	mov	r1, r2
   d5d72:	6840      	ldr	r0, [r0, #4]
   d5d74:	f7fe bf48 	b.w	d4c08 <network_ready>

000d5d78 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5d78:	2200      	movs	r2, #0
   d5d7a:	4611      	mov	r1, r2
   d5d7c:	6840      	ldr	r0, [r0, #4]
   d5d7e:	f7fe bf33 	b.w	d4be8 <network_connecting>

000d5d82 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5d82:	2200      	movs	r2, #0
   d5d84:	2102      	movs	r1, #2
   d5d86:	6840      	ldr	r0, [r0, #4]
   d5d88:	f7fe bf36 	b.w	d4bf8 <network_disconnect>

000d5d8c <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5d8c:	2300      	movs	r3, #0
   d5d8e:	461a      	mov	r2, r3
   d5d90:	6840      	ldr	r0, [r0, #4]
   d5d92:	f7fe bf21 	b.w	d4bd8 <network_connect>
	...

000d5d98 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5d98:	4b02      	ldr	r3, [pc, #8]	; (d5da4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5d9a:	2203      	movs	r2, #3
   d5d9c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5d9e:	4a02      	ldr	r2, [pc, #8]	; (d5da8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5da0:	601a      	str	r2, [r3, #0]
   d5da2:	4770      	bx	lr
   d5da4:	2003e3c4 	.word	0x2003e3c4
   d5da8:	000d9240 	.word	0x000d9240

000d5dac <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5dac:	4770      	bx	lr

000d5dae <_ZN9IPAddressD0Ev>:
   d5dae:	b510      	push	{r4, lr}
   d5db0:	2118      	movs	r1, #24
   d5db2:	4604      	mov	r4, r0
   d5db4:	f002 fdc1 	bl	d893a <_ZdlPvj>
   d5db8:	4620      	mov	r0, r4
   d5dba:	bd10      	pop	{r4, pc}

000d5dbc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5dbe:	7d03      	ldrb	r3, [r0, #20]
   d5dc0:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5dc2:	b08d      	sub	sp, #52	; 0x34
   d5dc4:	460e      	mov	r6, r1
   d5dc6:	f100 0704 	add.w	r7, r0, #4
   d5dca:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5dce:	d002      	beq.n	d5dd6 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5dd0:	f100 0508 	add.w	r5, r0, #8
   d5dd4:	e018      	b.n	d5e08 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5dd6:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5dd8:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5dda:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5dde:	232f      	movs	r3, #47	; 0x2f
   d5de0:	462a      	mov	r2, r5
   d5de2:	200a      	movs	r0, #10
   d5de4:	f7fe fd7a 	bl	d48dc <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5de8:	4628      	mov	r0, r5
   d5dea:	f002 ffaf 	bl	d8d4c <strlen>
   d5dee:	6833      	ldr	r3, [r6, #0]
   d5df0:	4602      	mov	r2, r0
   d5df2:	68db      	ldr	r3, [r3, #12]
   d5df4:	4629      	mov	r1, r5
   d5df6:	4630      	mov	r0, r6
   d5df8:	4798      	blx	r3
   d5dfa:	e00f      	b.n	d5e1c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5dfc:	b124      	cbz	r4, d5e08 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5dfe:	212e      	movs	r1, #46	; 0x2e
   d5e00:	4630      	mov	r0, r6
   d5e02:	f001 fe83 	bl	d7b0c <_ZN5Print5printEc>
   d5e06:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5e08:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5e0c:	220a      	movs	r2, #10
   d5e0e:	4630      	mov	r0, r6
   d5e10:	f001 fe8b 	bl	d7b2a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5e14:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5e16:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5e18:	d1f0      	bne.n	d5dfc <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5e1a:	4620      	mov	r0, r4
    }
    return n;
}
   d5e1c:	b00d      	add	sp, #52	; 0x34
   d5e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5e20 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5e20:	b510      	push	{r4, lr}
   d5e22:	4b05      	ldr	r3, [pc, #20]	; (d5e38 <_ZN9IPAddressC1Ev+0x18>)
   d5e24:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5e26:	2211      	movs	r2, #17
   d5e28:	f840 3b04 	str.w	r3, [r0], #4
   d5e2c:	2100      	movs	r1, #0
   d5e2e:	f002 ff32 	bl	d8c96 <memset>
{
    clear();
}
   d5e32:	4620      	mov	r0, r4
   d5e34:	bd10      	pop	{r4, pc}
   d5e36:	bf00      	nop
   d5e38:	000d9274 	.word	0x000d9274

000d5e3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5e3c:	4603      	mov	r3, r0
   d5e3e:	4a07      	ldr	r2, [pc, #28]	; (d5e5c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5e40:	b510      	push	{r4, lr}
   d5e42:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5e46:	f101 0210 	add.w	r2, r1, #16
   d5e4a:	f851 4b04 	ldr.w	r4, [r1], #4
   d5e4e:	f843 4b04 	str.w	r4, [r3], #4
   d5e52:	4291      	cmp	r1, r2
   d5e54:	d1f9      	bne.n	d5e4a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5e56:	780a      	ldrb	r2, [r1, #0]
   d5e58:	701a      	strb	r2, [r3, #0]
}
   d5e5a:	bd10      	pop	{r4, pc}
   d5e5c:	000d9274 	.word	0x000d9274

000d5e60 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d5e60:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d5e62:	2b04      	cmp	r3, #4
   d5e64:	d101      	bne.n	d5e6a <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d5e66:	6840      	ldr	r0, [r0, #4]
   d5e68:	e008      	b.n	d5e7c <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d5e6a:	2b06      	cmp	r3, #6
   d5e6c:	d10a      	bne.n	d5e84 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5e6e:	6843      	ldr	r3, [r0, #4]
   d5e70:	b953      	cbnz	r3, d5e88 <_ZNK9IPAddresscvbEv+0x28>
   d5e72:	6883      	ldr	r3, [r0, #8]
   d5e74:	b943      	cbnz	r3, d5e88 <_ZNK9IPAddresscvbEv+0x28>
   d5e76:	68c3      	ldr	r3, [r0, #12]
   d5e78:	b933      	cbnz	r3, d5e88 <_ZNK9IPAddresscvbEv+0x28>
   d5e7a:	6900      	ldr	r0, [r0, #16]
   d5e7c:	3000      	adds	r0, #0
   d5e7e:	bf18      	it	ne
   d5e80:	2001      	movne	r0, #1
   d5e82:	4770      	bx	lr
    } else {
        return false;
   d5e84:	2000      	movs	r0, #0
   d5e86:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5e88:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d5e8a:	4770      	bx	lr

000d5e8c <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5e8c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5e8e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5e92:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5e96:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5e9a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5e9e:	2304      	movs	r3, #4
   d5ea0:	6041      	str	r1, [r0, #4]
   d5ea2:	7503      	strb	r3, [r0, #20]
   d5ea4:	bd10      	pop	{r4, pc}

000d5ea6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5ea6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5ea8:	780d      	ldrb	r5, [r1, #0]
   d5eaa:	788b      	ldrb	r3, [r1, #2]
   d5eac:	784a      	ldrb	r2, [r1, #1]
   d5eae:	78c9      	ldrb	r1, [r1, #3]
   d5eb0:	9100      	str	r1, [sp, #0]
   d5eb2:	4629      	mov	r1, r5
   d5eb4:	f7ff ffea 	bl	d5e8c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5eb8:	b003      	add	sp, #12
   d5eba:	bd30      	pop	{r4, r5, pc}

000d5ebc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d5ebc:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d5ec0:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d5ec2:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d5ec6:	2901      	cmp	r1, #1
   d5ec8:	4610      	mov	r0, r2
   d5eca:	d104      	bne.n	d5ed6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d5ecc:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d5ed0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d5ed4:	e004      	b.n	d5ee0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d5ed6:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d5ed8:	bf04      	itt	eq
   d5eda:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d5ede:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d5ee0:	3b01      	subs	r3, #1
   d5ee2:	f102 0210 	add.w	r2, r2, #16
   d5ee6:	d1ec      	bne.n	d5ec2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d5ee8:	4770      	bx	lr

000d5eea <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d5eea:	b40e      	push	{r1, r2, r3}
   d5eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5ef0:	b087      	sub	sp, #28
   d5ef2:	af00      	add	r7, sp, #0
   d5ef4:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d5ef8:	4605      	mov	r5, r0
   d5efa:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d5efe:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d5f00:	4623      	mov	r3, r4
   d5f02:	4632      	mov	r2, r6
   d5f04:	2110      	movs	r1, #16
   d5f06:	f107 0008 	add.w	r0, r7, #8
   d5f0a:	f7fe fecd 	bl	d4ca8 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d5f0e:	280f      	cmp	r0, #15
   d5f10:	d916      	bls.n	d5f40 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d5f12:	f100 0308 	add.w	r3, r0, #8
   d5f16:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d5f1a:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d5f1c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d5f20:	4632      	mov	r2, r6
   d5f22:	1c41      	adds	r1, r0, #1
   d5f24:	4623      	mov	r3, r4
   d5f26:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d5f28:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d5f2a:	f7fe febd 	bl	d4ca8 <vsnprintf>
        va_end(args);
        if (n > 0) {
   d5f2e:	1e02      	subs	r2, r0, #0
   d5f30:	dd04      	ble.n	d5f3c <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d5f32:	682b      	ldr	r3, [r5, #0]
   d5f34:	4669      	mov	r1, sp
   d5f36:	689b      	ldr	r3, [r3, #8]
   d5f38:	4628      	mov	r0, r5
   d5f3a:	4798      	blx	r3
   d5f3c:	46c5      	mov	sp, r8
   d5f3e:	e007      	b.n	d5f50 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d5f40:	b130      	cbz	r0, d5f50 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d5f42:	682b      	ldr	r3, [r5, #0]
   d5f44:	4602      	mov	r2, r0
   d5f46:	689b      	ldr	r3, [r3, #8]
   d5f48:	f107 0108 	add.w	r1, r7, #8
   d5f4c:	4628      	mov	r0, r5
   d5f4e:	4798      	blx	r3
    }
}
   d5f50:	371c      	adds	r7, #28
   d5f52:	46bd      	mov	sp, r7
   d5f54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d5f58:	b003      	add	sp, #12
   d5f5a:	4770      	bx	lr

000d5f5c <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d5f5c:	b513      	push	{r0, r1, r4, lr}
   d5f5e:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d5f60:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d5f62:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d5f66:	6894      	ldr	r4, [r2, #8]
   d5f68:	4619      	mov	r1, r3
   d5f6a:	2201      	movs	r2, #1
   d5f6c:	47a0      	blx	r4
}
   d5f6e:	b002      	add	sp, #8
   d5f70:	bd10      	pop	{r4, pc}

000d5f72 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d5f72:	6883      	ldr	r3, [r0, #8]
   d5f74:	b1fb      	cbz	r3, d5fb6 <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d5f76:	781a      	ldrb	r2, [r3, #0]
   d5f78:	2a03      	cmp	r2, #3
   d5f7a:	d81a      	bhi.n	d5fb2 <_ZNK5spark9JSONValue4typeEv+0x40>
   d5f7c:	e8df f002 	tbb	[pc, r2]
   d5f80:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d5f84:	2005      	movs	r0, #5
   d5f86:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d5f88:	6802      	ldr	r2, [r0, #0]
   d5f8a:	685b      	ldr	r3, [r3, #4]
   d5f8c:	6852      	ldr	r2, [r2, #4]
   d5f8e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d5f90:	282d      	cmp	r0, #45	; 0x2d
   d5f92:	d014      	beq.n	d5fbe <_ZNK5spark9JSONValue4typeEv+0x4c>
   d5f94:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d5f98:	2b09      	cmp	r3, #9
   d5f9a:	d910      	bls.n	d5fbe <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d5f9c:	2874      	cmp	r0, #116	; 0x74
   d5f9e:	d010      	beq.n	d5fc2 <_ZNK5spark9JSONValue4typeEv+0x50>
   d5fa0:	2866      	cmp	r0, #102	; 0x66
   d5fa2:	d00e      	beq.n	d5fc2 <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d5fa4:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d5fa8:	4258      	negs	r0, r3
   d5faa:	4158      	adcs	r0, r3
   d5fac:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d5fae:	2006      	movs	r0, #6
   d5fb0:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d5fb2:	2000      	movs	r0, #0
   d5fb4:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d5fb6:	4618      	mov	r0, r3
   d5fb8:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d5fba:	2004      	movs	r0, #4
   d5fbc:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d5fbe:	2003      	movs	r0, #3
   d5fc0:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d5fc2:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d5fc4:	4770      	bx	lr

000d5fc6 <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d5fc6:	b510      	push	{r4, lr}
   d5fc8:	4604      	mov	r4, r0
    switch (type()) {
   d5fca:	f7ff ffd2 	bl	d5f72 <_ZNK5spark9JSONValue4typeEv>
   d5fce:	2802      	cmp	r0, #2
   d5fd0:	d00d      	beq.n	d5fee <_ZNK5spark9JSONValue5toIntEv+0x28>
   d5fd2:	d316      	bcc.n	d6002 <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d5fd4:	2804      	cmp	r0, #4
   d5fd6:	d814      	bhi.n	d6002 <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d5fd8:	6822      	ldr	r2, [r4, #0]
   d5fda:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d5fdc:	6850      	ldr	r0, [r2, #4]
   d5fde:	685b      	ldr	r3, [r3, #4]
   d5fe0:	220a      	movs	r2, #10
   d5fe2:	2100      	movs	r1, #0
   d5fe4:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d5fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d5fea:	f002 bf71 	b.w	d8ed0 <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d5fee:	6822      	ldr	r2, [r4, #0]
   d5ff0:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d5ff2:	6852      	ldr	r2, [r2, #4]
   d5ff4:	685b      	ldr	r3, [r3, #4]
   d5ff6:	5cd0      	ldrb	r0, [r2, r3]
   d5ff8:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d5ffc:	4258      	negs	r0, r3
   d5ffe:	4158      	adcs	r0, r3
   d6000:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d6002:	2000      	movs	r0, #0
    }
}
   d6004:	bd10      	pop	{r4, pc}

000d6006 <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d6006:	b510      	push	{r4, lr}
    if (!n_) {
   d6008:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d600a:	4604      	mov	r4, r0
    if (!n_) {
   d600c:	b15b      	cbz	r3, d6026 <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d600e:	6880      	ldr	r0, [r0, #8]
   d6010:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d6012:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d6014:	3010      	adds	r0, #16
   d6016:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d6018:	6120      	str	r0, [r4, #16]
    --n_;
   d601a:	6163      	str	r3, [r4, #20]
    if (n_) {
   d601c:	b12b      	cbz	r3, d602a <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d601e:	f7ff ff4d 	bl	d5ebc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d6022:	60a0      	str	r0, [r4, #8]
   d6024:	e001      	b.n	d602a <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d6026:	4618      	mov	r0, r3
   d6028:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d602a:	2001      	movs	r0, #1
}
   d602c:	bd10      	pop	{r4, pc}

000d602e <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d602e:	b510      	push	{r4, lr}
    write('}');
   d6030:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d6032:	4604      	mov	r4, r0
    write('}');
   d6034:	f7ff ff92 	bl	d5f5c <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d6038:	2301      	movs	r3, #1
   d603a:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d603c:	4620      	mov	r0, r4
   d603e:	bd10      	pop	{r4, pc}

000d6040 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d6040:	b508      	push	{r3, lr}
    switch (state_) {
   d6042:	7903      	ldrb	r3, [r0, #4]
   d6044:	2b01      	cmp	r3, #1
   d6046:	d002      	beq.n	d604e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d6048:	2b02      	cmp	r3, #2
   d604a:	d002      	beq.n	d6052 <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   d604c:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   d604e:	212c      	movs	r1, #44	; 0x2c
   d6050:	e000      	b.n	d6054 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   d6052:	213a      	movs	r1, #58	; 0x3a
   d6054:	f7ff ff82 	bl	d5f5c <_ZN5spark10JSONWriter5writeEc>
   d6058:	bd08      	pop	{r3, pc}

000d605a <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   d605a:	b510      	push	{r4, lr}
   d605c:	4604      	mov	r4, r0
    writeSeparator();
   d605e:	f7ff ffef 	bl	d6040 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d6062:	4620      	mov	r0, r4
   d6064:	217b      	movs	r1, #123	; 0x7b
   d6066:	f7ff ff79 	bl	d5f5c <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d606a:	2300      	movs	r3, #0
   d606c:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d606e:	4620      	mov	r0, r4
   d6070:	bd10      	pop	{r4, pc}
	...

000d6074 <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   d6074:	b538      	push	{r3, r4, r5, lr}
   d6076:	4604      	mov	r4, r0
   d6078:	460d      	mov	r5, r1
    writeSeparator();
   d607a:	f7ff ffe1 	bl	d6040 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d607e:	6823      	ldr	r3, [r4, #0]
   d6080:	4904      	ldr	r1, [pc, #16]	; (d6094 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d6082:	68db      	ldr	r3, [r3, #12]
   d6084:	4620      	mov	r0, r4
   d6086:	462a      	mov	r2, r5
   d6088:	4798      	blx	r3
    state_ = NEXT;
   d608a:	2301      	movs	r3, #1
   d608c:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d608e:	4620      	mov	r0, r4
   d6090:	bd38      	pop	{r3, r4, r5, pc}
   d6092:	bf00      	nop
   d6094:	000d8f7c 	.word	0x000d8f7c

000d6098 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d6098:	b538      	push	{r3, r4, r5, lr}
   d609a:	4604      	mov	r4, r0
   d609c:	460d      	mov	r5, r1
    writeSeparator();
   d609e:	f7ff ffcf 	bl	d6040 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d60a2:	6823      	ldr	r3, [r4, #0]
   d60a4:	4904      	ldr	r1, [pc, #16]	; (d60b8 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d60a6:	68db      	ldr	r3, [r3, #12]
   d60a8:	4620      	mov	r0, r4
   d60aa:	462a      	mov	r2, r5
   d60ac:	4798      	blx	r3
    state_ = NEXT;
   d60ae:	2301      	movs	r3, #1
   d60b0:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d60b2:	4620      	mov	r0, r4
   d60b4:	bd38      	pop	{r3, r4, r5, pc}
   d60b6:	bf00      	nop
   d60b8:	000d928f 	.word	0x000d928f

000d60bc <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d60bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d60be:	460d      	mov	r5, r1
   d60c0:	4617      	mov	r7, r2
    write('"');
   d60c2:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d60c4:	4604      	mov	r4, r0
   d60c6:	442f      	add	r7, r5
    write('"');
   d60c8:	f7ff ff48 	bl	d5f5c <_ZN5spark10JSONWriter5writeEc>
   d60cc:	462a      	mov	r2, r5
    const char* const end = str + size;
   d60ce:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   d60d0:	42ba      	cmp	r2, r7
   d60d2:	d038      	beq.n	d6146 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   d60d4:	4616      	mov	r6, r2
   d60d6:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d60da:	2d22      	cmp	r5, #34	; 0x22
   d60dc:	d003      	beq.n	d60e6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d60de:	2d5c      	cmp	r5, #92	; 0x5c
   d60e0:	d001      	beq.n	d60e6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d60e2:	2d1f      	cmp	r5, #31
   d60e4:	d82d      	bhi.n	d6142 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   d60e6:	6823      	ldr	r3, [r4, #0]
   d60e8:	1a52      	subs	r2, r2, r1
   d60ea:	689b      	ldr	r3, [r3, #8]
   d60ec:	4620      	mov	r0, r4
   d60ee:	4798      	blx	r3
            write('\\');
   d60f0:	215c      	movs	r1, #92	; 0x5c
   d60f2:	4620      	mov	r0, r4
   d60f4:	f7ff ff32 	bl	d5f5c <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d60f8:	2d0c      	cmp	r5, #12
   d60fa:	d019      	beq.n	d6130 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   d60fc:	d807      	bhi.n	d610e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   d60fe:	2d09      	cmp	r5, #9
   d6100:	d00f      	beq.n	d6122 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   d6102:	2d0a      	cmp	r5, #10
   d6104:	d012      	beq.n	d612c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   d6106:	2d08      	cmp	r5, #8
   d6108:	d114      	bne.n	d6134 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d610a:	2162      	movs	r1, #98	; 0x62
   d610c:	e00a      	b.n	d6124 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   d610e:	2d22      	cmp	r5, #34	; 0x22
   d6110:	d005      	beq.n	d611e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d6112:	2d5c      	cmp	r5, #92	; 0x5c
   d6114:	d003      	beq.n	d611e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d6116:	2d0d      	cmp	r5, #13
   d6118:	d10c      	bne.n	d6134 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   d611a:	2172      	movs	r1, #114	; 0x72
   d611c:	e002      	b.n	d6124 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   d611e:	4629      	mov	r1, r5
   d6120:	e000      	b.n	d6124 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   d6122:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d6124:	4620      	mov	r0, r4
   d6126:	f7ff ff19 	bl	d5f5c <_ZN5spark10JSONWriter5writeEc>
                break;
   d612a:	e009      	b.n	d6140 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   d612c:	216e      	movs	r1, #110	; 0x6e
   d612e:	e7f9      	b.n	d6124 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   d6130:	2166      	movs	r1, #102	; 0x66
   d6132:	e7f7      	b.n	d6124 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d6134:	6823      	ldr	r3, [r4, #0]
   d6136:	490a      	ldr	r1, [pc, #40]	; (d6160 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   d6138:	68db      	ldr	r3, [r3, #12]
   d613a:	462a      	mov	r2, r5
   d613c:	4620      	mov	r0, r4
   d613e:	4798      	blx	r3
                break;
            }
            str = s + 1;
   d6140:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   d6142:	4632      	mov	r2, r6
   d6144:	e7c4      	b.n	d60d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   d6146:	4291      	cmp	r1, r2
   d6148:	d004      	beq.n	d6154 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   d614a:	6823      	ldr	r3, [r4, #0]
   d614c:	1a52      	subs	r2, r2, r1
   d614e:	689d      	ldr	r5, [r3, #8]
   d6150:	4620      	mov	r0, r4
   d6152:	47a8      	blx	r5
    }
    write('"');
   d6154:	2122      	movs	r1, #34	; 0x22
   d6156:	4620      	mov	r0, r4
   d6158:	f7ff ff00 	bl	d5f5c <_ZN5spark10JSONWriter5writeEc>
   d615c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d615e:	bf00      	nop
   d6160:	000d92a0 	.word	0x000d92a0

000d6164 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d6164:	b570      	push	{r4, r5, r6, lr}
   d6166:	4604      	mov	r4, r0
   d6168:	460d      	mov	r5, r1
   d616a:	4616      	mov	r6, r2
    writeSeparator();
   d616c:	f7ff ff68 	bl	d6040 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d6170:	4620      	mov	r0, r4
   d6172:	4632      	mov	r2, r6
   d6174:	4629      	mov	r1, r5
   d6176:	f7ff ffa1 	bl	d60bc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d617a:	2302      	movs	r3, #2
   d617c:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d617e:	4620      	mov	r0, r4
   d6180:	bd70      	pop	{r4, r5, r6, pc}

000d6182 <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d6182:	b570      	push	{r4, r5, r6, lr}
   d6184:	4604      	mov	r4, r0
   d6186:	460d      	mov	r5, r1
   d6188:	4616      	mov	r6, r2
    writeSeparator();
   d618a:	f7ff ff59 	bl	d6040 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d618e:	4620      	mov	r0, r4
   d6190:	4632      	mov	r2, r6
   d6192:	4629      	mov	r1, r5
   d6194:	f7ff ff92 	bl	d60bc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d6198:	2301      	movs	r3, #1
   d619a:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d619c:	4620      	mov	r0, r4
   d619e:	bd70      	pop	{r4, r5, r6, pc}

000d61a0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d61a0:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d61a2:	2300      	movs	r3, #0
   d61a4:	4604      	mov	r4, r0
   d61a6:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d61a8:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d61aa:	4810      	ldr	r0, [pc, #64]	; (d61ec <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   d61ac:	60a0      	str	r0, [r4, #8]
   d61ae:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d61b0:	b1d1      	cbz	r1, d61e8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   d61b2:	780b      	ldrb	r3, [r1, #0]
   d61b4:	2b03      	cmp	r3, #3
   d61b6:	d006      	beq.n	d61c6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d61b8:	b9b3      	cbnz	r3, d61e8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d61ba:	6813      	ldr	r3, [r2, #0]
   d61bc:	6858      	ldr	r0, [r3, #4]
   d61be:	684b      	ldr	r3, [r1, #4]
   d61c0:	5cc3      	ldrb	r3, [r0, r3]
   d61c2:	2b6e      	cmp	r3, #110	; 0x6e
   d61c4:	d008      	beq.n	d61d8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   d61c6:	6813      	ldr	r3, [r2, #0]
   d61c8:	6858      	ldr	r0, [r3, #4]
   d61ca:	684b      	ldr	r3, [r1, #4]
   d61cc:	4403      	add	r3, r0
   d61ce:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   d61d0:	688b      	ldr	r3, [r1, #8]
   d61d2:	6849      	ldr	r1, [r1, #4]
   d61d4:	1a5b      	subs	r3, r3, r1
   d61d6:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d61d8:	4611      	mov	r1, r2
   d61da:	4620      	mov	r0, r4
   d61dc:	f851 3b04 	ldr.w	r3, [r1], #4
   d61e0:	f840 3b04 	str.w	r3, [r0], #4
   d61e4:	f7ff f96e 	bl	d54c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   d61e8:	4620      	mov	r0, r4
   d61ea:	bd10      	pop	{r4, pc}
   d61ec:	000d937c 	.word	0x000d937c

000d61f0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d61f0:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d61f2:	b510      	push	{r4, lr}
   d61f4:	4604      	mov	r4, r0
   d61f6:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d61f8:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d61fa:	6083      	str	r3, [r0, #8]
   d61fc:	60c3      	str	r3, [r0, #12]
   d61fe:	6103      	str	r3, [r0, #16]
   d6200:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d6202:	b171      	cbz	r1, d6222 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   d6204:	780b      	ldrb	r3, [r1, #0]
   d6206:	2b01      	cmp	r3, #1
   d6208:	d10b      	bne.n	d6222 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   d620a:	f101 0310 	add.w	r3, r1, #16
   d620e:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   d6210:	68cb      	ldr	r3, [r1, #12]
   d6212:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d6214:	4611      	mov	r1, r2
   d6216:	f851 3b04 	ldr.w	r3, [r1], #4
   d621a:	f840 3b04 	str.w	r3, [r0], #4
   d621e:	f7ff f951 	bl	d54c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   d6222:	4620      	mov	r0, r4
   d6224:	bd10      	pop	{r4, pc}

000d6226 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d6226:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6228:	b510      	push	{r4, lr}
   d622a:	4604      	mov	r4, r0
   d622c:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d622e:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   d6230:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   d6232:	b131      	cbz	r1, d6242 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d6234:	4611      	mov	r1, r2
   d6236:	f851 3b04 	ldr.w	r3, [r1], #4
   d623a:	f840 3b04 	str.w	r3, [r0], #4
   d623e:	f7ff f941 	bl	d54c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   d6242:	4620      	mov	r0, r4
   d6244:	bd10      	pop	{r4, pc}

000d6246 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d6246:	6880      	ldr	r0, [r0, #8]
   d6248:	6803      	ldr	r3, [r0, #0]
   d624a:	68db      	ldr	r3, [r3, #12]
   d624c:	4718      	bx	r3

000d624e <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d624e:	4770      	bx	lr

000d6250 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d6250:	b119      	cbz	r1, d625a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d6252:	680b      	ldr	r3, [r1, #0]
   d6254:	4608      	mov	r0, r1
   d6256:	685b      	ldr	r3, [r3, #4]
   d6258:	4718      	bx	r3
   d625a:	4770      	bx	lr

000d625c <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d625c:	b119      	cbz	r1, d6266 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d625e:	680b      	ldr	r3, [r1, #0]
   d6260:	4608      	mov	r0, r1
   d6262:	685b      	ldr	r3, [r3, #4]
   d6264:	4718      	bx	r3
   d6266:	4770      	bx	lr

000d6268 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d6268:	4770      	bx	lr

000d626a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d626a:	4770      	bx	lr

000d626c <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d626c:	4770      	bx	lr

000d626e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d626e:	b538      	push	{r3, r4, r5, lr}
   d6270:	4604      	mov	r4, r0
   d6272:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d6274:	6800      	ldr	r0, [r0, #0]
   d6276:	212e      	movs	r1, #46	; 0x2e
   d6278:	f002 fd4c 	bl	d8d14 <strchrnul>
    size = s - category;
   d627c:	6823      	ldr	r3, [r4, #0]
   d627e:	1ac3      	subs	r3, r0, r3
   d6280:	602b      	str	r3, [r5, #0]
    if (size) {
   d6282:	b123      	cbz	r3, d628e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d6284:	7803      	ldrb	r3, [r0, #0]
   d6286:	b103      	cbz	r3, d628a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d6288:	3001      	adds	r0, #1
   d628a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d628c:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d628e:	4618      	mov	r0, r3
}
   d6290:	bd38      	pop	{r3, r4, r5, pc}

000d6292 <_ZN5spark16JSONStreamWriterD0Ev>:
   d6292:	b510      	push	{r4, lr}
   d6294:	210c      	movs	r1, #12
   d6296:	4604      	mov	r4, r0
   d6298:	f002 fb4f 	bl	d893a <_ZdlPvj>
   d629c:	4620      	mov	r0, r4
   d629e:	bd10      	pop	{r4, pc}

000d62a0 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d62a0:	b510      	push	{r4, lr}
   d62a2:	2104      	movs	r1, #4
   d62a4:	4604      	mov	r4, r0
   d62a6:	f002 fb48 	bl	d893a <_ZdlPvj>
   d62aa:	4620      	mov	r0, r4
   d62ac:	bd10      	pop	{r4, pc}

000d62ae <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d62ae:	b510      	push	{r4, lr}
   d62b0:	2104      	movs	r1, #4
   d62b2:	4604      	mov	r4, r0
   d62b4:	f002 fb41 	bl	d893a <_ZdlPvj>
   d62b8:	4620      	mov	r0, r4
   d62ba:	bd10      	pop	{r4, pc}

000d62bc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d62bc:	b538      	push	{r3, r4, r5, lr}
   d62be:	460c      	mov	r4, r1
   d62c0:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d62c2:	f002 fa49 	bl	d8758 <_Z16_fetch_usbserialv>
   d62c6:	4284      	cmp	r4, r0
   d62c8:	d00d      	beq.n	d62e6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d62ca:	f002 f9b9 	bl	d8640 <_Z22__fetch_global_Serial1v>
   d62ce:	4284      	cmp	r4, r0
   d62d0:	d105      	bne.n	d62de <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d62d2:	f002 f9b5 	bl	d8640 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d62d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d62da:	f002 b9ae 	b.w	d863a <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d62de:	4621      	mov	r1, r4
   d62e0:	4628      	mov	r0, r5
   d62e2:	f7ff ffbb 	bl	d625c <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d62e6:	bd38      	pop	{r3, r4, r5, pc}

000d62e8 <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d62e8:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d62ea:	f002 fd1d 	bl	d8d28 <strcmp>
}
   d62ee:	fab0 f080 	clz	r0, r0
   d62f2:	0940      	lsrs	r0, r0, #5
   d62f4:	bd08      	pop	{r3, pc}

000d62f6 <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d62f6:	b538      	push	{r3, r4, r5, lr}
   d62f8:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d62fa:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d62fc:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d62fe:	f002 fd25 	bl	d8d4c <strlen>
   d6302:	4621      	mov	r1, r4
   d6304:	4602      	mov	r2, r0
   d6306:	4628      	mov	r0, r5
}
   d6308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d630c:	f7ff bf39 	b.w	d6182 <_ZN5spark10JSONWriter5valueEPKcj>

000d6310 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d6310:	6800      	ldr	r0, [r0, #0]
   d6312:	f7fe ba7b 	b.w	d480c <os_mutex_recursive_lock>

000d6316 <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d6316:	b570      	push	{r4, r5, r6, lr}
   d6318:	4604      	mov	r4, r0
    write(str, strlen(str));
   d631a:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d631c:	460d      	mov	r5, r1
    write(str, strlen(str));
   d631e:	f002 fd15 	bl	d8d4c <strlen>
   d6322:	6823      	ldr	r3, [r4, #0]
   d6324:	4602      	mov	r2, r0
   d6326:	4629      	mov	r1, r5
   d6328:	4620      	mov	r0, r4
   d632a:	68db      	ldr	r3, [r3, #12]
}
   d632c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d6330:	4718      	bx	r3

000d6332 <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d6332:	b513      	push	{r0, r1, r4, lr}
   d6334:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d6336:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d6338:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d633c:	68d4      	ldr	r4, [r2, #12]
   d633e:	4619      	mov	r1, r3
   d6340:	2201      	movs	r2, #1
   d6342:	47a0      	blx	r4
}
   d6344:	b002      	add	sp, #8
   d6346:	bd10      	pop	{r4, pc}

000d6348 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d6348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d634c:	6845      	ldr	r5, [r0, #4]
   d634e:	6807      	ldr	r7, [r0, #0]
   d6350:	b085      	sub	sp, #20
   d6352:	4691      	mov	r9, r2
   d6354:	2214      	movs	r2, #20
   d6356:	4355      	muls	r5, r2
   d6358:	9301      	str	r3, [sp, #4]
   d635a:	10ab      	asrs	r3, r5, #2
   d635c:	4d19      	ldr	r5, [pc, #100]	; (d63c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d635e:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d6360:	435d      	muls	r5, r3
   d6362:	468b      	mov	fp, r1
   d6364:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d6366:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d6368:	2d00      	cmp	r5, #0
   d636a:	9303      	str	r3, [sp, #12]
   d636c:	dd23      	ble.n	d63b6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d636e:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d6370:	106e      	asrs	r6, r5, #1
   d6372:	fb03 f006 	mul.w	r0, r3, r6
   d6376:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d637a:	464a      	mov	r2, r9
   d637c:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d6380:	5820      	ldr	r0, [r4, r0]
   d6382:	45d1      	cmp	r9, sl
   d6384:	bf28      	it	cs
   d6386:	4652      	movcs	r2, sl
   d6388:	4659      	mov	r1, fp
   d638a:	f002 fce7 	bl	d8d5c <strncmp>
                if (cmp == 0) {
   d638e:	9b03      	ldr	r3, [sp, #12]
   d6390:	b948      	cbnz	r0, d63a6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d6392:	45d1      	cmp	r9, sl
   d6394:	d103      	bne.n	d639e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d6396:	9a01      	ldr	r2, [sp, #4]
   d6398:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d639a:	4635      	mov	r5, r6
   d639c:	e7e4      	b.n	d6368 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d639e:	bf8c      	ite	hi
   d63a0:	2001      	movhi	r0, #1
   d63a2:	2000      	movls	r0, #0
   d63a4:	e000      	b.n	d63a8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d63a6:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d63a8:	2800      	cmp	r0, #0
   d63aa:	d0f6      	beq.n	d639a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d63ac:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d63ae:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d63b2:	3e01      	subs	r6, #1
   d63b4:	e7f1      	b.n	d639a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d63b6:	1be4      	subs	r4, r4, r7
}
   d63b8:	4802      	ldr	r0, [pc, #8]	; (d63c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d63ba:	10a4      	asrs	r4, r4, #2
}
   d63bc:	4360      	muls	r0, r4
   d63be:	b005      	add	sp, #20
   d63c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d63c4:	cccccccd 	.word	0xcccccccd

000d63c8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d63c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d63ca:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d63cc:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d63ce:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d63d0:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d63d2:	b313      	cbz	r3, d641a <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d63d4:	b309      	cbz	r1, d641a <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d63d6:	af04      	add	r7, sp, #16
   d63d8:	2300      	movs	r3, #0
   d63da:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d63de:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d63e2:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d63e4:	4639      	mov	r1, r7
   d63e6:	a801      	add	r0, sp, #4
   d63e8:	f7ff ff41 	bl	d626e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d63ec:	4601      	mov	r1, r0
   d63ee:	b1a0      	cbz	r0, d641a <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d63f0:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d63f2:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d63f4:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d63f8:	4620      	mov	r0, r4
   d63fa:	f7ff ffa5 	bl	d6348 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d63fe:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d6402:	b153      	cbz	r3, d641a <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d6404:	6823      	ldr	r3, [r4, #0]
   d6406:	2414      	movs	r4, #20
   d6408:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d640c:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d640e:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d6412:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d6414:	bfa8      	it	ge
   d6416:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6418:	e7e4      	b.n	d63e4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d641a:	4630      	mov	r0, r6
   d641c:	b005      	add	sp, #20
   d641e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6420 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d6420:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d6422:	4c09      	ldr	r4, [pc, #36]	; (d6448 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d6424:	6823      	ldr	r3, [r4, #0]
   d6426:	07db      	lsls	r3, r3, #31
   d6428:	d40b      	bmi.n	d6442 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d642a:	4620      	mov	r0, r4
   d642c:	f7fd fe46 	bl	d40bc <__cxa_guard_acquire>
   d6430:	b138      	cbz	r0, d6442 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d6432:	4620      	mov	r0, r4
   d6434:	f7fd fe47 	bl	d40c6 <__cxa_guard_release>
   d6438:	4a04      	ldr	r2, [pc, #16]	; (d644c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d643a:	4905      	ldr	r1, [pc, #20]	; (d6450 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d643c:	4805      	ldr	r0, [pc, #20]	; (d6454 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d643e:	f002 fa77 	bl	d8930 <__aeabi_atexit>
    return &factory;
}
   d6442:	4804      	ldr	r0, [pc, #16]	; (d6454 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d6444:	bd10      	pop	{r4, pc}
   d6446:	bf00      	nop
   d6448:	2003e3cc 	.word	0x2003e3cc
   d644c:	2003e360 	.word	0x2003e360
   d6450:	000d626b 	.word	0x000d626b
   d6454:	2003e2f0 	.word	0x2003e2f0

000d6458 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d6458:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d645a:	4c09      	ldr	r4, [pc, #36]	; (d6480 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d645c:	6823      	ldr	r3, [r4, #0]
   d645e:	07db      	lsls	r3, r3, #31
   d6460:	d40b      	bmi.n	d647a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d6462:	4620      	mov	r0, r4
   d6464:	f7fd fe2a 	bl	d40bc <__cxa_guard_acquire>
   d6468:	b138      	cbz	r0, d647a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d646a:	4620      	mov	r0, r4
   d646c:	f7fd fe2b 	bl	d40c6 <__cxa_guard_release>
   d6470:	4a04      	ldr	r2, [pc, #16]	; (d6484 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d6472:	4905      	ldr	r1, [pc, #20]	; (d6488 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d6474:	4805      	ldr	r0, [pc, #20]	; (d648c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d6476:	f002 fa5b 	bl	d8930 <__aeabi_atexit>
    return &factory;
}
   d647a:	4804      	ldr	r0, [pc, #16]	; (d648c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d647c:	bd10      	pop	{r4, pc}
   d647e:	bf00      	nop
   d6480:	2003e3fc 	.word	0x2003e3fc
   d6484:	2003e360 	.word	0x2003e360
   d6488:	000d6269 	.word	0x000d6269
   d648c:	2003e2ec 	.word	0x2003e2ec

000d6490 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d6490:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6492:	2500      	movs	r5, #0
   d6494:	4604      	mov	r4, r0
   d6496:	6005      	str	r5, [r0, #0]
   d6498:	6045      	str	r5, [r0, #4]
   d649a:	6085      	str	r5, [r0, #8]
   d649c:	6105      	str	r5, [r0, #16]
   d649e:	6145      	str	r5, [r0, #20]
   d64a0:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d64a2:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d64a6:	f7fe f9a1 	bl	d47ec <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d64aa:	f7ff ffb9 	bl	d6420 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d64ae:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d64b0:	f7ff ffd2 	bl	d6458 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d64b4:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d64b6:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d64b8:	4620      	mov	r0, r4
   d64ba:	bd38      	pop	{r3, r4, r5, pc}

000d64bc <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d64bc:	b510      	push	{r4, lr}
    static LogManager mgr;
   d64be:	4c0a      	ldr	r4, [pc, #40]	; (d64e8 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d64c0:	6823      	ldr	r3, [r4, #0]
   d64c2:	07db      	lsls	r3, r3, #31
   d64c4:	d40e      	bmi.n	d64e4 <_ZN5spark10LogManager8instanceEv+0x28>
   d64c6:	4620      	mov	r0, r4
   d64c8:	f7fd fdf8 	bl	d40bc <__cxa_guard_acquire>
   d64cc:	b150      	cbz	r0, d64e4 <_ZN5spark10LogManager8instanceEv+0x28>
   d64ce:	4807      	ldr	r0, [pc, #28]	; (d64ec <_ZN5spark10LogManager8instanceEv+0x30>)
   d64d0:	f7ff ffde 	bl	d6490 <_ZN5spark10LogManagerC1Ev>
   d64d4:	4620      	mov	r0, r4
   d64d6:	f7fd fdf6 	bl	d40c6 <__cxa_guard_release>
   d64da:	4a05      	ldr	r2, [pc, #20]	; (d64f0 <_ZN5spark10LogManager8instanceEv+0x34>)
   d64dc:	4905      	ldr	r1, [pc, #20]	; (d64f4 <_ZN5spark10LogManager8instanceEv+0x38>)
   d64de:	4803      	ldr	r0, [pc, #12]	; (d64ec <_ZN5spark10LogManager8instanceEv+0x30>)
   d64e0:	f002 fa26 	bl	d8930 <__aeabi_atexit>
    return &mgr;
}
   d64e4:	4801      	ldr	r0, [pc, #4]	; (d64ec <_ZN5spark10LogManager8instanceEv+0x30>)
   d64e6:	bd10      	pop	{r4, pc}
   d64e8:	2003e3d0 	.word	0x2003e3d0
   d64ec:	2003e3d4 	.word	0x2003e3d4
   d64f0:	2003e360 	.word	0x2003e360
   d64f4:	000d6927 	.word	0x000d6927

000d64f8 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d64f8:	2300      	movs	r3, #0
   d64fa:	4a02      	ldr	r2, [pc, #8]	; (d6504 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d64fc:	4902      	ldr	r1, [pc, #8]	; (d6508 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d64fe:	4803      	ldr	r0, [pc, #12]	; (d650c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d6500:	f7fe bb24 	b.w	d4b4c <log_set_callbacks>
   d6504:	000d6809 	.word	0x000d6809
   d6508:	000d6799 	.word	0x000d6799
   d650c:	000d6721 	.word	0x000d6721

000d6510 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d6510:	2300      	movs	r3, #0
   d6512:	461a      	mov	r2, r3
   d6514:	4619      	mov	r1, r3
   d6516:	4618      	mov	r0, r3
   d6518:	f7fe bb18 	b.w	d4b4c <log_set_callbacks>

000d651c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d651c:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d651e:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d6520:	688e      	ldr	r6, [r1, #8]
   d6522:	f851 3b04 	ldr.w	r3, [r1], #4
   d6526:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d652a:	4605      	mov	r5, r0
   d652c:	a801      	add	r0, sp, #4
   d652e:	f7fe ff0d 	bl	d534c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d6532:	4622      	mov	r2, r4
   d6534:	4631      	mov	r1, r6
   d6536:	4628      	mov	r0, r5
   d6538:	f7ff fe5a 	bl	d61f0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d653c:	a801      	add	r0, sp, #4
   d653e:	f7fe ff24 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6542:	4628      	mov	r0, r5
   d6544:	b002      	add	sp, #8
   d6546:	bd70      	pop	{r4, r5, r6, pc}

000d6548 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d6548:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d654a:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d654c:	690e      	ldr	r6, [r1, #16]
   d654e:	f851 3b04 	ldr.w	r3, [r1], #4
   d6552:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d6556:	4605      	mov	r5, r0
   d6558:	a801      	add	r0, sp, #4
   d655a:	f7fe fef7 	bl	d534c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d655e:	4622      	mov	r2, r4
   d6560:	4631      	mov	r1, r6
   d6562:	4628      	mov	r0, r5
   d6564:	f7ff fe5f 	bl	d6226 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6568:	a801      	add	r0, sp, #4
   d656a:	f7fe ff0e 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d656e:	4628      	mov	r0, r5
   d6570:	b002      	add	sp, #8
   d6572:	bd70      	pop	{r4, r5, r6, pc}

000d6574 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d6574:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6576:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d6578:	68ce      	ldr	r6, [r1, #12]
   d657a:	f851 3b04 	ldr.w	r3, [r1], #4
   d657e:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d6582:	4605      	mov	r5, r0
   d6584:	a801      	add	r0, sp, #4
   d6586:	f7fe fee1 	bl	d534c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d658a:	4622      	mov	r2, r4
   d658c:	4631      	mov	r1, r6
   d658e:	4628      	mov	r0, r5
   d6590:	f7ff fe06 	bl	d61a0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6594:	a801      	add	r0, sp, #4
   d6596:	f7fe fef8 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d659a:	4628      	mov	r0, r5
   d659c:	b002      	add	sp, #8
   d659e:	bd70      	pop	{r4, r5, r6, pc}

000d65a0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d65a0:	b530      	push	{r4, r5, lr}
   d65a2:	b08b      	sub	sp, #44	; 0x2c
   d65a4:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d65a6:	4601      	mov	r1, r0
   d65a8:	a804      	add	r0, sp, #16
   d65aa:	f7ff ffb7 	bl	d651c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d65ae:	a804      	add	r0, sp, #16
   d65b0:	f7ff fd29 	bl	d6006 <_ZN5spark18JSONObjectIterator4nextEv>
   d65b4:	b1e8      	cbz	r0, d65f2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d65b6:	a904      	add	r1, sp, #16
   d65b8:	4668      	mov	r0, sp
   d65ba:	f7ff ffdb 	bl	d6574 <_ZNK5spark18JSONObjectIterator4nameEv>
   d65be:	490f      	ldr	r1, [pc, #60]	; (d65fc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d65c0:	9802      	ldr	r0, [sp, #8]
   d65c2:	f7ff fe91 	bl	d62e8 <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d65c6:	4604      	mov	r4, r0
   d65c8:	b110      	cbz	r0, d65d0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d65ca:	1c2c      	adds	r4, r5, #0
   d65cc:	bf18      	it	ne
   d65ce:	2401      	movne	r4, #1
   d65d0:	a801      	add	r0, sp, #4
   d65d2:	f7fe feda 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d65d6:	2c00      	cmp	r4, #0
   d65d8:	d0e9      	beq.n	d65ae <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d65da:	a904      	add	r1, sp, #16
   d65dc:	4668      	mov	r0, sp
   d65de:	f7ff ffb3 	bl	d6548 <_ZNK5spark18JSONObjectIterator5valueEv>
   d65e2:	4668      	mov	r0, sp
   d65e4:	f7ff fcef 	bl	d5fc6 <_ZNK5spark9JSONValue5toIntEv>
   d65e8:	6028      	str	r0, [r5, #0]
   d65ea:	a801      	add	r0, sp, #4
   d65ec:	f7fe fecd 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d65f0:	e7dd      	b.n	d65ae <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d65f2:	a805      	add	r0, sp, #20
   d65f4:	f7fe fec9 	bl	d538a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d65f8:	b00b      	add	sp, #44	; 0x2c
   d65fa:	bd30      	pop	{r4, r5, pc}
   d65fc:	000d92d8 	.word	0x000d92d8

000d6600 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d6600:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6602:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d6604:	4620      	mov	r0, r4
   d6606:	4913      	ldr	r1, [pc, #76]	; (d6654 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d6608:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d660a:	f002 fb8d 	bl	d8d28 <strcmp>
   d660e:	b940      	cbnz	r0, d6622 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d6610:	f002 f8a2 	bl	d8758 <_Z16_fetch_usbserialv>
   d6614:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d6618:	f002 f88e 	bl	d8738 <_ZN9USBSerial5beginEl>
        return &Serial;
   d661c:	f002 f89c 	bl	d8758 <_Z16_fetch_usbserialv>
   d6620:	e015      	b.n	d664e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d6622:	490d      	ldr	r1, [pc, #52]	; (d6658 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d6624:	4620      	mov	r0, r4
   d6626:	f002 fb7f 	bl	d8d28 <strcmp>
   d662a:	b978      	cbnz	r0, d664c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d662c:	a902      	add	r1, sp, #8
   d662e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d6632:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d6636:	4628      	mov	r0, r5
   d6638:	f7ff ffb2 	bl	d65a0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d663c:	f002 f800 	bl	d8640 <_Z22__fetch_global_Serial1v>
   d6640:	9901      	ldr	r1, [sp, #4]
   d6642:	f001 fff7 	bl	d8634 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d6646:	f001 fffb 	bl	d8640 <_Z22__fetch_global_Serial1v>
   d664a:	e000      	b.n	d664e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d664c:	2000      	movs	r0, #0
}
   d664e:	b003      	add	sp, #12
   d6650:	bd30      	pop	{r4, r5, pc}
   d6652:	bf00      	nop
   d6654:	000d92dd 	.word	0x000d92dd
   d6658:	000d92e4 	.word	0x000d92e4

000d665c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d665c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d665e:	6804      	ldr	r4, [r0, #0]
   d6660:	6843      	ldr	r3, [r0, #4]
   d6662:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6664:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d6666:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d666a:	42a6      	cmp	r6, r4
   d666c:	d005      	beq.n	d667a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d666e:	f104 0008 	add.w	r0, r4, #8
   d6672:	f7ff fff3 	bl	d665c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d6676:	3414      	adds	r4, #20
   d6678:	e7f7      	b.n	d666a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d667a:	6828      	ldr	r0, [r5, #0]
   d667c:	f7fe fb04 	bl	d4c88 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d6680:	4628      	mov	r0, r5
   d6682:	bd70      	pop	{r4, r5, r6, pc}

000d6684 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6684:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6686:	6804      	ldr	r4, [r0, #0]
   d6688:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d668a:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d668c:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6690:	42a6      	cmp	r6, r4
   d6692:	d004      	beq.n	d669e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d6694:	4620      	mov	r0, r4
   d6696:	f001 faf1 	bl	d7c7c <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d669a:	3410      	adds	r4, #16
   d669c:	e7f8      	b.n	d6690 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d669e:	6828      	ldr	r0, [r5, #0]
   d66a0:	f7fe faf2 	bl	d4c88 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d66a4:	4628      	mov	r0, r5
   d66a6:	bd70      	pop	{r4, r5, r6, pc}

000d66a8 <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d66a8:	b510      	push	{r4, lr}
   d66aa:	4604      	mov	r4, r0
   d66ac:	300c      	adds	r0, #12
   d66ae:	f7ff ffd5 	bl	d665c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d66b2:	4620      	mov	r0, r4
   d66b4:	f7ff ffe6 	bl	d6684 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d66b8:	4620      	mov	r0, r4
   d66ba:	bd10      	pop	{r4, pc}

000d66bc <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d66bc:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d66be:	4b04      	ldr	r3, [pc, #16]	; (d66d0 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d66c0:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d66c2:	f840 3b04 	str.w	r3, [r0], #4
   d66c6:	f7ff ffef 	bl	d66a8 <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d66ca:	4620      	mov	r0, r4
   d66cc:	bd10      	pop	{r4, pc}
   d66ce:	bf00      	nop
   d66d0:	000d8f00 	.word	0x000d8f00

000d66d4 <_ZN5spark16StreamLogHandlerD0Ev>:
   d66d4:	b510      	push	{r4, lr}
   d66d6:	4604      	mov	r4, r0
   d66d8:	f7ff fff0 	bl	d66bc <_ZN5spark16StreamLogHandlerD1Ev>
   d66dc:	4620      	mov	r0, r4
   d66de:	2124      	movs	r1, #36	; 0x24
   d66e0:	f002 f92b 	bl	d893a <_ZdlPvj>
   d66e4:	4620      	mov	r0, r4
   d66e6:	bd10      	pop	{r4, pc}

000d66e8 <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d66e8:	b510      	push	{r4, lr}
   d66ea:	4b03      	ldr	r3, [pc, #12]	; (d66f8 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d66ec:	6003      	str	r3, [r0, #0]
   d66ee:	4604      	mov	r4, r0
   d66f0:	f7ff ffe4 	bl	d66bc <_ZN5spark16StreamLogHandlerD1Ev>
   d66f4:	4620      	mov	r0, r4
   d66f6:	bd10      	pop	{r4, pc}
   d66f8:	000d92c8 	.word	0x000d92c8

000d66fc <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d66fc:	b510      	push	{r4, lr}
   d66fe:	4604      	mov	r4, r0
   d6700:	f7ff fff2 	bl	d66e8 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d6704:	4620      	mov	r0, r4
   d6706:	2124      	movs	r1, #36	; 0x24
   d6708:	f002 f917 	bl	d893a <_ZdlPvj>
   d670c:	4620      	mov	r0, r4
   d670e:	bd10      	pop	{r4, pc}

000d6710 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d6710:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6712:	6803      	ldr	r3, [r0, #0]
   d6714:	4604      	mov	r4, r0
   d6716:	6818      	ldr	r0, [r3, #0]
   d6718:	f7fe f880 	bl	d481c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d671c:	4620      	mov	r0, r4
   d671e:	bd10      	pop	{r4, pc}

000d6720 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d6720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6724:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d6726:	4b1b      	ldr	r3, [pc, #108]	; (d6794 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d6728:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d672a:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d672e:	b085      	sub	sp, #20
   d6730:	4682      	mov	sl, r0
   d6732:	460e      	mov	r6, r1
   d6734:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6736:	bb53      	cbnz	r3, d678e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d6738:	f7ff fec0 	bl	d64bc <_ZN5spark10LogManager8instanceEv>
   d673c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d673e:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6740:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d6742:	f7ff fde5 	bl	d6310 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d6746:	7b23      	ldrb	r3, [r4, #12]
   d6748:	b9f3      	cbnz	r3, d6788 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d674a:	2301      	movs	r3, #1
   d674c:	7323      	strb	r3, [r4, #12]
   d674e:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6750:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d6752:	b2f6      	uxtb	r6, r6
   d6754:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d6758:	454d      	cmp	r5, r9
   d675a:	d013      	beq.n	d6784 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d675c:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d6760:	4641      	mov	r1, r8
   d6762:	1d38      	adds	r0, r7, #4
   d6764:	f7ff fe30 	bl	d63c8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6768:	4286      	cmp	r6, r0
   d676a:	d3f5      	bcc.n	d6758 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d676c:	683b      	ldr	r3, [r7, #0]
   d676e:	f8cd b000 	str.w	fp, [sp]
   d6772:	689b      	ldr	r3, [r3, #8]
   d6774:	469e      	mov	lr, r3
   d6776:	4638      	mov	r0, r7
   d6778:	4643      	mov	r3, r8
   d677a:	4632      	mov	r2, r6
   d677c:	4651      	mov	r1, sl
   d677e:	4677      	mov	r7, lr
   d6780:	47b8      	blx	r7
   d6782:	e7e9      	b.n	d6758 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6784:	2300      	movs	r3, #0
   d6786:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d6788:	a803      	add	r0, sp, #12
   d678a:	f7ff ffc1 	bl	d6710 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d678e:	b005      	add	sp, #20
   d6790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6794:	e000ed00 	.word	0xe000ed00

000d6798 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d6798:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d679c:	4699      	mov	r9, r3
   d679e:	4b19      	ldr	r3, [pc, #100]	; (d6804 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d67a0:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d67a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d67a6:	4607      	mov	r7, r0
   d67a8:	4688      	mov	r8, r1
   d67aa:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d67ac:	bb33      	cbnz	r3, d67fc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d67ae:	f7ff fe85 	bl	d64bc <_ZN5spark10LogManager8instanceEv>
   d67b2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d67b4:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d67b6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d67b8:	f7ff fdaa 	bl	d6310 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d67bc:	7b23      	ldrb	r3, [r4, #12]
   d67be:	b9d3      	cbnz	r3, d67f6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d67c0:	2301      	movs	r3, #1
   d67c2:	7323      	strb	r3, [r4, #12]
   d67c4:	6825      	ldr	r5, [r4, #0]
   d67c6:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d67c8:	fa5f fb86 	uxtb.w	fp, r6
   d67cc:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d67d0:	4555      	cmp	r5, sl
   d67d2:	d00e      	beq.n	d67f2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d67d4:	f855 6b04 	ldr.w	r6, [r5], #4
   d67d8:	4649      	mov	r1, r9
   d67da:	1d30      	adds	r0, r6, #4
   d67dc:	f7ff fdf4 	bl	d63c8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d67e0:	4583      	cmp	fp, r0
   d67e2:	d3f5      	bcc.n	d67d0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d67e4:	6833      	ldr	r3, [r6, #0]
   d67e6:	4642      	mov	r2, r8
   d67e8:	68db      	ldr	r3, [r3, #12]
   d67ea:	4639      	mov	r1, r7
   d67ec:	4630      	mov	r0, r6
   d67ee:	4798      	blx	r3
   d67f0:	e7ee      	b.n	d67d0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d67f2:	2300      	movs	r3, #0
   d67f4:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d67f6:	a801      	add	r0, sp, #4
   d67f8:	f7ff ff8a 	bl	d6710 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d67fc:	b003      	add	sp, #12
   d67fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6802:	bf00      	nop
   d6804:	e000ed00 	.word	0xe000ed00

000d6808 <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d6808:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d680c:	4b15      	ldr	r3, [pc, #84]	; (d6864 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d680e:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6810:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d6814:	4604      	mov	r4, r0
   d6816:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6818:	b9fb      	cbnz	r3, d685a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d681a:	f7ff fe4f 	bl	d64bc <_ZN5spark10LogManager8instanceEv>
   d681e:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d6820:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6822:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6824:	f7ff fd74 	bl	d6310 <_ZN14RecursiveMutex4lockEv>
   d6828:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d682c:	2646      	movs	r6, #70	; 0x46
   d682e:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d6832:	42af      	cmp	r7, r5
   d6834:	d107      	bne.n	d6846 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d6836:	a801      	add	r0, sp, #4
   d6838:	f7ff ff6a 	bl	d6710 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d683c:	42b4      	cmp	r4, r6
   d683e:	bfb4      	ite	lt
   d6840:	2000      	movlt	r0, #0
   d6842:	2001      	movge	r0, #1
   d6844:	e00a      	b.n	d685c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d6846:	f855 0b04 	ldr.w	r0, [r5], #4
   d684a:	4641      	mov	r1, r8
   d684c:	3004      	adds	r0, #4
   d684e:	f7ff fdbb 	bl	d63c8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6852:	4286      	cmp	r6, r0
   d6854:	bfa8      	it	ge
   d6856:	4606      	movge	r6, r0
   d6858:	e7eb      	b.n	d6832 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d685a:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d685c:	b002      	add	sp, #8
   d685e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6862:	bf00      	nop
   d6864:	e000ed00 	.word	0xe000ed00

000d6868 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6868:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d686a:	6803      	ldr	r3, [r0, #0]
   d686c:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d686e:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d6870:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6874:	429a      	cmp	r2, r3
   d6876:	4618      	mov	r0, r3
   d6878:	d00e      	beq.n	d6898 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d687a:	6806      	ldr	r6, [r0, #0]
   d687c:	680d      	ldr	r5, [r1, #0]
   d687e:	42ae      	cmp	r6, r5
   d6880:	f103 0304 	add.w	r3, r3, #4
   d6884:	d1f6      	bne.n	d6874 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d6886:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6888:	1a52      	subs	r2, r2, r1
   d688a:	f002 f9e9 	bl	d8c60 <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d688e:	6863      	ldr	r3, [r4, #4]
   d6890:	3b01      	subs	r3, #1
   d6892:	6063      	str	r3, [r4, #4]
    return true;
   d6894:	2001      	movs	r0, #1
}
   d6896:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d6898:	2000      	movs	r0, #0
   d689a:	bd70      	pop	{r4, r5, r6, pc}

000d689c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d689c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d689e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d68a0:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d68a2:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d68a4:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d68a6:	f7ff fd33 	bl	d6310 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d68aa:	a901      	add	r1, sp, #4
   d68ac:	4620      	mov	r0, r4
   d68ae:	f7ff ffdb 	bl	d6868 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d68b2:	b920      	cbnz	r0, d68be <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d68b4:	a803      	add	r0, sp, #12
   d68b6:	f7ff ff2b 	bl	d6710 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d68ba:	b004      	add	sp, #16
   d68bc:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d68be:	6863      	ldr	r3, [r4, #4]
   d68c0:	2b00      	cmp	r3, #0
   d68c2:	d1f7      	bne.n	d68b4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d68c4:	f7ff fe24 	bl	d6510 <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d68c8:	e7f4      	b.n	d68b4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d68ca <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d68ca:	b570      	push	{r4, r5, r6, lr}
   d68cc:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d68ce:	6943      	ldr	r3, [r0, #20]
   d68d0:	2618      	movs	r6, #24
   d68d2:	4604      	mov	r4, r0
   d68d4:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d68d8:	42ae      	cmp	r6, r5
   d68da:	d015      	beq.n	d6908 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d68dc:	f105 0110 	add.w	r1, r5, #16
   d68e0:	4620      	mov	r0, r4
   d68e2:	f7ff ffc1 	bl	d6868 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d68e6:	6863      	ldr	r3, [r4, #4]
   d68e8:	b90b      	cbnz	r3, d68ee <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d68ea:	f7ff fe11 	bl	d6510 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d68ee:	69e0      	ldr	r0, [r4, #28]
   d68f0:	6929      	ldr	r1, [r5, #16]
   d68f2:	6803      	ldr	r3, [r0, #0]
   d68f4:	68db      	ldr	r3, [r3, #12]
   d68f6:	4798      	blx	r3
        if (h.stream) {
   d68f8:	6969      	ldr	r1, [r5, #20]
   d68fa:	b119      	cbz	r1, d6904 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d68fc:	6a20      	ldr	r0, [r4, #32]
   d68fe:	6803      	ldr	r3, [r0, #0]
   d6900:	68db      	ldr	r3, [r3, #12]
   d6902:	4798      	blx	r3
   d6904:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d6906:	e7e7      	b.n	d68d8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d6908:	6925      	ldr	r5, [r4, #16]
   d690a:	6963      	ldr	r3, [r4, #20]
   d690c:	2618      	movs	r6, #24
   d690e:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6912:	42b5      	cmp	r5, r6
   d6914:	d004      	beq.n	d6920 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d6916:	4628      	mov	r0, r5
   d6918:	f001 f9b0 	bl	d7c7c <_ZN6StringD1Ev>
   d691c:	3518      	adds	r5, #24
   d691e:	e7f8      	b.n	d6912 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d6920:	2300      	movs	r3, #0
   d6922:	6163      	str	r3, [r4, #20]
   d6924:	bd70      	pop	{r4, r5, r6, pc}

000d6926 <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d6926:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6928:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d692a:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d692c:	f7ff fdf0 	bl	d6510 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6930:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6934:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d6938:	f7ff fcea 	bl	d6310 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d693c:	4620      	mov	r0, r4
   d693e:	f7ff ffc4 	bl	d68ca <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6942:	4628      	mov	r0, r5
   d6944:	f7ff fee4 	bl	d6710 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6948:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d694a:	b108      	cbz	r0, d6950 <_ZN5spark10LogManagerD1Ev+0x2a>
            os_mutex_recursive_destroy(handle_);
   d694c:	f7fd ff56 	bl	d47fc <os_mutex_recursive_destroy>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d6950:	6925      	ldr	r5, [r4, #16]
   d6952:	6963      	ldr	r3, [r4, #20]
   d6954:	2618      	movs	r6, #24
   d6956:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d695a:	42b5      	cmp	r5, r6
   d695c:	d004      	beq.n	d6968 <_ZN5spark10LogManagerD1Ev+0x42>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d695e:	4628      	mov	r0, r5
   d6960:	f001 f98c 	bl	d7c7c <_ZN6StringD1Ev>
   d6964:	3518      	adds	r5, #24
   d6966:	e7f8      	b.n	d695a <_ZN5spark10LogManagerD1Ev+0x34>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6968:	6920      	ldr	r0, [r4, #16]
   d696a:	f7fe f98d 	bl	d4c88 <free>
   d696e:	6820      	ldr	r0, [r4, #0]
   d6970:	f7fe f98a 	bl	d4c88 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d6974:	4620      	mov	r0, r4
   d6976:	b002      	add	sp, #8
   d6978:	bd70      	pop	{r4, r5, r6, pc}

000d697a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d697a:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d697c:	680a      	ldr	r2, [r1, #0]
   d697e:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6980:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6982:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6984:	684a      	ldr	r2, [r1, #4]
   d6986:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6988:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d698a:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d698c:	688a      	ldr	r2, [r1, #8]
   d698e:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6990:	608b      	str	r3, [r1, #8]
   d6992:	4770      	bx	lr

000d6994 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d6994:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6996:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d6998:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d699a:	6003      	str	r3, [r0, #0]
   d699c:	6043      	str	r3, [r0, #4]
   d699e:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d69a0:	f7ff ffeb 	bl	d697a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d69a4:	4620      	mov	r0, r4
   d69a6:	bd10      	pop	{r4, pc}

000d69a8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d69a8:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d69aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d69ac:	4604      	mov	r4, r0
   d69ae:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d69b0:	d925      	bls.n	d69fe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d69b2:	4290      	cmp	r0, r2
   d69b4:	d224      	bcs.n	d6a00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d69b6:	1a55      	subs	r5, r2, r1
   d69b8:	3d14      	subs	r5, #20
   d69ba:	442c      	add	r4, r5
   d69bc:	f1a1 0714 	sub.w	r7, r1, #20
   d69c0:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d69c4:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d69c6:	f1a5 0308 	sub.w	r3, r5, #8
   d69ca:	429f      	cmp	r7, r3
   d69cc:	d037      	beq.n	d6a3e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d69ce:	b184      	cbz	r4, d69f2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d69d0:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d69d4:	6023      	str	r3, [r4, #0]
   d69d6:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d69da:	80a3      	strh	r3, [r4, #4]
   d69dc:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d69e0:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d69e2:	60a6      	str	r6, [r4, #8]
   d69e4:	60e6      	str	r6, [r4, #12]
   d69e6:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d69e8:	4629      	mov	r1, r5
   d69ea:	f104 0008 	add.w	r0, r4, #8
   d69ee:	f7ff ffc4 	bl	d697a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d69f2:	4628      	mov	r0, r5
   d69f4:	f7ff fe32 	bl	d665c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d69f8:	3c14      	subs	r4, #20
   d69fa:	3d14      	subs	r5, #20
   d69fc:	e7e3      	b.n	d69c6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d69fe:	d01e      	beq.n	d6a3e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d6a00:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6a04:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6a06:	f1a5 0308 	sub.w	r3, r5, #8
   d6a0a:	429e      	cmp	r6, r3
   d6a0c:	d017      	beq.n	d6a3e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d6a0e:	b184      	cbz	r4, d6a32 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d6a10:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d6a14:	6023      	str	r3, [r4, #0]
   d6a16:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d6a1a:	80a3      	strh	r3, [r4, #4]
   d6a1c:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d6a20:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6a22:	60a7      	str	r7, [r4, #8]
   d6a24:	60e7      	str	r7, [r4, #12]
   d6a26:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6a28:	4629      	mov	r1, r5
   d6a2a:	f104 0008 	add.w	r0, r4, #8
   d6a2e:	f7ff ffa4 	bl	d697a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d6a32:	4628      	mov	r0, r5
   d6a34:	f7ff fe12 	bl	d665c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6a38:	3414      	adds	r4, #20
   d6a3a:	3514      	adds	r5, #20
   d6a3c:	e7e3      	b.n	d6a06 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d6a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6a40 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d6a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6a42:	6845      	ldr	r5, [r0, #4]
   d6a44:	6883      	ldr	r3, [r0, #8]
   d6a46:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d6a48:	4604      	mov	r4, r0
   d6a4a:	460e      	mov	r6, r1
   d6a4c:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6a4e:	db0e      	blt.n	d6a6e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d6a50:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d6a52:	2d00      	cmp	r5, #0
   d6a54:	dd05      	ble.n	d6a62 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d6a56:	00a9      	lsls	r1, r5, #2
   d6a58:	6800      	ldr	r0, [r0, #0]
   d6a5a:	f7fe f91d 	bl	d4c98 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d6a5e:	b920      	cbnz	r0, d6a6a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d6a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6a62:	6800      	ldr	r0, [r0, #0]
   d6a64:	f7fe f910 	bl	d4c88 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6a68:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d6a6a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d6a6c:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6a6e:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6a70:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6a72:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6a76:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d6a7a:	1a52      	subs	r2, r2, r1
   d6a7c:	1d08      	adds	r0, r1, #4
   d6a7e:	f002 f8ef 	bl	d8c60 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d6a82:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d6a86:	6863      	ldr	r3, [r4, #4]
   d6a88:	3301      	adds	r3, #1
   d6a8a:	6063      	str	r3, [r4, #4]
   d6a8c:	2001      	movs	r0, #1
    return true;
}
   d6a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6a90 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d6a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6a92:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d6a94:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d6a96:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6a98:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6a9a:	f7ff fc39 	bl	d6310 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d6a9e:	6823      	ldr	r3, [r4, #0]
   d6aa0:	6861      	ldr	r1, [r4, #4]
   d6aa2:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6aa6:	4283      	cmp	r3, r0
   d6aa8:	461a      	mov	r2, r3
   d6aaa:	d009      	beq.n	d6ac0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d6aac:	6812      	ldr	r2, [r2, #0]
   d6aae:	42aa      	cmp	r2, r5
   d6ab0:	f103 0304 	add.w	r3, r3, #4
   d6ab4:	d1f7      	bne.n	d6aa6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d6ab6:	a801      	add	r0, sp, #4
   d6ab8:	f7ff fe2a 	bl	d6710 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d6abc:	2500      	movs	r5, #0
   d6abe:	e00e      	b.n	d6ade <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6ac0:	462a      	mov	r2, r5
   d6ac2:	4620      	mov	r0, r4
   d6ac4:	f7ff ffbc 	bl	d6a40 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d6ac8:	4605      	mov	r5, r0
   d6aca:	2800      	cmp	r0, #0
   d6acc:	d0f3      	beq.n	d6ab6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d6ace:	6863      	ldr	r3, [r4, #4]
   d6ad0:	2b01      	cmp	r3, #1
   d6ad2:	d101      	bne.n	d6ad8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d6ad4:	f7ff fd10 	bl	d64f8 <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d6ad8:	a801      	add	r0, sp, #4
   d6ada:	f7ff fe19 	bl	d6710 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d6ade:	4628      	mov	r0, r5
   d6ae0:	b003      	add	sp, #12
   d6ae2:	bd30      	pop	{r4, r5, pc}

000d6ae4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6ae4:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6ae8:	4606      	mov	r6, r0
   d6aea:	460c      	mov	r4, r1
   d6aec:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6aee:	d914      	bls.n	d6b1a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d6af0:	4290      	cmp	r0, r2
   d6af2:	d213      	bcs.n	d6b1c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d6af4:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d6af8:	1a6c      	subs	r4, r5, r1
   d6afa:	f1a1 0710 	sub.w	r7, r1, #16
   d6afe:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d6b00:	42af      	cmp	r7, r5
   d6b02:	d018      	beq.n	d6b36 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d6b04:	b11c      	cbz	r4, d6b0e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d6b06:	4629      	mov	r1, r5
   d6b08:	4620      	mov	r0, r4
   d6b0a:	f001 f8a7 	bl	d7c5c <_ZN6StringC1EOS_>
                end->~T();
   d6b0e:	4628      	mov	r0, r5
   d6b10:	f001 f8b4 	bl	d7c7c <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6b14:	3d10      	subs	r5, #16
   d6b16:	3c10      	subs	r4, #16
   d6b18:	e7f2      	b.n	d6b00 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6b1a:	d00c      	beq.n	d6b36 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d6b1c:	42ac      	cmp	r4, r5
   d6b1e:	d00a      	beq.n	d6b36 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d6b20:	b11e      	cbz	r6, d6b2a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d6b22:	4621      	mov	r1, r4
   d6b24:	4630      	mov	r0, r6
   d6b26:	f001 f899 	bl	d7c5c <_ZN6StringC1EOS_>
                p->~T();
   d6b2a:	4620      	mov	r0, r4
   d6b2c:	f001 f8a6 	bl	d7c7c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6b30:	3410      	adds	r4, #16
   d6b32:	3610      	adds	r6, #16
   d6b34:	e7f2      	b.n	d6b1c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d6b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6b38 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6b38:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d6b3a:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6b3c:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d6b3e:	dd0b      	ble.n	d6b58 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6b40:	0130      	lsls	r0, r6, #4
   d6b42:	f7fe f899 	bl	d4c78 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6b46:	4604      	mov	r4, r0
   d6b48:	b170      	cbz	r0, d6b68 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d6b4a:	e895 0006 	ldmia.w	r5, {r1, r2}
   d6b4e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d6b52:	f7ff ffc7 	bl	d6ae4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d6b56:	e000      	b.n	d6b5a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6b58:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6b5a:	6828      	ldr	r0, [r5, #0]
   d6b5c:	f7fe f894 	bl	d4c88 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6b60:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6b62:	60ae      	str	r6, [r5, #8]
        return true;
   d6b64:	2001      	movs	r0, #1
   d6b66:	bd70      	pop	{r4, r5, r6, pc}
    }
   d6b68:	bd70      	pop	{r4, r5, r6, pc}

000d6b6a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d6b6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6b6e:	2300      	movs	r3, #0
   d6b70:	b095      	sub	sp, #84	; 0x54
   d6b72:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d6b74:	2246      	movs	r2, #70	; 0x46
   d6b76:	6003      	str	r3, [r0, #0]
   d6b78:	6043      	str	r3, [r0, #4]
   d6b7a:	6083      	str	r3, [r0, #8]
   d6b7c:	60c3      	str	r3, [r0, #12]
   d6b7e:	6103      	str	r3, [r0, #16]
   d6b80:	6143      	str	r3, [r0, #20]
   d6b82:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d6b84:	9102      	str	r1, [sp, #8]
   d6b86:	f8da 1004 	ldr.w	r1, [sl, #4]
   d6b8a:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d6b8c:	4299      	cmp	r1, r3
   d6b8e:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6b90:	9309      	str	r3, [sp, #36]	; 0x24
   d6b92:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d6b94:	f340 809d 	ble.w	d6cd2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d6b98:	a808      	add	r0, sp, #32
   d6b9a:	f7ff ffcd 	bl	d6b38 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d6b9e:	2800      	cmp	r0, #0
   d6ba0:	f040 8097 	bne.w	d6cd2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d6ba4:	e08e      	b.n	d6cc4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d6ba6:	4621      	mov	r1, r4
   d6ba8:	a80b      	add	r0, sp, #44	; 0x2c
   d6baa:	f001 f857 	bl	d7c5c <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6bae:	a90b      	add	r1, sp, #44	; 0x2c
   d6bb0:	a80f      	add	r0, sp, #60	; 0x3c
   d6bb2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d6bb4:	f001 f852 	bl	d7c5c <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6bb8:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6bbc:	4299      	cmp	r1, r3
   d6bbe:	f2c0 80ce 	blt.w	d6d5e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d6bc2:	3101      	adds	r1, #1
   d6bc4:	a808      	add	r0, sp, #32
   d6bc6:	f7ff ffb7 	bl	d6b38 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d6bca:	2800      	cmp	r0, #0
   d6bcc:	f040 80c7 	bne.w	d6d5e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6bd0:	a80f      	add	r0, sp, #60	; 0x3c
   d6bd2:	f001 f853 	bl	d7c7c <_ZN6StringD1Ev>
   d6bd6:	a80b      	add	r0, sp, #44	; 0x2c
   d6bd8:	f001 f850 	bl	d7c7c <_ZN6StringD1Ev>
   d6bdc:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d6bde:	42a7      	cmp	r7, r4
   d6be0:	d1e1      	bne.n	d6ba6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6be2:	2600      	movs	r6, #0
   d6be4:	960b      	str	r6, [sp, #44]	; 0x2c
   d6be6:	960c      	str	r6, [sp, #48]	; 0x30
   d6be8:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d6bea:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d6bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d6bee:	429e      	cmp	r6, r3
   d6bf0:	f280 80a8 	bge.w	d6d44 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d6bf4:	0133      	lsls	r3, r6, #4
   d6bf6:	9a08      	ldr	r2, [sp, #32]
   d6bf8:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d6bfa:	9306      	str	r3, [sp, #24]
        if (!category) {
   d6bfc:	2b00      	cmp	r3, #0
   d6bfe:	f000 809f 	beq.w	d6d40 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d6c02:	2314      	movs	r3, #20
   d6c04:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d6c06:	f8cd 901c 	str.w	r9, [sp, #28]
   d6c0a:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d6c0c:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6c0e:	a907      	add	r1, sp, #28
   d6c10:	a806      	add	r0, sp, #24
   d6c12:	f7ff fb2c 	bl	d626e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d6c16:	4607      	mov	r7, r0
   d6c18:	2800      	cmp	r0, #0
   d6c1a:	f000 8091 	beq.w	d6d40 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d6c1e:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d6c20:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d6c22:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d6c26:	9a07      	ldr	r2, [sp, #28]
   d6c28:	4620      	mov	r0, r4
   d6c2a:	f7ff fb8d 	bl	d6348 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6c2e:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d6c32:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6c34:	f1b8 0f00 	cmp.w	r8, #0
   d6c38:	d153      	bne.n	d6ce2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d6c3a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d6c3e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d6c42:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6c46:	970f      	str	r7, [sp, #60]	; 0x3c
   d6c48:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d6c4c:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d6c50:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d6c54:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6c58:	6867      	ldr	r7, [r4, #4]
   d6c5a:	68a3      	ldr	r3, [r4, #8]
   d6c5c:	429f      	cmp	r7, r3
   d6c5e:	da4f      	bge.n	d6d00 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d6c60:	9b00      	ldr	r3, [sp, #0]
   d6c62:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d6c66:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6c68:	2214      	movs	r2, #20
   d6c6a:	4353      	muls	r3, r2
   d6c6c:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d6c70:	fb02 b201 	mla	r2, r2, r1, fp
   d6c74:	f107 0014 	add.w	r0, r7, #20
   d6c78:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6c7a:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d6c7c:	f7ff fe94 	bl	d69a8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d6c80:	b1a7      	cbz	r7, d6cac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d6c82:	9b03      	ldr	r3, [sp, #12]
   d6c84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d6c86:	f84b 2003 	str.w	r2, [fp, r3]
   d6c8a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d6c8e:	80bb      	strh	r3, [r7, #4]
   d6c90:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d6c94:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6c96:	f8c7 9008 	str.w	r9, [r7, #8]
   d6c9a:	f8c7 900c 	str.w	r9, [r7, #12]
   d6c9e:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6ca2:	a911      	add	r1, sp, #68	; 0x44
   d6ca4:	f107 0008 	add.w	r0, r7, #8
   d6ca8:	f7ff fe67 	bl	d697a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d6cac:	6863      	ldr	r3, [r4, #4]
   d6cae:	3301      	adds	r3, #1
   d6cb0:	6063      	str	r3, [r4, #4]
   d6cb2:	a811      	add	r0, sp, #68	; 0x44
   d6cb4:	f7ff fcd2 	bl	d665c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6cb8:	f1b8 0f00 	cmp.w	r8, #0
   d6cbc:	d011      	beq.n	d6ce2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d6cbe:	a80b      	add	r0, sp, #44	; 0x2c
   d6cc0:	f7ff fccc 	bl	d665c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d6cc4:	a808      	add	r0, sp, #32
   d6cc6:	f7ff fcdd 	bl	d6684 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d6cca:	4628      	mov	r0, r5
   d6ccc:	b015      	add	sp, #84	; 0x54
   d6cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6cd2:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6cd6:	f8da 3004 	ldr.w	r3, [sl, #4]
   d6cda:	2714      	movs	r7, #20
   d6cdc:	fb07 4703 	mla	r7, r7, r3, r4
   d6ce0:	e77d      	b.n	d6bde <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d6ce2:	6823      	ldr	r3, [r4, #0]
   d6ce4:	9a00      	ldr	r2, [sp, #0]
   d6ce6:	2414      	movs	r4, #20
   d6ce8:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d6cec:	9b06      	ldr	r3, [sp, #24]
   d6cee:	781b      	ldrb	r3, [r3, #0]
   d6cf0:	bb23      	cbnz	r3, d6d3c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d6cf2:	f8da 3000 	ldr.w	r3, [sl]
   d6cf6:	9a01      	ldr	r2, [sp, #4]
   d6cf8:	4413      	add	r3, r2
   d6cfa:	7c1b      	ldrb	r3, [r3, #16]
   d6cfc:	80e3      	strh	r3, [r4, #6]
   d6cfe:	e01d      	b.n	d6d3c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6d00:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d6d02:	2f00      	cmp	r7, #0
   d6d04:	dd0f      	ble.n	d6d26 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6d06:	2314      	movs	r3, #20
   d6d08:	fb03 f007 	mul.w	r0, r3, r7
   d6d0c:	9303      	str	r3, [sp, #12]
   d6d0e:	f7fd ffb3 	bl	d4c78 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6d12:	4683      	mov	fp, r0
   d6d14:	b178      	cbz	r0, d6d36 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d6d16:	e894 0006 	ldmia.w	r4, {r1, r2}
   d6d1a:	9b03      	ldr	r3, [sp, #12]
   d6d1c:	fb03 1202 	mla	r2, r3, r2, r1
   d6d20:	f7ff fe42 	bl	d69a8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d6d24:	e000      	b.n	d6d28 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6d26:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6d28:	6820      	ldr	r0, [r4, #0]
   d6d2a:	f7fd ffad 	bl	d4c88 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6d2e:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d6d32:	60a7      	str	r7, [r4, #8]
   d6d34:	e794      	b.n	d6c60 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6d36:	f04f 0801 	mov.w	r8, #1
   d6d3a:	e7ba      	b.n	d6cb2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d6d3c:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6d3e:	e766      	b.n	d6c0e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d6d40:	3601      	adds	r6, #1
   d6d42:	e753      	b.n	d6bec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d6d44:	a908      	add	r1, sp, #32
   d6d46:	4628      	mov	r0, r5
   d6d48:	f7ff fe17 	bl	d697a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d6d4c:	a90b      	add	r1, sp, #44	; 0x2c
   d6d4e:	f105 000c 	add.w	r0, r5, #12
   d6d52:	f7ff fe12 	bl	d697a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d6d56:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d6d5a:	762b      	strb	r3, [r5, #24]
   d6d5c:	e7af      	b.n	d6cbe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6d5e:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d6d60:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6d62:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d6d66:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d6d6a:	4631      	mov	r1, r6
   d6d6c:	f106 0010 	add.w	r0, r6, #16
   d6d70:	f7ff feb8 	bl	d6ae4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d6d74:	b11e      	cbz	r6, d6d7e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d6d76:	a90f      	add	r1, sp, #60	; 0x3c
   d6d78:	4630      	mov	r0, r6
   d6d7a:	f000 ff6f 	bl	d7c5c <_ZN6StringC1EOS_>
    ++size_;
   d6d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d6d80:	3301      	adds	r3, #1
   d6d82:	9309      	str	r3, [sp, #36]	; 0x24
   d6d84:	e724      	b.n	d6bd0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d6d88 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d6d88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d6d8a:	4604      	mov	r4, r0
   d6d8c:	4b09      	ldr	r3, [pc, #36]	; (d6db4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d6d8e:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d6d92:	4605      	mov	r5, r0
   d6d94:	460e      	mov	r6, r1
        filter_(level, filters) {
   d6d96:	a801      	add	r0, sp, #4
   d6d98:	4611      	mov	r1, r2
   d6d9a:	f7fd fc1d 	bl	d45d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6d9e:	aa01      	add	r2, sp, #4
   d6da0:	4631      	mov	r1, r6
   d6da2:	4620      	mov	r0, r4
   d6da4:	f7ff fee1 	bl	d6b6a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6da8:	a801      	add	r0, sp, #4
   d6daa:	f7fd fabb 	bl	d4324 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d6dae:	4628      	mov	r0, r5
   d6db0:	b004      	add	sp, #16
   d6db2:	bd70      	pop	{r4, r5, r6, pc}
   d6db4:	000d8f00 	.word	0x000d8f00

000d6db8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d6db8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6dba:	460f      	mov	r7, r1
   d6dbc:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6dbe:	492b      	ldr	r1, [pc, #172]	; (d6e6c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d6dc0:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6dc2:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d6dc4:	4616      	mov	r6, r2
   d6dc6:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6dc8:	f001 ffae 	bl	d8d28 <strcmp>
   d6dcc:	bb28      	cbnz	r0, d6e1a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d6dce:	2c00      	cmp	r4, #0
   d6dd0:	d049      	beq.n	d6e66 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d6dd2:	4629      	mov	r1, r5
   d6dd4:	a801      	add	r0, sp, #4
   d6dd6:	f7ff fddd 	bl	d6994 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d6dda:	4925      	ldr	r1, [pc, #148]	; (d6e70 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d6ddc:	2024      	movs	r0, #36	; 0x24
   d6dde:	f001 fdb7 	bl	d8950 <_ZnwjRKSt9nothrow_t>
   d6de2:	4605      	mov	r5, r0
   d6de4:	b1b8      	cbz	r0, d6e16 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d6de6:	a901      	add	r1, sp, #4
   d6de8:	a804      	add	r0, sp, #16
   d6dea:	f7ff fdd3 	bl	d6994 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d6dee:	a904      	add	r1, sp, #16
   d6df0:	a807      	add	r0, sp, #28
   d6df2:	f7fd fbf1 	bl	d45d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6df6:	aa07      	add	r2, sp, #28
   d6df8:	4631      	mov	r1, r6
   d6dfa:	4628      	mov	r0, r5
   d6dfc:	f7ff ffc4 	bl	d6d88 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6e00:	a807      	add	r0, sp, #28
   d6e02:	f7fd fa8f 	bl	d4324 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6e06:	4b1b      	ldr	r3, [pc, #108]	; (d6e74 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d6e08:	602b      	str	r3, [r5, #0]
   d6e0a:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d6e0c:	a804      	add	r0, sp, #16
   d6e0e:	f7fd fa89 	bl	d4324 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6e12:	4b19      	ldr	r3, [pc, #100]	; (d6e78 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d6e14:	602b      	str	r3, [r5, #0]
   d6e16:	a801      	add	r0, sp, #4
   d6e18:	e01f      	b.n	d6e5a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d6e1a:	4918      	ldr	r1, [pc, #96]	; (d6e7c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d6e1c:	4638      	mov	r0, r7
   d6e1e:	f001 ff83 	bl	d8d28 <strcmp>
   d6e22:	b9f0      	cbnz	r0, d6e62 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d6e24:	b1fc      	cbz	r4, d6e66 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d6e26:	4629      	mov	r1, r5
   d6e28:	a804      	add	r0, sp, #16
   d6e2a:	f7ff fdb3 	bl	d6994 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d6e2e:	4910      	ldr	r1, [pc, #64]	; (d6e70 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d6e30:	2024      	movs	r0, #36	; 0x24
   d6e32:	f001 fd8d 	bl	d8950 <_ZnwjRKSt9nothrow_t>
   d6e36:	4605      	mov	r5, r0
   d6e38:	b170      	cbz	r0, d6e58 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d6e3a:	a904      	add	r1, sp, #16
   d6e3c:	a807      	add	r0, sp, #28
   d6e3e:	f7fd fbcb 	bl	d45d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6e42:	aa07      	add	r2, sp, #28
   d6e44:	4631      	mov	r1, r6
   d6e46:	4628      	mov	r0, r5
   d6e48:	f7ff ff9e 	bl	d6d88 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6e4c:	a807      	add	r0, sp, #28
   d6e4e:	f7fd fa69 	bl	d4324 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6e52:	4b08      	ldr	r3, [pc, #32]	; (d6e74 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d6e54:	602b      	str	r3, [r5, #0]
   d6e56:	622c      	str	r4, [r5, #32]
   d6e58:	a804      	add	r0, sp, #16
   d6e5a:	f7fd fa63 	bl	d4324 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6e5e:	4628      	mov	r0, r5
   d6e60:	e002      	b.n	d6e68 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d6e62:	2000      	movs	r0, #0
   d6e64:	e000      	b.n	d6e68 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d6e66:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d6e68:	b00b      	add	sp, #44	; 0x2c
   d6e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6e6c:	000d9336 	.word	0x000d9336
   d6e70:	000d95dc 	.word	0x000d95dc
   d6e74:	000d93bc 	.word	0x000d93bc
   d6e78:	000d92c8 	.word	0x000d92c8
   d6e7c:	000d933a 	.word	0x000d933a

000d6e80 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6e80:	4b01      	ldr	r3, [pc, #4]	; (d6e88 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6e82:	4a02      	ldr	r2, [pc, #8]	; (d6e8c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6e84:	601a      	str	r2, [r3, #0]
   d6e86:	4770      	bx	lr
   d6e88:	2003e400 	.word	0x2003e400
   d6e8c:	000d934b 	.word	0x000d934b

000d6e90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6e94:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d6e96:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6e9a:	4604      	mov	r4, r0
   d6e9c:	460e      	mov	r6, r1
   d6e9e:	4617      	mov	r7, r2
   d6ea0:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d6ea2:	f001 fc59 	bl	d8758 <_Z16_fetch_usbserialv>
   d6ea6:	4581      	cmp	r9, r0
   d6ea8:	d105      	bne.n	d6eb6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   d6eaa:	485a      	ldr	r0, [pc, #360]	; (d7014 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d6eac:	f000 fd93 	bl	d79d6 <_ZN5spark12NetworkClass9listeningEv>
   d6eb0:	2800      	cmp	r0, #0
   d6eb2:	f040 80ac 	bne.w	d700e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d6eb6:	792b      	ldrb	r3, [r5, #4]
   d6eb8:	071b      	lsls	r3, r3, #28
   d6eba:	d505      	bpl.n	d6ec8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d6ebc:	696b      	ldr	r3, [r5, #20]
   d6ebe:	4a56      	ldr	r2, [pc, #344]	; (d7018 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d6ec0:	6a20      	ldr	r0, [r4, #32]
   d6ec2:	2100      	movs	r1, #0
   d6ec4:	f000 fe51 	bl	d7b6a <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d6ec8:	f1b8 0f00 	cmp.w	r8, #0
   d6ecc:	d00d      	beq.n	d6eea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   d6ece:	215b      	movs	r1, #91	; 0x5b
   d6ed0:	4620      	mov	r0, r4
   d6ed2:	f7ff fa2e 	bl	d6332 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d6ed6:	4641      	mov	r1, r8
   d6ed8:	4620      	mov	r0, r4
   d6eda:	f7ff fa1c 	bl	d6316 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d6ede:	6823      	ldr	r3, [r4, #0]
   d6ee0:	494e      	ldr	r1, [pc, #312]	; (d701c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d6ee2:	68db      	ldr	r3, [r3, #12]
   d6ee4:	2202      	movs	r2, #2
   d6ee6:	4620      	mov	r0, r4
   d6ee8:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d6eea:	792b      	ldrb	r3, [r5, #4]
   d6eec:	07d9      	lsls	r1, r3, #31
   d6eee:	d525      	bpl.n	d6f3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   d6ef0:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d6ef4:	212f      	movs	r1, #47	; 0x2f
   d6ef6:	4640      	mov	r0, r8
   d6ef8:	f001 ff51 	bl	d8d9e <strrchr>
    if (s1) {
   d6efc:	b108      	cbz	r0, d6f02 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   d6efe:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d6f02:	4641      	mov	r1, r8
   d6f04:	4620      	mov	r0, r4
   d6f06:	f7ff fa06 	bl	d6316 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d6f0a:	792b      	ldrb	r3, [r5, #4]
   d6f0c:	079a      	lsls	r2, r3, #30
   d6f0e:	d509      	bpl.n	d6f24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   d6f10:	213a      	movs	r1, #58	; 0x3a
   d6f12:	4620      	mov	r0, r4
   d6f14:	f7ff fa0d 	bl	d6332 <_ZN5spark16StreamLogHandler5writeEc>
   d6f18:	68eb      	ldr	r3, [r5, #12]
   d6f1a:	4a41      	ldr	r2, [pc, #260]	; (d7020 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d6f1c:	6a20      	ldr	r0, [r4, #32]
   d6f1e:	2100      	movs	r1, #0
   d6f20:	f000 fe23 	bl	d7b6a <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d6f24:	792b      	ldrb	r3, [r5, #4]
   d6f26:	f013 0f04 	tst.w	r3, #4
   d6f2a:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d6f2c:	bf18      	it	ne
   d6f2e:	493d      	ldrne	r1, [pc, #244]	; (d7024 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d6f30:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d6f32:	bf08      	it	eq
   d6f34:	493c      	ldreq	r1, [pc, #240]	; (d7028 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d6f36:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d6f38:	4620      	mov	r0, r4
   d6f3a:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d6f3c:	792b      	ldrb	r3, [r5, #4]
   d6f3e:	075b      	lsls	r3, r3, #29
   d6f40:	d518      	bpl.n	d6f74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d6f42:	6929      	ldr	r1, [r5, #16]
   d6f44:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d6f46:	4613      	mov	r3, r2
   d6f48:	f813 0b01 	ldrb.w	r0, [r3], #1
   d6f4c:	b138      	cbz	r0, d6f5e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   d6f4e:	2820      	cmp	r0, #32
   d6f50:	d101      	bne.n	d6f56 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d6f52:	4619      	mov	r1, r3
   d6f54:	e001      	b.n	d6f5a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   d6f56:	2828      	cmp	r0, #40	; 0x28
   d6f58:	d001      	beq.n	d6f5e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6f5a:	461a      	mov	r2, r3
   d6f5c:	e7f3      	b.n	d6f46 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d6f5e:	6823      	ldr	r3, [r4, #0]
   d6f60:	1a52      	subs	r2, r2, r1
   d6f62:	68db      	ldr	r3, [r3, #12]
   d6f64:	4620      	mov	r0, r4
   d6f66:	4798      	blx	r3
        write("(): ", 4);
   d6f68:	6823      	ldr	r3, [r4, #0]
   d6f6a:	4930      	ldr	r1, [pc, #192]	; (d702c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d6f6c:	68db      	ldr	r3, [r3, #12]
   d6f6e:	2204      	movs	r2, #4
   d6f70:	4620      	mov	r0, r4
   d6f72:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d6f74:	2100      	movs	r1, #0
   d6f76:	4638      	mov	r0, r7
   d6f78:	f7fd fde0 	bl	d4b3c <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d6f7c:	4601      	mov	r1, r0
   d6f7e:	4620      	mov	r0, r4
   d6f80:	f7ff f9c9 	bl	d6316 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d6f84:	6823      	ldr	r3, [r4, #0]
   d6f86:	4928      	ldr	r1, [pc, #160]	; (d7028 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d6f88:	68db      	ldr	r3, [r3, #12]
   d6f8a:	2202      	movs	r2, #2
   d6f8c:	4620      	mov	r0, r4
   d6f8e:	4798      	blx	r3
    // Message
    if (msg) {
   d6f90:	b11e      	cbz	r6, d6f9a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   d6f92:	4631      	mov	r1, r6
   d6f94:	4620      	mov	r0, r4
   d6f96:	f7ff f9be 	bl	d6316 <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d6f9a:	792b      	ldrb	r3, [r5, #4]
   d6f9c:	f013 0f30 	tst.w	r3, #48	; 0x30
   d6fa0:	d02d      	beq.n	d6ffe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   d6fa2:	6823      	ldr	r3, [r4, #0]
   d6fa4:	4922      	ldr	r1, [pc, #136]	; (d7030 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d6fa6:	68db      	ldr	r3, [r3, #12]
   d6fa8:	4620      	mov	r0, r4
   d6faa:	2202      	movs	r2, #2
   d6fac:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d6fae:	792b      	ldrb	r3, [r5, #4]
   d6fb0:	06d8      	lsls	r0, r3, #27
   d6fb2:	d50b      	bpl.n	d6fcc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   d6fb4:	6823      	ldr	r3, [r4, #0]
   d6fb6:	491f      	ldr	r1, [pc, #124]	; (d7034 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d6fb8:	68db      	ldr	r3, [r3, #12]
   d6fba:	2207      	movs	r2, #7
   d6fbc:	4620      	mov	r0, r4
   d6fbe:	4798      	blx	r3
   d6fc0:	69ab      	ldr	r3, [r5, #24]
   d6fc2:	4a1d      	ldr	r2, [pc, #116]	; (d7038 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d6fc4:	6a20      	ldr	r0, [r4, #32]
   d6fc6:	2100      	movs	r1, #0
   d6fc8:	f000 fdcf 	bl	d7b6a <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d6fcc:	792b      	ldrb	r3, [r5, #4]
   d6fce:	0699      	lsls	r1, r3, #26
   d6fd0:	d511      	bpl.n	d6ff6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   d6fd2:	06da      	lsls	r2, r3, #27
   d6fd4:	d505      	bpl.n	d6fe2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   d6fd6:	6823      	ldr	r3, [r4, #0]
   d6fd8:	4912      	ldr	r1, [pc, #72]	; (d7024 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d6fda:	68db      	ldr	r3, [r3, #12]
   d6fdc:	2202      	movs	r2, #2
   d6fde:	4620      	mov	r0, r4
   d6fe0:	4798      	blx	r3
            }
            write("details = ", 10);
   d6fe2:	6823      	ldr	r3, [r4, #0]
   d6fe4:	4915      	ldr	r1, [pc, #84]	; (d703c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   d6fe6:	68db      	ldr	r3, [r3, #12]
   d6fe8:	4620      	mov	r0, r4
   d6fea:	220a      	movs	r2, #10
   d6fec:	4798      	blx	r3
            write(attr.details);
   d6fee:	69e9      	ldr	r1, [r5, #28]
   d6ff0:	4620      	mov	r0, r4
   d6ff2:	f7ff f990 	bl	d6316 <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d6ff6:	215d      	movs	r1, #93	; 0x5d
   d6ff8:	4620      	mov	r0, r4
   d6ffa:	f7ff f99a 	bl	d6332 <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d6ffe:	6823      	ldr	r3, [r4, #0]
   d7000:	490f      	ldr	r1, [pc, #60]	; (d7040 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   d7002:	68db      	ldr	r3, [r3, #12]
   d7004:	4620      	mov	r0, r4
   d7006:	2202      	movs	r2, #2
}
   d7008:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d700c:	4718      	bx	r3
   d700e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7012:	bf00      	nop
   d7014:	2003e5d8 	.word	0x2003e5d8
   d7018:	000d934f 	.word	0x000d934f
   d701c:	000d9356 	.word	0x000d9356
   d7020:	000d8f7c 	.word	0x000d8f7c
   d7024:	000d9359 	.word	0x000d9359
   d7028:	000d935e 	.word	0x000d935e
   d702c:	000d935c 	.word	0x000d935c
   d7030:	000d9361 	.word	0x000d9361
   d7034:	000d9364 	.word	0x000d9364
   d7038:	000d936c 	.word	0x000d936c
   d703c:	000d936f 	.word	0x000d936f
   d7040:	000d937a 	.word	0x000d937a

000d7044 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7048:	b085      	sub	sp, #20
   d704a:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d704e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d7050:	4606      	mov	r6, r0
   d7052:	460f      	mov	r7, r1
   d7054:	4691      	mov	r9, r2
   d7056:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   d7058:	f001 fb7e 	bl	d8758 <_Z16_fetch_usbserialv>
   d705c:	4580      	cmp	r8, r0
   d705e:	d105      	bne.n	d706c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d7060:	484a      	ldr	r0, [pc, #296]	; (d718c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d7062:	f000 fcb8 	bl	d79d6 <_ZN5spark12NetworkClass9listeningEv>
   d7066:	2800      	cmp	r0, #0
   d7068:	f040 808c 	bne.w	d7184 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   d706c:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d706e:	4a48      	ldr	r2, [pc, #288]	; (d7190 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d7070:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d7072:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d7076:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d7078:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d707a:	f88d 8008 	strb.w	r8, [sp, #8]
   d707e:	f7fe ffec 	bl	d605a <_ZN5spark10JSONWriter11beginObjectEv>
   d7082:	4641      	mov	r1, r8
   d7084:	4648      	mov	r0, r9
   d7086:	f7fd fd59 	bl	d4b3c <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d708a:	4942      	ldr	r1, [pc, #264]	; (d7194 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d708c:	4680      	mov	r8, r0
   d708e:	2201      	movs	r2, #1
   d7090:	a801      	add	r0, sp, #4
   d7092:	f7ff f867 	bl	d6164 <_ZN5spark10JSONWriter4nameEPKcj>
   d7096:	4641      	mov	r1, r8
   d7098:	f7ff f92d 	bl	d62f6 <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d709c:	b13f      	cbz	r7, d70ae <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d709e:	493e      	ldr	r1, [pc, #248]	; (d7198 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d70a0:	2201      	movs	r2, #1
   d70a2:	a801      	add	r0, sp, #4
   d70a4:	f7ff f85e 	bl	d6164 <_ZN5spark10JSONWriter4nameEPKcj>
   d70a8:	4639      	mov	r1, r7
   d70aa:	f7ff f924 	bl	d62f6 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d70ae:	b13d      	cbz	r5, d70c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d70b0:	493a      	ldr	r1, [pc, #232]	; (d719c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d70b2:	2201      	movs	r2, #1
   d70b4:	a801      	add	r0, sp, #4
   d70b6:	f7ff f855 	bl	d6164 <_ZN5spark10JSONWriter4nameEPKcj>
   d70ba:	4629      	mov	r1, r5
   d70bc:	f7ff f91b 	bl	d62f6 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d70c0:	7923      	ldrb	r3, [r4, #4]
   d70c2:	07df      	lsls	r7, r3, #31
   d70c4:	d50e      	bpl.n	d70e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d70c6:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d70c8:	212f      	movs	r1, #47	; 0x2f
   d70ca:	4628      	mov	r0, r5
   d70cc:	f001 fe67 	bl	d8d9e <strrchr>
    if (s1) {
   d70d0:	b100      	cbz	r0, d70d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d70d2:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d70d4:	4932      	ldr	r1, [pc, #200]	; (d71a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d70d6:	2201      	movs	r2, #1
   d70d8:	a801      	add	r0, sp, #4
   d70da:	f7ff f843 	bl	d6164 <_ZN5spark10JSONWriter4nameEPKcj>
   d70de:	4629      	mov	r1, r5
   d70e0:	f7ff f909 	bl	d62f6 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d70e4:	7923      	ldrb	r3, [r4, #4]
   d70e6:	079d      	lsls	r5, r3, #30
   d70e8:	d507      	bpl.n	d70fa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d70ea:	492e      	ldr	r1, [pc, #184]	; (d71a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d70ec:	2202      	movs	r2, #2
   d70ee:	a801      	add	r0, sp, #4
   d70f0:	f7ff f838 	bl	d6164 <_ZN5spark10JSONWriter4nameEPKcj>
   d70f4:	68e1      	ldr	r1, [r4, #12]
   d70f6:	f7fe ffbd 	bl	d6074 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d70fa:	7923      	ldrb	r3, [r4, #4]
   d70fc:	0758      	lsls	r0, r3, #29
   d70fe:	d516      	bpl.n	d712e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d7100:	6925      	ldr	r5, [r4, #16]
   d7102:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d7104:	463b      	mov	r3, r7
   d7106:	f813 2b01 	ldrb.w	r2, [r3], #1
   d710a:	b13a      	cbz	r2, d711c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   d710c:	2a20      	cmp	r2, #32
   d710e:	d101      	bne.n	d7114 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d7110:	461d      	mov	r5, r3
   d7112:	e001      	b.n	d7118 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   d7114:	2a28      	cmp	r2, #40	; 0x28
   d7116:	d001      	beq.n	d711c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7118:	461f      	mov	r7, r3
   d711a:	e7f3      	b.n	d7104 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d711c:	2202      	movs	r2, #2
   d711e:	4922      	ldr	r1, [pc, #136]	; (d71a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d7120:	a801      	add	r0, sp, #4
   d7122:	f7ff f81f 	bl	d6164 <_ZN5spark10JSONWriter4nameEPKcj>
   d7126:	1b7a      	subs	r2, r7, r5
   d7128:	4629      	mov	r1, r5
   d712a:	f7ff f82a 	bl	d6182 <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d712e:	7923      	ldrb	r3, [r4, #4]
   d7130:	0719      	lsls	r1, r3, #28
   d7132:	d507      	bpl.n	d7144 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   d7134:	491d      	ldr	r1, [pc, #116]	; (d71ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d7136:	2201      	movs	r2, #1
   d7138:	a801      	add	r0, sp, #4
   d713a:	f7ff f813 	bl	d6164 <_ZN5spark10JSONWriter4nameEPKcj>
   d713e:	6961      	ldr	r1, [r4, #20]
   d7140:	f7fe ffaa 	bl	d6098 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d7144:	7923      	ldrb	r3, [r4, #4]
   d7146:	06da      	lsls	r2, r3, #27
   d7148:	d508      	bpl.n	d715c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   d714a:	2204      	movs	r2, #4
   d714c:	4918      	ldr	r1, [pc, #96]	; (d71b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d714e:	eb0d 0002 	add.w	r0, sp, r2
   d7152:	f7ff f807 	bl	d6164 <_ZN5spark10JSONWriter4nameEPKcj>
   d7156:	69a1      	ldr	r1, [r4, #24]
   d7158:	f7fe ff8c 	bl	d6074 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d715c:	7923      	ldrb	r3, [r4, #4]
   d715e:	069b      	lsls	r3, r3, #26
   d7160:	d507      	bpl.n	d7172 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   d7162:	4914      	ldr	r1, [pc, #80]	; (d71b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d7164:	2206      	movs	r2, #6
   d7166:	a801      	add	r0, sp, #4
   d7168:	f7fe fffc 	bl	d6164 <_ZN5spark10JSONWriter4nameEPKcj>
   d716c:	69e1      	ldr	r1, [r4, #28]
   d716e:	f7ff f8c2 	bl	d62f6 <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d7172:	a801      	add	r0, sp, #4
   d7174:	f7fe ff5b 	bl	d602e <_ZN5spark10JSONWriter9endObjectEv>
   d7178:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d717a:	490f      	ldr	r1, [pc, #60]	; (d71b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d717c:	6803      	ldr	r3, [r0, #0]
   d717e:	2202      	movs	r2, #2
   d7180:	68db      	ldr	r3, [r3, #12]
   d7182:	4798      	blx	r3
}
   d7184:	b005      	add	sp, #20
   d7186:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d718a:	bf00      	nop
   d718c:	2003e5d8 	.word	0x2003e5d8
   d7190:	000d92b0 	.word	0x000d92b0
   d7194:	000d92e2 	.word	0x000d92e2
   d7198:	000d92f5 	.word	0x000d92f5
   d719c:	000d93ae 	.word	0x000d93ae
   d71a0:	000d9296 	.word	0x000d9296
   d71a4:	000d937d 	.word	0x000d937d
   d71a8:	000d9380 	.word	0x000d9380
   d71ac:	000d930a 	.word	0x000d930a
   d71b0:	000d9383 	.word	0x000d9383
   d71b4:	000d9388 	.word	0x000d9388
   d71b8:	000d937a 	.word	0x000d937a

000d71bc <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d71bc:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d71be:	2301      	movs	r3, #1
   d71c0:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d71c2:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d71c4:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   d71c6:	b10b      	cbz	r3, d71cc <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
   d71c8:	68c0      	ldr	r0, [r0, #12]
   d71ca:	e006      	b.n	d71da <_ZN6Thread3runEPv+0x1e>
   d71cc:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d71ce:	b128      	cbz	r0, d71dc <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d71d0:	6883      	ldr	r3, [r0, #8]
   d71d2:	b90b      	cbnz	r3, d71d8 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
   d71d4:	f001 fbcd 	bl	d8972 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d71d8:	68c3      	ldr	r3, [r0, #12]
   d71da:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   d71dc:	2301      	movs	r3, #1
   d71de:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d71e0:	2000      	movs	r0, #0
    }
   d71e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   d71e6:	f7fd bb21 	b.w	d482c <os_thread_exit>

000d71ea <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d71ea:	2200      	movs	r2, #0
   d71ec:	4611      	mov	r1, r2
   d71ee:	6840      	ldr	r0, [r0, #4]
   d71f0:	f7fd bd2a 	b.w	d4c48 <network_listening>

000d71f4 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d71f4:	2200      	movs	r2, #0
   d71f6:	4611      	mov	r1, r2
   d71f8:	6840      	ldr	r0, [r0, #4]
   d71fa:	f7fd bd35 	b.w	d4c68 <network_get_listen_timeout>

000d71fe <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d71fe:	2200      	movs	r2, #0
   d7200:	6840      	ldr	r0, [r0, #4]
   d7202:	f7fd bd29 	b.w	d4c58 <network_set_listen_timeout>

000d7206 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7206:	2200      	movs	r2, #0
   d7208:	f081 0101 	eor.w	r1, r1, #1
   d720c:	6840      	ldr	r0, [r0, #4]
   d720e:	f7fd bd13 	b.w	d4c38 <network_listen>

000d7212 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d7212:	2300      	movs	r3, #0
   d7214:	461a      	mov	r2, r3
   d7216:	2101      	movs	r1, #1
   d7218:	6840      	ldr	r0, [r0, #4]
   d721a:	f7fd bd05 	b.w	d4c28 <network_off>

000d721e <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d721e:	2300      	movs	r3, #0
   d7220:	461a      	mov	r2, r3
   d7222:	4619      	mov	r1, r3
   d7224:	6840      	ldr	r0, [r0, #4]
   d7226:	f7fd bcf7 	b.w	d4c18 <network_on>

000d722a <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d722a:	2200      	movs	r2, #0
   d722c:	4611      	mov	r1, r2
   d722e:	6840      	ldr	r0, [r0, #4]
   d7230:	f7fd bcea 	b.w	d4c08 <network_ready>

000d7234 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7234:	2200      	movs	r2, #0
   d7236:	4611      	mov	r1, r2
   d7238:	6840      	ldr	r0, [r0, #4]
   d723a:	f7fd bcd5 	b.w	d4be8 <network_connecting>

000d723e <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d723e:	2200      	movs	r2, #0
   d7240:	2102      	movs	r1, #2
   d7242:	6840      	ldr	r0, [r0, #4]
   d7244:	f7fd bcd8 	b.w	d4bf8 <network_disconnect>

000d7248 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7248:	2300      	movs	r3, #0
   d724a:	461a      	mov	r2, r3
   d724c:	6840      	ldr	r0, [r0, #4]
   d724e:	f7fd bcc3 	b.w	d4bd8 <network_connect>

000d7252 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7252:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7254:	4605      	mov	r5, r0
   d7256:	b188      	cbz	r0, d727c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7258:	6804      	ldr	r4, [r0, #0]
   d725a:	b14c      	cbz	r4, d7270 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d725c:	68a3      	ldr	r3, [r4, #8]
   d725e:	b11b      	cbz	r3, d7268 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7260:	2203      	movs	r2, #3
   d7262:	4621      	mov	r1, r4
   d7264:	4620      	mov	r0, r4
   d7266:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7268:	2110      	movs	r1, #16
   d726a:	4620      	mov	r0, r4
   d726c:	f001 fb65 	bl	d893a <_ZdlPvj>
   d7270:	4628      	mov	r0, r5
   d7272:	2114      	movs	r1, #20
      }
   d7274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7278:	f001 bb5f 	b.w	d893a <_ZdlPvj>
   d727c:	bd38      	pop	{r3, r4, r5, pc}

000d727e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d727e:	b110      	cbz	r0, d7286 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d7280:	6803      	ldr	r3, [r0, #0]
   d7282:	685b      	ldr	r3, [r3, #4]
   d7284:	4718      	bx	r3
   d7286:	4770      	bx	lr

000d7288 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7288:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d728a:	6803      	ldr	r3, [r0, #0]
   d728c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d728e:	b1bb      	cbz	r3, d72c0 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d7290:	6858      	ldr	r0, [r3, #4]
   d7292:	f7fd fa93 	bl	d47bc <os_thread_is_current>
   d7296:	b978      	cbnz	r0, d72b8 <_ZN6ThreadD1Ev+0x30>
   d7298:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d729a:	7c5a      	ldrb	r2, [r3, #17]
   d729c:	b912      	cbnz	r2, d72a4 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d729e:	6858      	ldr	r0, [r3, #4]
   d72a0:	f7fd fa94 	bl	d47cc <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d72a4:	6823      	ldr	r3, [r4, #0]
   d72a6:	6858      	ldr	r0, [r3, #4]
   d72a8:	f7fd fa98 	bl	d47dc <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d72ac:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d72ae:	2300      	movs	r3, #0
   d72b0:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d72b2:	b128      	cbz	r0, d72c0 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d72b4:	f7ff ffcd 	bl	d7252 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d72b8:	6820      	ldr	r0, [r4, #0]
   d72ba:	b108      	cbz	r0, d72c0 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d72bc:	f7ff ffc9 	bl	d7252 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d72c0:	4620      	mov	r0, r4
   d72c2:	bd10      	pop	{r4, pc}

000d72c4 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d72c4:	b538      	push	{r3, r4, r5, lr}
   d72c6:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d72c8:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d72cc:	b108      	cbz	r0, d72d2 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d72ce:	f7fc fee8 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d72d2:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d72d6:	b108      	cbz	r0, d72dc <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d72d8:	f7fd fa90 	bl	d47fc <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d72dc:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d72e0:	b135      	cbz	r5, d72f0 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d72e2:	4628      	mov	r0, r5
   d72e4:	f7ff ffd0 	bl	d7288 <_ZN6ThreadD1Ev>
   d72e8:	2104      	movs	r1, #4
   d72ea:	4628      	mov	r0, r5
   d72ec:	f001 fb25 	bl	d893a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d72f0:	6820      	ldr	r0, [r4, #0]
   d72f2:	b108      	cbz	r0, d72f8 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d72f4:	f7ff ffc3 	bl	d727e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d72f8:	4620      	mov	r0, r4
   d72fa:	bd38      	pop	{r3, r4, r5, pc}

000d72fc <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d72fc:	b510      	push	{r4, lr}
   d72fe:	4b04      	ldr	r3, [pc, #16]	; (d7310 <_ZN5spark9MeshClassD1Ev+0x14>)
   d7300:	4604      	mov	r4, r0
   d7302:	f840 3b08 	str.w	r3, [r0], #8
   d7306:	f7ff ffdd 	bl	d72c4 <_ZN5spark11MeshPublishD1Ev>
   d730a:	4620      	mov	r0, r4
   d730c:	bd10      	pop	{r4, pc}
   d730e:	bf00      	nop
   d7310:	000d9404 	.word	0x000d9404

000d7314 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

namespace spark {

bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d7314:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7318:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   d731a:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   d731e:	4606      	mov	r6, r0
   d7320:	4688      	mov	r8, r1
   d7322:	4691      	mov	r9, r2
   d7324:	469a      	mov	sl, r3
   d7326:	4604      	mov	r4, r0
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d7328:	2500      	movs	r5, #0
    {
        if (event_handlers[i].handler == handler
   d732a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d732c:	454b      	cmp	r3, r9
   d732e:	d129      	bne.n	d7384 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].handler_data == handler_data
   d7330:	6c63      	ldr	r3, [r4, #68]	; 0x44
   d7332:	4553      	cmp	r3, sl
   d7334:	d126      	bne.n	d7384 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].scope == scope)
   d7336:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   d733a:	455b      	cmp	r3, fp
   d733c:	d122      	bne.n	d7384 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d733e:	2140      	movs	r1, #64	; 0x40
   d7340:	4640      	mov	r0, r8
   d7342:	f001 fd20 	bl	d8d86 <strnlen>
            if (!strncmp(event_handlers[i].filter, event_name, FILTER_LEN))
   d7346:	4641      	mov	r1, r8
   d7348:	4602      	mov	r2, r0
   d734a:	4620      	mov	r0, r4
   d734c:	f001 fd06 	bl	d8d5c <strncmp>
   d7350:	b9c0      	cbnz	r0, d7384 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
            {
                const size_t MAX_ID_LEN =
                        sizeof(event_handlers[i].device_id) - 1;
                const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d7352:	b16f      	cbz	r7, d7370 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
   d7354:	210c      	movs	r1, #12
   d7356:	4638      	mov	r0, r7
   d7358:	f001 fd15 	bl	d8d86 <strnlen>
                if (id_len)
   d735c:	4602      	mov	r2, r0
   d735e:	b138      	cbz	r0, d7370 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
                    return !strncmp(event_handlers[i].device_id, id, id_len);
   d7360:	2358      	movs	r3, #88	; 0x58
   d7362:	fb03 6005 	mla	r0, r3, r5, r6
   d7366:	4639      	mov	r1, r7
   d7368:	3049      	adds	r0, #73	; 0x49
   d736a:	f001 fcf7 	bl	d8d5c <strncmp>
   d736e:	e004      	b.n	d737a <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x66>
                else
                    return !event_handlers[i].device_id[0];
   d7370:	2058      	movs	r0, #88	; 0x58
   d7372:	fb00 6505 	mla	r5, r0, r5, r6
   d7376:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
   d737a:	fab0 f080 	clz	r0, r0
   d737e:	0940      	lsrs	r0, r0, #5
   d7380:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d7384:	3501      	adds	r5, #1
   d7386:	2d05      	cmp	r5, #5
   d7388:	f104 0458 	add.w	r4, r4, #88	; 0x58
   d738c:	d1cd      	bne.n	d732a <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x16>
                else
                    return !event_handlers[i].device_id[0];
            }
        }
    }
    return false;
   d738e:	2000      	movs	r0, #0
}
   d7390:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7394 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d7394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7398:	b085      	sub	sp, #20
   d739a:	4607      	mov	r7, r0
   d739c:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d73a0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d73a2:	9601      	str	r6, [sp, #4]
   d73a4:	f8cd a000 	str.w	sl, [sp]
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d73a8:	4689      	mov	r9, r1
   d73aa:	9202      	str	r2, [sp, #8]
   d73ac:	9303      	str	r3, [sp, #12]
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d73ae:	f7ff ffb1 	bl	d7314 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
   d73b2:	2800      	cmp	r0, #0
   d73b4:	d13c      	bne.n	d7430 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9c>
   d73b6:	4604      	mov	r4, r0
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d73b8:	2358      	movs	r3, #88	; 0x58
   d73ba:	fb03 7504 	mla	r5, r3, r4, r7
   d73be:	f8d5 8040 	ldr.w	r8, [r5, #64]	; 0x40
   d73c2:	f1b8 0f00 	cmp.w	r8, #0
   d73c6:	d12e      	bne.n	d7426 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x92>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d73c8:	2140      	movs	r1, #64	; 0x40
   d73ca:	4648      	mov	r0, r9
   d73cc:	f001 fcdb 	bl	d8d86 <strnlen>
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d73d0:	4649      	mov	r1, r9
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d73d2:	4683      	mov	fp, r0
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d73d4:	4602      	mov	r2, r0
   d73d6:	4628      	mov	r0, r5
   d73d8:	f001 fc37 	bl	d8c4a <memcpy>
            memset(event_handlers[i].filter + FILTER_LEN, 0, MAX_FILTER_LEN - FILTER_LEN);
   d73dc:	f1cb 0240 	rsb	r2, fp, #64	; 0x40
   d73e0:	4641      	mov	r1, r8
   d73e2:	eb05 000b 	add.w	r0, r5, fp
   d73e6:	f001 fc56 	bl	d8c96 <memset>
            event_handlers[i].handler = handler;
   d73ea:	9b02      	ldr	r3, [sp, #8]
   d73ec:	642b      	str	r3, [r5, #64]	; 0x40
            event_handlers[i].handler_data = handler_data;
   d73ee:	9b03      	ldr	r3, [sp, #12]
   d73f0:	646b      	str	r3, [r5, #68]	; 0x44
            event_handlers[i].device_id[0] = 0;
   d73f2:	f885 8049 	strb.w	r8, [r5, #73]	; 0x49
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d73f6:	b12e      	cbz	r6, d7404 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
   d73f8:	210c      	movs	r1, #12
   d73fa:	4630      	mov	r0, r6
   d73fc:	f001 fcc3 	bl	d8d86 <strnlen>
   d7400:	4605      	mov	r5, r0
   d7402:	e000      	b.n	d7406 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x72>
   d7404:	4635      	mov	r5, r6
            memcpy(event_handlers[i].device_id, id, id_len);
   d7406:	2058      	movs	r0, #88	; 0x58
   d7408:	4344      	muls	r4, r0
   d740a:	1938      	adds	r0, r7, r4
            event_handlers[i].device_id[id_len] = 0;
   d740c:	443c      	add	r4, r7
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d740e:	462a      	mov	r2, r5
   d7410:	4631      	mov	r1, r6
   d7412:	3049      	adds	r0, #73	; 0x49
            event_handlers[i].device_id[id_len] = 0;
   d7414:	4425      	add	r5, r4
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d7416:	f001 fc18 	bl	d8c4a <memcpy>
            event_handlers[i].device_id[id_len] = 0;
   d741a:	2000      	movs	r0, #0
   d741c:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
            event_handlers[i].scope = scope;
   d7420:	f884 a048 	strb.w	sl, [r4, #72]	; 0x48
   d7424:	e005      	b.n	d7432 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d7426:	3401      	adds	r4, #1
   d7428:	2c05      	cmp	r4, #5
   d742a:	d1c6      	bne.n	d73ba <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x26>
            event_handlers[i].device_id[id_len] = 0;
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
   d742c:	4802      	ldr	r0, [pc, #8]	; (d7438 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0xa4>)
   d742e:	e000      	b.n	d7432 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;
   d7430:	2000      	movs	r0, #0
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
}
   d7432:	b005      	add	sp, #20
   d7434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7438:	fffffefc 	.word	0xfffffefc

000d743c <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>:


int MeshPublish::Subscriptions::add(const char* name, EventHandler handler)
{
   d743c:	b507      	push	{r0, r1, r2, lr}
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
   d743e:	2300      	movs	r3, #0
   d7440:	9301      	str	r3, [sp, #4]
   d7442:	9300      	str	r3, [sp, #0]
   d7444:	f7ff ffa6 	bl	d7394 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
}
   d7448:	b003      	add	sp, #12
   d744a:	f85d fb04 	ldr.w	pc, [sp], #4

000d744e <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>:

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d744e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7452:	4604      	mov	r4, r0
    const size_t event_name_length = strlen(event_name);
   d7454:	4608      	mov	r0, r1
{
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d7456:	460d      	mov	r5, r1
   d7458:	4690      	mov	r8, r2
    const size_t event_name_length = strlen(event_name);
   d745a:	f001 fc77 	bl	d8d4c <strlen>
   d745e:	f504 76dc 	add.w	r6, r4, #440	; 0x1b8
   d7462:	4607      	mov	r7, r0
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d7464:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d7466:	b1ab      	cbz	r3, d7494 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x46>
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d7468:	2140      	movs	r1, #64	; 0x40
   d746a:	4620      	mov	r0, r4
   d746c:	f001 fc8b 	bl	d8d86 <strnlen>

        if (event_name_length < filter_length)
   d7470:	4287      	cmp	r7, r0
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d7472:	4602      	mov	r2, r0

        if (event_name_length < filter_length)
   d7474:	d30b      	bcc.n	d748e <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
            // does not match this filter, try the next event handler
            continue;
        }

        const int cmp = memcmp(event_handlers[i].filter, event_name,
                filter_length);
   d7476:	4629      	mov	r1, r5
   d7478:	4620      	mov	r0, r4
   d747a:	f001 fbd7 	bl	d8c2c <memcmp>
        if (0 == cmp)
   d747e:	b930      	cbnz	r0, d748e <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
        {
            system_invoke_event_handler(sizeof(FilteringEventHandler),
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
   d7480:	9000      	str	r0, [sp, #0]
   d7482:	4643      	mov	r3, r8
   d7484:	462a      	mov	r2, r5
   d7486:	4621      	mov	r1, r4
   d7488:	2058      	movs	r0, #88	; 0x58
   d748a:	f7fd fb8b 	bl	d4ba4 <system_invoke_event_handler>
   d748e:	3458      	adds	r4, #88	; 0x58

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
    const size_t event_name_length = strlen(event_name);
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d7490:	42b4      	cmp	r4, r6
   d7492:	d1e7      	bne.n	d7464 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x16>
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
        }
        // else continue the for loop to try the next handler
    }
}
   d7494:	b002      	add	sp, #8
   d7496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d749c <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d749c:	b530      	push	{r4, r5, lr}
   d749e:	b08d      	sub	sp, #52	; 0x34
   d74a0:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d74a2:	2211      	movs	r2, #17
   d74a4:	2100      	movs	r1, #0
   d74a6:	a801      	add	r0, sp, #4
   d74a8:	f001 fbf5 	bl	d8c96 <memset>
    addr.v = 6;
   d74ac:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d74ae:	aa01      	add	r2, sp, #4
   d74b0:	4909      	ldr	r1, [pc, #36]	; (d74d8 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d74b2:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d74b6:	200a      	movs	r0, #10
   d74b8:	f7fd fa18 	bl	d48ec <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d74bc:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d74be:	a901      	add	r1, sp, #4
   d74c0:	a806      	add	r0, sp, #24
   d74c2:	f7fe fcbb 	bl	d5e3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d74c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d74c8:	3404      	adds	r4, #4
   d74ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d74cc:	682b      	ldr	r3, [r5, #0]
   d74ce:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d74d0:	2000      	movs	r0, #0
   d74d2:	b00d      	add	sp, #52	; 0x34
   d74d4:	bd30      	pop	{r4, r5, pc}
   d74d6:	bf00      	nop
   d74d8:	000d9430 	.word	0x000d9430

000d74dc <_ZN5spark11MeshPublish4pollEv>:
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d74dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d74e0:	4605      	mov	r5, r0
    int result = 0;
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
   d74e2:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d74e6:	b08a      	sub	sp, #40	; 0x28
   d74e8:	4630      	mov	r0, r6
   d74ea:	f7fe ff11 	bl	d6310 <_ZN14RecursiveMutex4lockEv>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d74ee:	682c      	ldr	r4, [r5, #0]
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d74f0:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d74f4:	f7fd f992 	bl	d481c <os_mutex_recursive_unlock>
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
   d74f8:	2c00      	cmp	r4, #0
   d74fa:	d063      	beq.n	d75c4 <_ZN5spark11MeshPublish4pollEv+0xe8>
        if (!buffer_) {
   d74fc:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d7500:	b163      	cbz	r3, d751c <_ZN5spark11MeshPublish4pollEv+0x40>
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
   d7502:	6823      	ldr	r3, [r4, #0]
   d7504:	f8d5 11c4 	ldr.w	r1, [r5, #452]	; 0x1c4
   d7508:	6b1f      	ldr	r7, [r3, #48]	; 0x30
   d750a:	4620      	mov	r0, r4
   d750c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7510:	f44f 629a 	mov.w	r2, #1232	; 0x4d0
   d7514:	47b8      	blx	r7
        if (len > 0) {
   d7516:	1e04      	subs	r4, r0, #0
   d7518:	dc13      	bgt.n	d7542 <_ZN5spark11MeshPublish4pollEv+0x66>
   d751a:	e056      	b.n	d75ca <_ZN5spark11MeshPublish4pollEv+0xee>
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
   d751c:	492d      	ldr	r1, [pc, #180]	; (d75d4 <_ZN5spark11MeshPublish4pollEv+0xf8>)
   d751e:	f44f 609a 	mov.w	r0, #1232	; 0x4d0
   d7522:	f001 fa24 	bl	d896e <_ZnajRKSt9nothrow_t>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7526:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
      __a = _GLIBCXX_MOVE(__b);
   d752a:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != nullptr)
   d752e:	b113      	cbz	r3, d7536 <_ZN5spark11MeshPublish4pollEv+0x5a>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7530:	4618      	mov	r0, r3
   d7532:	f7fc fdb6 	bl	d40a2 <_ZdaPv>
            if (!buffer_) {
   d7536:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d753a:	2b00      	cmp	r3, #0
   d753c:	d1e1      	bne.n	d7502 <_ZN5spark11MeshPublish4pollEv+0x26>
                return SYSTEM_ERROR_NO_MEMORY;
   d753e:	4826      	ldr	r0, [pc, #152]	; (d75d8 <_ZN5spark11MeshPublish4pollEv+0xfc>)
   d7540:	e044      	b.n	d75cc <_ZN5spark11MeshPublish4pollEv+0xf0>
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
        if (len > 0) {
            LOG(TRACE, "parse packet %d", len);
   d7542:	2320      	movs	r3, #32
   d7544:	4a25      	ldr	r2, [pc, #148]	; (d75dc <_ZN5spark11MeshPublish4pollEv+0x100>)
   d7546:	9302      	str	r3, [sp, #8]
   d7548:	9200      	str	r2, [sp, #0]
   d754a:	2300      	movs	r3, #0
   d754c:	9401      	str	r4, [sp, #4]
   d754e:	aa02      	add	r2, sp, #8
   d7550:	4923      	ldr	r1, [pc, #140]	; (d75e0 <_ZN5spark11MeshPublish4pollEv+0x104>)
   d7552:	9303      	str	r3, [sp, #12]
   d7554:	2001      	movs	r0, #1
   d7556:	f7fd fae1 	bl	d4b1c <log_message>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d755a:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
            const char* buffer = (const char*)buffer_.get();

            // There should be a version and it should be "0"
            const char version = *buffer++;
   d755e:	1c5f      	adds	r7, r3, #1
            CHECK_TRUE(version == 0, SYSTEM_ERROR_BAD_DATA);
   d7560:	781b      	ldrb	r3, [r3, #0]
   d7562:	bb6b      	cbnz	r3, d75c0 <_ZN5spark11MeshPublish4pollEv+0xe4>
            len -= sizeof(version);
   d7564:	3c01      	subs	r4, #1

            // Topic should not be empty
            const size_t topicLen = strnlen(buffer, len);
   d7566:	4621      	mov	r1, r4
   d7568:	4638      	mov	r0, r7
   d756a:	f001 fc0c 	bl	d8d86 <strnlen>
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);
   d756e:	b338      	cbz	r0, d75c0 <_ZN5spark11MeshPublish4pollEv+0xe4>

            const char* topic = buffer;

            len -= topicLen;
   d7570:	1a24      	subs	r4, r4, r0
            buffer += topicLen;

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d7572:	2c00      	cmp	r4, #0
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);

            const char* topic = buffer;

            len -= topicLen;
            buffer += topicLen;
   d7574:	eb07 0800 	add.w	r8, r7, r0

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d7578:	dd22      	ble.n	d75c0 <_ZN5spark11MeshPublish4pollEv+0xe4>
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d757a:	5c3b      	ldrb	r3, [r7, r0]
   d757c:	bb03      	cbnz	r3, d75c0 <_ZN5spark11MeshPublish4pollEv+0xe4>
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
   d757e:	3c01      	subs	r4, #1
   d7580:	d00e      	beq.n	d75a0 <_ZN5spark11MeshPublish4pollEv+0xc4>
            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
            // Skip it
            --len;
            buffer++;
   d7582:	f108 0801 	add.w	r8, r8, #1

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
                // There is data
                dataLen = strnlen(buffer, len);
   d7586:	4621      	mov	r1, r4
   d7588:	4640      	mov	r0, r8
   d758a:	f001 fbfc 	bl	d8d86 <strnlen>
                data = buffer;
                // Data can be empty
                len -= dataLen;
   d758e:	1a24      	subs	r4, r4, r0
                buffer += dataLen;
                // Data should be terminated by '\0'
                CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d7590:	2c00      	cmp	r4, #0
   d7592:	dd15      	ble.n	d75c0 <_ZN5spark11MeshPublish4pollEv+0xe4>
                CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d7594:	f818 3000 	ldrb.w	r3, [r8, r0]
   d7598:	b993      	cbnz	r3, d75c0 <_ZN5spark11MeshPublish4pollEv+0xe4>
                // Skip it
                --len;
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);
   d759a:	2c01      	cmp	r4, #1
   d759c:	d002      	beq.n	d75a4 <_ZN5spark11MeshPublish4pollEv+0xc8>
   d759e:	e00f      	b.n	d75c0 <_ZN5spark11MeshPublish4pollEv+0xe4>
            // Skip it
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
   d75a0:	f8df 8044 	ldr.w	r8, [pc, #68]	; d75e8 <_ZN5spark11MeshPublish4pollEv+0x10c>
   d75a4:	4630      	mov	r0, r6
   d75a6:	f7fe feb3 	bl	d6310 <_ZN14RecursiveMutex4lockEv>
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);

            std::lock_guard<RecursiveMutex> lk(mutex_);
            subscriptions_.send(topic, data);
   d75aa:	4642      	mov	r2, r8
   d75ac:	4639      	mov	r1, r7
   d75ae:	1d28      	adds	r0, r5, #4
   d75b0:	f7ff ff4d 	bl	d744e <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>
   d75b4:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d75b8:	f7fd f930 	bl	d481c <os_mutex_recursive_unlock>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d75bc:	2000      	movs	r0, #0
   d75be:	e005      	b.n	d75cc <_ZN5spark11MeshPublish4pollEv+0xf0>
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
   d75c0:	4808      	ldr	r0, [pc, #32]	; (d75e4 <_ZN5spark11MeshPublish4pollEv+0x108>)
   d75c2:	e003      	b.n	d75cc <_ZN5spark11MeshPublish4pollEv+0xf0>
            subscriptions_.send(topic, data);
        } else {
            result = len;
        }
    } else {
        HAL_Delay_Milliseconds(100);
   d75c4:	2064      	movs	r0, #100	; 0x64
   d75c6:	f7fd f941 	bl	d484c <HAL_Delay_Milliseconds>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d75ca:	4620      	mov	r0, r4
        }
    } else {
        HAL_Delay_Milliseconds(100);
    }
    return result;
}
   d75cc:	b00a      	add	sp, #40	; 0x28
   d75ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d75d2:	bf00      	nop
   d75d4:	000d95dc 	.word	0x000d95dc
   d75d8:	fffffefc 	.word	0xfffffefc
   d75dc:	000d9444 	.word	0x000d9444
   d75e0:	000d943d 	.word	0x000d943d
   d75e4:	fffffee8 	.word	0xfffffee8
   d75e8:	000d937c 	.word	0x000d937c

000d75ec <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_>:
    CHECK(fetchMulticastAddress(mcastAddr));
    CHECK(udp->joinMulticast(mcastAddr));

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d75ec:	b510      	push	{r4, lr}
   d75ee:	4604      	mov	r4, r0
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d75f0:	f3bf 8f5f 	dmb	sy
   d75f4:	f894 31c8 	ldrb.w	r3, [r4, #456]	; 0x1c8
   d75f8:	f3bf 8f5f 	dmb	sy
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
   d75fc:	b91b      	cbnz	r3, d7606 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x1a>
            self->poll();
   d75fe:	4620      	mov	r0, r4
   d7600:	f7ff ff6c 	bl	d74dc <_ZN5spark11MeshPublish4pollEv>
   d7604:	e7f4      	b.n	d75f0 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x4>
   d7606:	bd10      	pop	{r4, pc}

000d7608 <_ZN5spark9MeshClass7localIPEv>:
int MeshClass::selectAntenna(MeshAntennaType antenna) {
    CHECK(mesh_select_antenna((int)antenna, nullptr));
    return 0;
}

IPAddress MeshClass::localIP() {
   d7608:	b5f0      	push	{r4, r5, r6, r7, lr}
   d760a:	b089      	sub	sp, #36	; 0x24
   d760c:	460c      	mov	r4, r1
   d760e:	4607      	mov	r7, r0
    HAL_IPAddress addr = {};
   d7610:	2100      	movs	r1, #0
   d7612:	2211      	movs	r2, #17
   d7614:	a803      	add	r0, sp, #12
   d7616:	f001 fb3e 	bl	d8c96 <memset>
    addr.v = 6;
   d761a:	2306      	movs	r3, #6

    if_t iface = nullptr;
   d761c:	a908      	add	r1, sp, #32
    return 0;
}

IPAddress MeshClass::localIP() {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d761e:	f88d 301c 	strb.w	r3, [sp, #28]

    if_t iface = nullptr;
   d7622:	2300      	movs	r3, #0
   d7624:	f841 3d1c 	str.w	r3, [r1, #-28]!
    if (!if_get_by_index((network_interface_t)*this, &iface)) {
   d7628:	7920      	ldrb	r0, [r4, #4]
   d762a:	f7fd f93f 	bl	d48ac <if_get_by_index>
   d762e:	2800      	cmp	r0, #0
   d7630:	d131      	bne.n	d7696 <_ZN5spark9MeshClass7localIPEv+0x8e>
        if_addrs* ifAddrList = nullptr;
   d7632:	a908      	add	r1, sp, #32
   d7634:	f841 0d18 	str.w	r0, [r1, #-24]!
        if (!if_get_addrs(iface, &ifAddrList)) {
   d7638:	9801      	ldr	r0, [sp, #4]
   d763a:	f7fd f93f 	bl	d48bc <if_get_addrs>
   d763e:	bb50      	cbnz	r0, d7696 <_ZN5spark9MeshClass7localIPEv+0x8e>
            SCOPE_GUARD({
                if_free_if_addrs(ifAddrList);
            });
            for (if_addrs* i = ifAddrList; i; i = i->next) {
   d7640:	9d02      	ldr	r5, [sp, #8]
   d7642:	b32d      	cbz	r5, d7690 <_ZN5spark9MeshClass7localIPEv+0x88>
                if (i->if_addr->addr->sa_family == AF_INET6) {
   d7644:	68eb      	ldr	r3, [r5, #12]
   d7646:	681c      	ldr	r4, [r3, #0]
   d7648:	7863      	ldrb	r3, [r4, #1]
   d764a:	2b0a      	cmp	r3, #10
   d764c:	d11e      	bne.n	d768c <_ZN5spark9MeshClass7localIPEv+0x84>
                    const auto in6addr = (const struct sockaddr_in6*)i->if_addr->addr;

                    // ML-EID will be a preferred, scoped, non-linklocal address
                    if (IN6_IS_ADDR_LINKLOCAL(&in6addr->sin6_addr)) {
   d764e:	4815      	ldr	r0, [pc, #84]	; (d76a4 <_ZN5spark9MeshClass7localIPEv+0x9c>)
   d7650:	68a6      	ldr	r6, [r4, #8]
   d7652:	f7fd f953 	bl	d48fc <inet_htonl>
   d7656:	4006      	ands	r6, r0
   d7658:	4813      	ldr	r0, [pc, #76]	; (d76a8 <_ZN5spark9MeshClass7localIPEv+0xa0>)
   d765a:	f7fd f94f 	bl	d48fc <inet_htonl>
   d765e:	4286      	cmp	r6, r0
   d7660:	d014      	beq.n	d768c <_ZN5spark9MeshClass7localIPEv+0x84>
                        continue;
                    }

                    if (in6addr->sin6_scope_id == 0) {
   d7662:	69a3      	ldr	r3, [r4, #24]
   d7664:	b193      	cbz	r3, d768c <_ZN5spark9MeshClass7localIPEv+0x84>
                        continue;
                    }

                    if (i->if_addr->ip6_addr_data && i->if_addr->ip6_addr_data->state == IF_IP6_ADDR_STATE_PREFERRED) {
   d7666:	68eb      	ldr	r3, [r5, #12]
   d7668:	68db      	ldr	r3, [r3, #12]
   d766a:	b17b      	cbz	r3, d768c <_ZN5spark9MeshClass7localIPEv+0x84>
   d766c:	781b      	ldrb	r3, [r3, #0]
   d766e:	2b06      	cmp	r3, #6
   d7670:	d10c      	bne.n	d768c <_ZN5spark9MeshClass7localIPEv+0x84>
                        memcpy(addr.ipv6, in6addr->sin6_addr.s6_addr, sizeof(addr.ipv6));
   d7672:	f104 0308 	add.w	r3, r4, #8
   d7676:	ad03      	add	r5, sp, #12
   d7678:	3418      	adds	r4, #24
   d767a:	6818      	ldr	r0, [r3, #0]
   d767c:	6859      	ldr	r1, [r3, #4]
   d767e:	462a      	mov	r2, r5
   d7680:	c203      	stmia	r2!, {r0, r1}
   d7682:	3308      	adds	r3, #8
   d7684:	42a3      	cmp	r3, r4
   d7686:	4615      	mov	r5, r2
   d7688:	d1f7      	bne.n	d767a <_ZN5spark9MeshClass7localIPEv+0x72>
   d768a:	e001      	b.n	d7690 <_ZN5spark9MeshClass7localIPEv+0x88>
        if_addrs* ifAddrList = nullptr;
        if (!if_get_addrs(iface, &ifAddrList)) {
            SCOPE_GUARD({
                if_free_if_addrs(ifAddrList);
            });
            for (if_addrs* i = ifAddrList; i; i = i->next) {
   d768c:	682d      	ldr	r5, [r5, #0]
   d768e:	e7d8      	b.n	d7642 <_ZN5spark9MeshClass7localIPEv+0x3a>

    if_t iface = nullptr;
    if (!if_get_by_index((network_interface_t)*this, &iface)) {
        if_addrs* ifAddrList = nullptr;
        if (!if_get_addrs(iface, &ifAddrList)) {
            SCOPE_GUARD({
   d7690:	9802      	ldr	r0, [sp, #8]
   d7692:	f7fd f91b 	bl	d48cc <if_free_if_addrs>
                }
            }
        }
    }

    return addr;
   d7696:	a903      	add	r1, sp, #12
   d7698:	4638      	mov	r0, r7
   d769a:	f7fe fbcf 	bl	d5e3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
}
   d769e:	4638      	mov	r0, r7
   d76a0:	b009      	add	sp, #36	; 0x24
   d76a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d76a4:	ffc00000 	.word	0xffc00000
   d76a8:	fe800000 	.word	0xfe800000

000d76ac <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
   d76ac:	b510      	push	{r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d76ae:	6804      	ldr	r4, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d76b0:	6001      	str	r1, [r0, #0]
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d76b2:	b144      	cbz	r4, d76c6 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_+0x1a>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d76b4:	4620      	mov	r0, r4
   d76b6:	f7ff fde7 	bl	d7288 <_ZN6ThreadD1Ev>
   d76ba:	4620      	mov	r0, r4
   d76bc:	2104      	movs	r1, #4
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
	  get_deleter()(__p);
      }
   d76be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d76c2:	f001 b93a 	b.w	d893a <_ZdlPvj>
   d76c6:	bd10      	pop	{r4, pc}

000d76c8 <_ZN5spark11MeshPublish13initializeUdpEv>:
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
    mcastAddr = addr;
    return 0;
}

int MeshPublish::initializeUdp() {
   d76c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d76cc:	4605      	mov	r5, r0
   d76ce:	b08a      	sub	sp, #40	; 0x28
   d76d0:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d76d4:	f7fe fe1c 	bl	d6310 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
   d76d8:	682c      	ldr	r4, [r5, #0]
   d76da:	2c00      	cmp	r4, #0
   d76dc:	d17b      	bne.n	d77d6 <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
   d76de:	204c      	movs	r0, #76	; 0x4c
   d76e0:	f7fc fcd9 	bl	d4096 <_Znwj>
   d76e4:	4606      	mov	r6, r0
   d76e6:	2800      	cmp	r0, #0
   d76e8:	d073      	beq.n	d77d2 <_ZN5spark11MeshPublish13initializeUdpEv+0x10a>
   d76ea:	f000 fe9f 	bl	d842c <_ZN3UDPC1Ev>
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d76ee:	4622      	mov	r2, r4
   d76f0:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d76f4:	4630      	mov	r0, r6
   d76f6:	f000 fec9 	bl	d848c <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d76fa:	a90a      	add	r1, sp, #40	; 0x28
    if_name_to_index("th1", &idx);
   d76fc:	483a      	ldr	r0, [pc, #232]	; (d77e8 <_ZN5spark11MeshPublish13initializeUdpEv+0x120>)
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d76fe:	f801 4d19 	strb.w	r4, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d7702:	f7fd f8c3 	bl	d488c <if_name_to_index>
    // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d7706:	6833      	ldr	r3, [r6, #0]
   d7708:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d770c:	6a1b      	ldr	r3, [r3, #32]
   d770e:	f249 0169 	movw	r1, #36969	; 0x9069
   d7712:	4630      	mov	r0, r6
   d7714:	4798      	blx	r3

    // subscribe to multicast
    IPAddress mcastAddr;
   d7716:	a804      	add	r0, sp, #16
   d7718:	f7fe fb82 	bl	d5e20 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d771c:	a804      	add	r0, sp, #16
   d771e:	f7ff febd 	bl	d749c <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d7722:	2800      	cmp	r0, #0
   d7724:	db4a      	blt.n	d77bc <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
    CHECK(udp->joinMulticast(mcastAddr));
   d7726:	a904      	add	r1, sp, #16
   d7728:	4630      	mov	r0, r6
   d772a:	f000 ff1b 	bl	d8564 <_ZN3UDP13joinMulticastERK9IPAddress>
   d772e:	2800      	cmp	r0, #0
   d7730:	db44      	blt.n	d77bc <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7732:	f3bf 8f5f 	dmb	sy
   d7736:	f885 41c8 	strb.w	r4, [r5, #456]	; 0x1c8
   d773a:	f3bf 8f5f 	dmb	sy

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d773e:	492b      	ldr	r1, [pc, #172]	; (d77ec <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   d7740:	2004      	movs	r0, #4
   d7742:	f001 f905 	bl	d8950 <_ZnwjRKSt9nothrow_t>
   d7746:	f505 78de 	add.w	r8, r5, #444	; 0x1bc
   d774a:	4607      	mov	r7, r0
   d774c:	b348      	cbz	r0, d77a2 <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d774e:	4927      	ldr	r1, [pc, #156]	; (d77ec <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   d7750:	2014      	movs	r0, #20
   d7752:	f001 f8fd 	bl	d8950 <_ZnwjRKSt9nothrow_t>
   d7756:	b128      	cbz	r0, d7764 <_ZN5spark11MeshPublish13initializeUdpEv+0x9c>
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d7758:	7404      	strb	r4, [r0, #16]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d775a:	6004      	str	r4, [r0, #0]
   d775c:	6044      	str	r4, [r0, #4]
   d775e:	6084      	str	r4, [r0, #8]
   d7760:	60c4      	str	r4, [r0, #12]
   d7762:	7444      	strb	r4, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7764:	6038      	str	r0, [r7, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d7766:	b1b0      	cbz	r0, d7796 <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
            goto error;
        }
        d_->func = function;
   d7768:	4b21      	ldr	r3, [pc, #132]	; (d77f0 <_ZN5spark11MeshPublish13initializeUdpEv+0x128>)
   d776a:	6083      	str	r3, [r0, #8]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d776c:	683b      	ldr	r3, [r7, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d776e:	4921      	ldr	r1, [pc, #132]	; (d77f4 <_ZN5spark11MeshPublish13initializeUdpEv+0x12c>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   d7770:	60dd      	str	r5, [r3, #12]
   d7772:	6838      	ldr	r0, [r7, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d7774:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d7778:	e88d 0009 	stmia.w	sp, {r0, r3}
   d777c:	2203      	movs	r2, #3
   d777e:	4b1e      	ldr	r3, [pc, #120]	; (d77f8 <_ZN5spark11MeshPublish13initializeUdpEv+0x130>)
   d7780:	3004      	adds	r0, #4
   d7782:	f7fd f813 	bl	d47ac <os_thread_create>
   d7786:	b930      	cbnz	r0, d7796 <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
   d7788:	683b      	ldr	r3, [r7, #0]
            goto error;
        }
        while (!d_->started) {
   d778a:	7c1b      	ldrb	r3, [r3, #16]
   d778c:	b94b      	cbnz	r3, d77a2 <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
   d778e:	2001      	movs	r0, #1
   d7790:	f7fd f85c 	bl	d484c <HAL_Delay_Milliseconds>
   d7794:	e7f8      	b.n	d7788 <_ZN5spark11MeshPublish13initializeUdpEv+0xc0>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7796:	6838      	ldr	r0, [r7, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7798:	2300      	movs	r3, #0
   d779a:	603b      	str	r3, [r7, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d779c:	b108      	cbz	r0, d77a2 <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
	  get_deleter()(__p);
   d779e:	f7ff fd58 	bl	d7252 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
            self->poll();
        }
    }, this, OS_THREAD_PRIORITY_DEFAULT + 1));
   d77a2:	4639      	mov	r1, r7
   d77a4:	4640      	mov	r0, r8
   d77a6:	f7ff ff81 	bl	d76ac <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>

    if (!thread_) {
   d77aa:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
   d77ae:	b13b      	cbz	r3, d77c0 <_ZN5spark11MeshPublish13initializeUdpEv+0xf8>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d77b0:	6828      	ldr	r0, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d77b2:	602e      	str	r6, [r5, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d77b4:	b130      	cbz	r0, d77c4 <_ZN5spark11MeshPublish13initializeUdpEv+0xfc>
	  get_deleter()(__p);
   d77b6:	f7ff fd62 	bl	d727e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d77ba:	e00c      	b.n	d77d6 <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
   d77bc:	4604      	mov	r4, r0
   d77be:	e003      	b.n	d77c8 <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
        return SYSTEM_ERROR_NO_MEMORY;
   d77c0:	4c0e      	ldr	r4, [pc, #56]	; (d77fc <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   d77c2:	e001      	b.n	d77c8 <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
   d77c4:	4604      	mov	r4, r0
   d77c6:	e007      	b.n	d77d8 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d77c8:	b136      	cbz	r6, d77d8 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
	  get_deleter()(__ptr);
   d77ca:	4630      	mov	r0, r6
   d77cc:	f7ff fd57 	bl	d727e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d77d0:	e002      	b.n	d77d8 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
    if (udp_) {
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d77d2:	4c0a      	ldr	r4, [pc, #40]	; (d77fc <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   d77d4:	e000      	b.n	d77d8 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
}

int MeshPublish::initializeUdp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
        return SYSTEM_ERROR_NONE;
   d77d6:	2400      	movs	r4, #0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d77d8:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d77dc:	f7fd f81e 	bl	d481c <os_mutex_recursive_unlock>
        return SYSTEM_ERROR_NO_MEMORY;
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
}
   d77e0:	4620      	mov	r0, r4
   d77e2:	b00a      	add	sp, #40	; 0x28
   d77e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d77e8:	000d9454 	.word	0x000d9454
   d77ec:	000d95dc 	.word	0x000d95dc
   d77f0:	000d75ed 	.word	0x000d75ed
   d77f4:	000d9458 	.word	0x000d9458
   d77f8:	000d71bd 	.word	0x000d71bd
   d77fc:	fffffefc 	.word	0xfffffefc

000d7800 <_ZN5spark11MeshPublish7publishEPKcS2_>:
    exit_ = false;

    return SYSTEM_ERROR_NONE;
}

int MeshPublish::publish(const char* topic, const char* data) {
   d7800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7804:	4605      	mov	r5, r0
   d7806:	b08c      	sub	sp, #48	; 0x30
   d7808:	4616      	mov	r6, r2
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);
   d780a:	460f      	mov	r7, r1
   d780c:	b109      	cbz	r1, d7812 <_ZN5spark11MeshPublish7publishEPKcS2_+0x12>
   d780e:	780b      	ldrb	r3, [r1, #0]
   d7810:	b90b      	cbnz	r3, d7816 <_ZN5spark11MeshPublish7publishEPKcS2_+0x16>
   d7812:	4c35      	ldr	r4, [pc, #212]	; (d78e8 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe8>)
   d7814:	e064      	b.n	d78e0 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
   d7816:	4608      	mov	r0, r1
   d7818:	f001 fa98 	bl	d8d4c <strlen>
   d781c:	4680      	mov	r8, r0
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d781e:	2e00      	cmp	r6, #0
   d7820:	d05c      	beq.n	d78dc <_ZN5spark11MeshPublish7publishEPKcS2_+0xdc>
   d7822:	4630      	mov	r0, r6
   d7824:	f001 fa92 	bl	d8d4c <strlen>
   d7828:	1c44      	adds	r4, r0, #1

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d782a:	f108 0302 	add.w	r3, r8, #2
   d782e:	4423      	add	r3, r4
   d7830:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
   d7834:	d84f      	bhi.n	d78d6 <_ZN5spark11MeshPublish7publishEPKcS2_+0xd6>
   d7836:	f505 70e0 	add.w	r0, r5, #448	; 0x1c0
   d783a:	f7fe fd69 	bl	d6310 <_ZN14RecursiveMutex4lockEv>
            SYSTEM_ERROR_TOO_LARGE);

    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initializeUdp());
   d783e:	4628      	mov	r0, r5
   d7840:	f7ff ff42 	bl	d76c8 <_ZN5spark11MeshPublish13initializeUdpEv>
   d7844:	2800      	cmp	r0, #0
   d7846:	db40      	blt.n	d78ca <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    IPAddress mcastAddr;
   d7848:	4668      	mov	r0, sp
   d784a:	f7fe fae9 	bl	d5e20 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d784e:	4668      	mov	r0, sp
   d7850:	f7ff fe24 	bl	d749c <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d7854:	2800      	cmp	r0, #0
   d7856:	db38      	blt.n	d78ca <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7858:	f8d5 a000 	ldr.w	sl, [r5]

    CHECK(udp_->beginPacket(mcastAddr, PORT));
   d785c:	f8da 3000 	ldr.w	r3, [sl]
   d7860:	f10d 0c04 	add.w	ip, sp, #4
   d7864:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
   d7868:	4b20      	ldr	r3, [pc, #128]	; (d78ec <_ZN5spark11MeshPublish7publishEPKcS2_+0xec>)
   d786a:	9306      	str	r3, [sp, #24]
   d786c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d7870:	f10d 0e1c 	add.w	lr, sp, #28
   d7874:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d7878:	f8dc 3000 	ldr.w	r3, [ip]
   d787c:	f88e 3000 	strb.w	r3, [lr]
   d7880:	f249 0269 	movw	r2, #36969	; 0x9069
   d7884:	a906      	add	r1, sp, #24
   d7886:	4650      	mov	r0, sl
   d7888:	47c8      	blx	r9
   d788a:	2800      	cmp	r0, #0
   d788c:	db1d      	blt.n	d78ca <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    uint8_t version = 0;
   d788e:	2300      	movs	r3, #0
   d7890:	6828      	ldr	r0, [r5, #0]
   d7892:	f88d 3018 	strb.w	r3, [sp, #24]
    udp_->write(&version, 1);
   d7896:	6803      	ldr	r3, [r0, #0]
   d7898:	2201      	movs	r2, #1
   d789a:	68db      	ldr	r3, [r3, #12]
   d789c:	a906      	add	r1, sp, #24
   d789e:	4798      	blx	r3
   d78a0:	6828      	ldr	r0, [r5, #0]
    udp_->write((const uint8_t*)topic, topicLen);
   d78a2:	6803      	ldr	r3, [r0, #0]
   d78a4:	f108 0201 	add.w	r2, r8, #1
   d78a8:	68db      	ldr	r3, [r3, #12]
   d78aa:	4639      	mov	r1, r7
   d78ac:	4798      	blx	r3
    if (dataLen > 0) {
   d78ae:	b12c      	cbz	r4, d78bc <_ZN5spark11MeshPublish7publishEPKcS2_+0xbc>
   d78b0:	6828      	ldr	r0, [r5, #0]
        udp_->write((const uint8_t*)data, dataLen);
   d78b2:	6803      	ldr	r3, [r0, #0]
   d78b4:	4622      	mov	r2, r4
   d78b6:	68db      	ldr	r3, [r3, #12]
   d78b8:	4631      	mov	r1, r6
   d78ba:	4798      	blx	r3
   d78bc:	6828      	ldr	r0, [r5, #0]
    }
    CHECK(udp_->endPacket());
   d78be:	6803      	ldr	r3, [r0, #0]
   d78c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d78c2:	4798      	blx	r3
   d78c4:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d78c8:	e000      	b.n	d78cc <_ZN5spark11MeshPublish7publishEPKcS2_+0xcc>
   d78ca:	4604      	mov	r4, r0
   d78cc:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d78d0:	f7fc ffa4 	bl	d481c <os_mutex_recursive_unlock>
   d78d4:	e004      	b.n	d78e0 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d78d6:	f06f 04bd 	mvn.w	r4, #189	; 0xbd
   d78da:	e001      	b.n	d78e0 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d78dc:	4634      	mov	r4, r6
   d78de:	e7a4      	b.n	d782a <_ZN5spark11MeshPublish7publishEPKcS2_+0x2a>
    if (dataLen > 0) {
        udp_->write((const uint8_t*)data, dataLen);
    }
    CHECK(udp_->endPacket());
    return SYSTEM_ERROR_NONE;
}
   d78e0:	4620      	mov	r0, r4
   d78e2:	b00c      	add	sp, #48	; 0x30
   d78e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d78e8:	fffffef2 	.word	0xfffffef2
   d78ec:	000d9274 	.word	0x000d9274

000d78f0 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>:

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
   d78f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d78f2:	4605      	mov	r5, r0
   d78f4:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d78f8:	460e      	mov	r6, r1
   d78fa:	4617      	mov	r7, r2
   d78fc:	f7fe fd08 	bl	d6310 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initializeUdp());
   d7900:	4628      	mov	r0, r5
   d7902:	f7ff fee1 	bl	d76c8 <_ZN5spark11MeshPublish13initializeUdpEv>
   d7906:	2800      	cmp	r0, #0
   d7908:	db07      	blt.n	d791a <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x2a>
    CHECK(subscriptions_.add(prefix, handler));
   d790a:	463a      	mov	r2, r7
   d790c:	4631      	mov	r1, r6
   d790e:	1d28      	adds	r0, r5, #4
   d7910:	f7ff fd94 	bl	d743c <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>
   d7914:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d7918:	e000      	b.n	d791c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x2c>
   d791a:	4604      	mov	r4, r0
   d791c:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d7920:	f7fc ff7c 	bl	d481c <os_mutex_recursive_unlock>
    return SYSTEM_ERROR_NONE;
}
   d7924:	4620      	mov	r0, r4
   d7926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7928 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7928:	b538      	push	{r3, r4, r5, lr}
   d792a:	4c0e      	ldr	r4, [pc, #56]	; (d7964 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d792c:	4b0e      	ldr	r3, [pc, #56]	; (d7968 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d792e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7930:	2500      	movs	r5, #0
   d7932:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7934:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7938:	6063      	str	r3, [r4, #4]
   d793a:	60a5      	str	r5, [r4, #8]
   d793c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7940:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7944:	f7fc ff52 	bl	d47ec <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7948:	4b08      	ldr	r3, [pc, #32]	; (d796c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d794a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d794e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7952:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7954:	4620      	mov	r0, r4
   d7956:	4a06      	ldr	r2, [pc, #24]	; (d7970 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7958:	4906      	ldr	r1, [pc, #24]	; (d7974 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d795a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d795e:	f000 bfe7 	b.w	d8930 <__aeabi_atexit>
   d7962:	bf00      	nop
   d7964:	2003e404 	.word	0x2003e404
   d7968:	000d9468 	.word	0x000d9468
   d796c:	000d9404 	.word	0x000d9404
   d7970:	2003e360 	.word	0x2003e360
   d7974:	000d72fd 	.word	0x000d72fd

000d7978 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7978:	2300      	movs	r3, #0
   d797a:	461a      	mov	r2, r3
   d797c:	6840      	ldr	r0, [r0, #4]
   d797e:	f7fd b92b 	b.w	d4bd8 <network_connect>

000d7982 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7982:	2200      	movs	r2, #0
   d7984:	2102      	movs	r1, #2
   d7986:	6840      	ldr	r0, [r0, #4]
   d7988:	f7fd b936 	b.w	d4bf8 <network_disconnect>

000d798c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d798c:	2200      	movs	r2, #0
   d798e:	4611      	mov	r1, r2
   d7990:	6840      	ldr	r0, [r0, #4]
   d7992:	f7fd b929 	b.w	d4be8 <network_connecting>

000d7996 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7996:	2200      	movs	r2, #0
   d7998:	4611      	mov	r1, r2
   d799a:	6840      	ldr	r0, [r0, #4]
   d799c:	f7fd b934 	b.w	d4c08 <network_ready>

000d79a0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d79a0:	2300      	movs	r3, #0
   d79a2:	461a      	mov	r2, r3
   d79a4:	4619      	mov	r1, r3
   d79a6:	6840      	ldr	r0, [r0, #4]
   d79a8:	f7fd b936 	b.w	d4c18 <network_on>

000d79ac <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d79ac:	2300      	movs	r3, #0
   d79ae:	461a      	mov	r2, r3
   d79b0:	4619      	mov	r1, r3
   d79b2:	6840      	ldr	r0, [r0, #4]
   d79b4:	f7fd b938 	b.w	d4c28 <network_off>

000d79b8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d79b8:	2200      	movs	r2, #0
   d79ba:	f081 0101 	eor.w	r1, r1, #1
   d79be:	6840      	ldr	r0, [r0, #4]
   d79c0:	f7fd b93a 	b.w	d4c38 <network_listen>

000d79c4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d79c4:	2200      	movs	r2, #0
   d79c6:	6840      	ldr	r0, [r0, #4]
   d79c8:	f7fd b946 	b.w	d4c58 <network_set_listen_timeout>

000d79cc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d79cc:	2200      	movs	r2, #0
   d79ce:	4611      	mov	r1, r2
   d79d0:	6840      	ldr	r0, [r0, #4]
   d79d2:	f7fd b949 	b.w	d4c68 <network_get_listen_timeout>

000d79d6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d79d6:	2200      	movs	r2, #0
   d79d8:	4611      	mov	r1, r2
   d79da:	6840      	ldr	r0, [r0, #4]
   d79dc:	f7fd b934 	b.w	d4c48 <network_listening>

000d79e0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d79e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d79e4:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d79e6:	b095      	sub	sp, #84	; 0x54
   d79e8:	4616      	mov	r6, r2
   d79ea:	460d      	mov	r5, r1
   d79ec:	4607      	mov	r7, r0
    IPAddress addr;
   d79ee:	f7fe fa17 	bl	d5e20 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d79f2:	4621      	mov	r1, r4
   d79f4:	2220      	movs	r2, #32
   d79f6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d79f8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d79fa:	f001 f94c 	bl	d8c96 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d79fe:	2340      	movs	r3, #64	; 0x40
   d7a00:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7a02:	4621      	mov	r1, r4
   d7a04:	466b      	mov	r3, sp
   d7a06:	aa0c      	add	r2, sp, #48	; 0x30
   d7a08:	4630      	mov	r0, r6
   d7a0a:	f7fc ff97 	bl	d493c <netdb_getaddrinfo>
    if (!r) {
   d7a0e:	4604      	mov	r4, r0
   d7a10:	2800      	cmp	r0, #0
   d7a12:	d144      	bne.n	d7a9e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7a14:	4602      	mov	r2, r0
   d7a16:	2101      	movs	r1, #1
   d7a18:	6868      	ldr	r0, [r5, #4]
   d7a1a:	f7fd f8f5 	bl	d4c08 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7a1e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7a20:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7a22:	4622      	mov	r2, r4
   d7a24:	6868      	ldr	r0, [r5, #4]
   d7a26:	f7fd f8ef 	bl	d4c08 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7a2a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7a2c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7a2e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7a30:	2e00      	cmp	r6, #0
   d7a32:	d034      	beq.n	d7a9e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7a34:	2900      	cmp	r1, #0
   d7a36:	d132      	bne.n	d7a9e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7a38:	6873      	ldr	r3, [r6, #4]
   d7a3a:	2b02      	cmp	r3, #2
   d7a3c:	d002      	beq.n	d7a44 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7a3e:	2b0a      	cmp	r3, #10
   d7a40:	d009      	beq.n	d7a56 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7a42:	e02a      	b.n	d7a9a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7a44:	f1b8 0f00 	cmp.w	r8, #0
   d7a48:	d027      	beq.n	d7a9a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7a4a:	6971      	ldr	r1, [r6, #20]
   d7a4c:	4638      	mov	r0, r7
   d7a4e:	3104      	adds	r1, #4
   d7a50:	f7fe fa29 	bl	d5ea6 <_ZN9IPAddressaSEPKh>
   d7a54:	e020      	b.n	d7a98 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7a56:	f1b9 0f00 	cmp.w	r9, #0
   d7a5a:	d01e      	beq.n	d7a9a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7a5c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7a5e:	2211      	movs	r2, #17
   d7a60:	a801      	add	r0, sp, #4
   d7a62:	f001 f918 	bl	d8c96 <memset>
                    a.v = 6;
   d7a66:	2306      	movs	r3, #6
   d7a68:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7a6c:	ad01      	add	r5, sp, #4
   d7a6e:	f104 0308 	add.w	r3, r4, #8
   d7a72:	3418      	adds	r4, #24
   d7a74:	6818      	ldr	r0, [r3, #0]
   d7a76:	6859      	ldr	r1, [r3, #4]
   d7a78:	462a      	mov	r2, r5
   d7a7a:	c203      	stmia	r2!, {r0, r1}
   d7a7c:	3308      	adds	r3, #8
   d7a7e:	42a3      	cmp	r3, r4
   d7a80:	4615      	mov	r5, r2
   d7a82:	d1f7      	bne.n	d7a74 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7a84:	a901      	add	r1, sp, #4
   d7a86:	a806      	add	r0, sp, #24
   d7a88:	ad07      	add	r5, sp, #28
   d7a8a:	f7fe f9d7 	bl	d5e3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7a8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7a90:	1d3c      	adds	r4, r7, #4
   d7a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7a94:	682b      	ldr	r3, [r5, #0]
   d7a96:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7a98:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7a9a:	69f6      	ldr	r6, [r6, #28]
   d7a9c:	e7c8      	b.n	d7a30 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7a9e:	9800      	ldr	r0, [sp, #0]
   d7aa0:	f7fc ff44 	bl	d492c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7aa4:	4638      	mov	r0, r7
   d7aa6:	b015      	add	sp, #84	; 0x54
   d7aa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7aac <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7aac:	4b02      	ldr	r3, [pc, #8]	; (d7ab8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7aae:	4a03      	ldr	r2, [pc, #12]	; (d7abc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7ab0:	601a      	str	r2, [r3, #0]
   d7ab2:	2200      	movs	r2, #0
   d7ab4:	605a      	str	r2, [r3, #4]
   d7ab6:	4770      	bx	lr
   d7ab8:	2003e5d8 	.word	0x2003e5d8
   d7abc:	000d9468 	.word	0x000d9468

000d7ac0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7ac2:	4606      	mov	r6, r0
   d7ac4:	460d      	mov	r5, r1
   d7ac6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d7ac8:	2400      	movs	r4, #0
  while (size--) {
   d7aca:	42bd      	cmp	r5, r7
   d7acc:	d00c      	beq.n	d7ae8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7ace:	6833      	ldr	r3, [r6, #0]
   d7ad0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7ad4:	689b      	ldr	r3, [r3, #8]
   d7ad6:	4630      	mov	r0, r6
   d7ad8:	4798      	blx	r3
     if (chunk>=0)
   d7ada:	2800      	cmp	r0, #0
   d7adc:	db01      	blt.n	d7ae2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7ade:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d7ae0:	e7f3      	b.n	d7aca <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7ae2:	2c00      	cmp	r4, #0
   d7ae4:	bf08      	it	eq
   d7ae6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d7ae8:	4620      	mov	r0, r4
   d7aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7aec <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7aec:	b570      	push	{r4, r5, r6, lr}
   d7aee:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d7af0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d7af2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d7af4:	b149      	cbz	r1, d7b0a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d7af6:	f001 f929 	bl	d8d4c <strlen>
   d7afa:	682b      	ldr	r3, [r5, #0]
   d7afc:	4602      	mov	r2, r0
   d7afe:	4621      	mov	r1, r4
   d7b00:	4628      	mov	r0, r5
   d7b02:	68db      	ldr	r3, [r3, #12]
    }
   d7b04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7b08:	4718      	bx	r3
    }
   d7b0a:	bd70      	pop	{r4, r5, r6, pc}

000d7b0c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7b0c:	6803      	ldr	r3, [r0, #0]
   d7b0e:	689b      	ldr	r3, [r3, #8]
   d7b10:	4718      	bx	r3

000d7b12 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7b12:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7b14:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7b16:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7b18:	f7ff fff8 	bl	d7b0c <_ZN5Print5printEc>
  n += print('\n');
   d7b1c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d7b1e:	4604      	mov	r4, r0
  n += print('\n');
   d7b20:	4628      	mov	r0, r5
   d7b22:	f7ff fff3 	bl	d7b0c <_ZN5Print5printEc>
  return n;
}
   d7b26:	4420      	add	r0, r4
   d7b28:	bd38      	pop	{r3, r4, r5, pc}

000d7b2a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7b2a:	b530      	push	{r4, r5, lr}
   d7b2c:	b08b      	sub	sp, #44	; 0x2c
   d7b2e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7b30:	2100      	movs	r1, #0
   d7b32:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7b36:	2a01      	cmp	r2, #1
   d7b38:	bf98      	it	ls
   d7b3a:	220a      	movls	r2, #10
   d7b3c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d7b40:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d7b44:	fb05 3312 	mls	r3, r5, r2, r3
   d7b48:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7b4c:	2b09      	cmp	r3, #9
   d7b4e:	bf94      	ite	ls
   d7b50:	3330      	addls	r3, #48	; 0x30
   d7b52:	3337      	addhi	r3, #55	; 0x37
   d7b54:	b2db      	uxtb	r3, r3
   d7b56:	4621      	mov	r1, r4
   d7b58:	f804 3901 	strb.w	r3, [r4], #-1
   d7b5c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d7b5e:	2d00      	cmp	r5, #0
   d7b60:	d1ee      	bne.n	d7b40 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d7b62:	f7ff ffc3 	bl	d7aec <_ZN5Print5writeEPKc>
}
   d7b66:	b00b      	add	sp, #44	; 0x2c
   d7b68:	bd30      	pop	{r4, r5, pc}

000d7b6a <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7b6a:	b40c      	push	{r2, r3}
   d7b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7b70:	b087      	sub	sp, #28
   d7b72:	af00      	add	r7, sp, #0
   d7b74:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d7b78:	4605      	mov	r5, r0
   d7b7a:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d7b7e:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7b80:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d7b82:	4623      	mov	r3, r4
   d7b84:	464a      	mov	r2, r9
   d7b86:	2114      	movs	r1, #20
   d7b88:	1d38      	adds	r0, r7, #4
   d7b8a:	f7fd f88d 	bl	d4ca8 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d7b8e:	2813      	cmp	r0, #19
   d7b90:	d805      	bhi.n	d7b9e <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7b92:	1d39      	adds	r1, r7, #4
   d7b94:	4628      	mov	r0, r5
   d7b96:	f7ff ffa9 	bl	d7aec <_ZN5Print5writeEPKc>
   d7b9a:	4604      	mov	r4, r0
   d7b9c:	e013      	b.n	d7bc6 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7b9e:	f100 0308 	add.w	r3, r0, #8
   d7ba2:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d7ba6:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7ba8:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d7bac:	1c41      	adds	r1, r0, #1
   d7bae:	4623      	mov	r3, r4
   d7bb0:	464a      	mov	r2, r9
   d7bb2:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d7bb4:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d7bb6:	f7fd f877 	bl	d4ca8 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7bba:	4669      	mov	r1, sp
   d7bbc:	4628      	mov	r0, r5
   d7bbe:	f7ff ff95 	bl	d7aec <_ZN5Print5writeEPKc>
   d7bc2:	4604      	mov	r4, r0
   d7bc4:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d7bc6:	b11e      	cbz	r6, d7bd0 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d7bc8:	4628      	mov	r0, r5
   d7bca:	f7ff ffa2 	bl	d7b12 <_ZN5Print7printlnEv>
   d7bce:	4404      	add	r4, r0
    return n;
}
   d7bd0:	4620      	mov	r0, r4
   d7bd2:	371c      	adds	r7, #28
   d7bd4:	46bd      	mov	sp, r7
   d7bd6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7bda:	b002      	add	sp, #8
   d7bdc:	4770      	bx	lr

000d7bde <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7bde:	b510      	push	{r4, lr}
   d7be0:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7be2:	f7fe f89b 	bl	d5d1c <_ZNSt14_Function_baseD1Ev>
   d7be6:	4620      	mov	r0, r4
   d7be8:	bd10      	pop	{r4, pc}

000d7bea <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d7bea:	b510      	push	{r4, lr}
   d7bec:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d7bee:	f7fc ff7d 	bl	d4aec <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   d7bf2:	4284      	cmp	r4, r0
   d7bf4:	d008      	beq.n	d7c08 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d7bf6:	b11c      	cbz	r4, d7c00 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d7bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   d7bfc:	f7fc bf66 	b.w	d4acc <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   d7c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   d7c04:	f7fc bf6a 	b.w	d4adc <LED_Signaling_Stop>
   d7c08:	bd10      	pop	{r4, pc}

000d7c0a <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d7c0a:	b570      	push	{r4, r5, r6, lr}
   d7c0c:	4605      	mov	r5, r0
   d7c0e:	460e      	mov	r6, r1
   d7c10:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d7c12:	f7fc ff6b 	bl	d4aec <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   d7c16:	b150      	cbz	r0, d7c2e <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d7c18:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d7c1c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d7c20:	f7fc ff4c 	bl	d4abc <LED_SetSignalingColor>
    LED_On(LED_RGB);
   d7c24:	20e7      	movs	r0, #231	; 0xe7
}
   d7c26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   d7c2a:	f7fc bf67 	b.w	d4afc <LED_On>
   d7c2e:	bd70      	pop	{r4, r5, r6, pc}

000d7c30 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7c30:	4803      	ldr	r0, [pc, #12]	; (d7c40 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7c32:	4a04      	ldr	r2, [pc, #16]	; (d7c44 <_GLOBAL__sub_I_RGB+0x14>)
   d7c34:	4904      	ldr	r1, [pc, #16]	; (d7c48 <_GLOBAL__sub_I_RGB+0x18>)
   d7c36:	2300      	movs	r3, #0
   d7c38:	6083      	str	r3, [r0, #8]
   d7c3a:	f000 be79 	b.w	d8930 <__aeabi_atexit>
   d7c3e:	bf00      	nop
   d7c40:	2003e5e0 	.word	0x2003e5e0
   d7c44:	2003e360 	.word	0x2003e360
   d7c48:	000d7bdf 	.word	0x000d7bdf

000d7c4c <_ZN21StringPrintableHelperD1Ev>:
{
	if (buffer) return float(atof(buffer));
	return 0;
}

class StringPrintableHelper : public Print
   d7c4c:	4770      	bx	lr

000d7c4e <_ZN21StringPrintableHelperD0Ev>:
   d7c4e:	b510      	push	{r4, lr}
   d7c50:	210c      	movs	r1, #12
   d7c52:	4604      	mov	r4, r0
   d7c54:	f000 fe71 	bl	d893a <_ZdlPvj>
   d7c58:	4620      	mov	r0, r4
   d7c5a:	bd10      	pop	{r4, pc}

000d7c5c <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7c5c:	2300      	movs	r3, #0
   d7c5e:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7c60:	6043      	str	r3, [r0, #4]
	len = 0;
   d7c62:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7c64:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d7c66:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d7c68:	680c      	ldr	r4, [r1, #0]
   d7c6a:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d7c6c:	684c      	ldr	r4, [r1, #4]
   d7c6e:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d7c70:	688c      	ldr	r4, [r1, #8]
   d7c72:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d7c74:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d7c76:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d7c78:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d7c7a:	bd10      	pop	{r4, pc}

000d7c7c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7c7c:	b510      	push	{r4, lr}
   d7c7e:	4604      	mov	r4, r0
{
	free(buffer);
   d7c80:	6800      	ldr	r0, [r0, #0]
   d7c82:	f7fd f801 	bl	d4c88 <free>
}
   d7c86:	4620      	mov	r0, r4
   d7c88:	bd10      	pop	{r4, pc}

000d7c8a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7c8a:	b510      	push	{r4, lr}
   d7c8c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7c8e:	6800      	ldr	r0, [r0, #0]
   d7c90:	b108      	cbz	r0, d7c96 <_ZN6String10invalidateEv+0xc>
   d7c92:	f7fc fff9 	bl	d4c88 <free>
	buffer = NULL;
   d7c96:	2300      	movs	r3, #0
   d7c98:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d7c9a:	60a3      	str	r3, [r4, #8]
   d7c9c:	6063      	str	r3, [r4, #4]
   d7c9e:	bd10      	pop	{r4, pc}

000d7ca0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7ca0:	b538      	push	{r3, r4, r5, lr}
   d7ca2:	4604      	mov	r4, r0
   d7ca4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7ca6:	6800      	ldr	r0, [r0, #0]
   d7ca8:	3101      	adds	r1, #1
   d7caa:	f7fc fff5 	bl	d4c98 <realloc>
	if (newbuffer) {
   d7cae:	b110      	cbz	r0, d7cb6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7cb0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d7cb4:	2001      	movs	r0, #1
	}
	return 0;
}
   d7cb6:	bd38      	pop	{r3, r4, r5, pc}

000d7cb8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7cb8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7cba:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7cbc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7cbe:	b113      	cbz	r3, d7cc6 <_ZN6String7reserveEj+0xe>
   d7cc0:	6843      	ldr	r3, [r0, #4]
   d7cc2:	428b      	cmp	r3, r1
   d7cc4:	d207      	bcs.n	d7cd6 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d7cc6:	4620      	mov	r0, r4
   d7cc8:	f7ff ffea 	bl	d7ca0 <_ZN6String12changeBufferEj>
   d7ccc:	b120      	cbz	r0, d7cd8 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d7cce:	68a3      	ldr	r3, [r4, #8]
   d7cd0:	b90b      	cbnz	r3, d7cd6 <_ZN6String7reserveEj+0x1e>
   d7cd2:	6822      	ldr	r2, [r4, #0]
   d7cd4:	7013      	strb	r3, [r2, #0]
   d7cd6:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d7cd8:	bd10      	pop	{r4, pc}

000d7cda <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7cda:	b570      	push	{r4, r5, r6, lr}
   d7cdc:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d7cde:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7ce0:	4604      	mov	r4, r0
   d7ce2:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d7ce4:	f7ff ffe8 	bl	d7cb8 <_ZN6String7reserveEj>
   d7ce8:	b918      	cbnz	r0, d7cf2 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d7cea:	4620      	mov	r0, r4
   d7cec:	f7ff ffcd 	bl	d7c8a <_ZN6String10invalidateEv>
		return *this;
   d7cf0:	e009      	b.n	d7d06 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d7cf2:	462a      	mov	r2, r5
   d7cf4:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d7cf6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d7cf8:	6820      	ldr	r0, [r4, #0]
   d7cfa:	f000 ffa6 	bl	d8c4a <memcpy>
	buffer[len] = 0;
   d7cfe:	6822      	ldr	r2, [r4, #0]
   d7d00:	68a3      	ldr	r3, [r4, #8]
   d7d02:	2100      	movs	r1, #0
   d7d04:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d7d06:	4620      	mov	r0, r4
   d7d08:	bd70      	pop	{r4, r5, r6, pc}

000d7d0a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7d0a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7d0c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7d0e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7d10:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7d12:	6043      	str	r3, [r0, #4]
	len = 0;
   d7d14:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7d16:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d7d18:	460d      	mov	r5, r1
   d7d1a:	b139      	cbz	r1, d7d2c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d7d1c:	4608      	mov	r0, r1
   d7d1e:	f001 f815 	bl	d8d4c <strlen>
   d7d22:	4629      	mov	r1, r5
   d7d24:	4602      	mov	r2, r0
   d7d26:	4620      	mov	r0, r4
   d7d28:	f7ff ffd7 	bl	d7cda <_ZN6String4copyEPKcj>
}
   d7d2c:	4620      	mov	r0, r4
   d7d2e:	bd38      	pop	{r3, r4, r5, pc}

000d7d30 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d7d30:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d7d32:	b510      	push	{r4, lr}
   d7d34:	460b      	mov	r3, r1
   d7d36:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d7d38:	d007      	beq.n	d7d4a <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d7d3a:	6809      	ldr	r1, [r1, #0]
   d7d3c:	b119      	cbz	r1, d7d46 <_ZN6StringaSERKS_+0x16>
   d7d3e:	689a      	ldr	r2, [r3, #8]
   d7d40:	f7ff ffcb 	bl	d7cda <_ZN6String4copyEPKcj>
   d7d44:	e001      	b.n	d7d4a <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d7d46:	f7ff ffa0 	bl	d7c8a <_ZN6String10invalidateEv>

	return *this;
}
   d7d4a:	4620      	mov	r0, r4
   d7d4c:	bd10      	pop	{r4, pc}

000d7d4e <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7d4e:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7d50:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7d52:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7d54:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7d56:	6043      	str	r3, [r0, #4]
	len = 0;
   d7d58:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7d5a:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d7d5c:	f7ff ffe8 	bl	d7d30 <_ZN6StringaSERKS_>
}
   d7d60:	4620      	mov	r0, r4
   d7d62:	bd10      	pop	{r4, pc}

000d7d64 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d7d64:	b538      	push	{r3, r4, r5, lr}
   d7d66:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d7d68:	460c      	mov	r4, r1
   d7d6a:	b141      	cbz	r1, d7d7e <_ZN6StringaSEPKc+0x1a>
   d7d6c:	4608      	mov	r0, r1
   d7d6e:	f000 ffed 	bl	d8d4c <strlen>
   d7d72:	4621      	mov	r1, r4
   d7d74:	4602      	mov	r2, r0
   d7d76:	4628      	mov	r0, r5
   d7d78:	f7ff ffaf 	bl	d7cda <_ZN6String4copyEPKcj>
   d7d7c:	e001      	b.n	d7d82 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d7d7e:	f7ff ff84 	bl	d7c8a <_ZN6String10invalidateEv>

	return *this;
}
   d7d82:	4628      	mov	r0, r5
   d7d84:	bd38      	pop	{r3, r4, r5, pc}

000d7d86 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d7d86:	b570      	push	{r4, r5, r6, lr}
   d7d88:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d7d8a:	460e      	mov	r6, r1
   d7d8c:	b909      	cbnz	r1, d7d92 <_ZN6String6concatEPKcj+0xc>
   d7d8e:	2000      	movs	r0, #0
   d7d90:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d7d92:	b16a      	cbz	r2, d7db0 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d7d94:	6883      	ldr	r3, [r0, #8]
   d7d96:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d7d98:	4629      	mov	r1, r5
   d7d9a:	f7ff ff8d 	bl	d7cb8 <_ZN6String7reserveEj>
   d7d9e:	2800      	cmp	r0, #0
   d7da0:	d0f5      	beq.n	d7d8e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d7da2:	6820      	ldr	r0, [r4, #0]
   d7da4:	68a3      	ldr	r3, [r4, #8]
   d7da6:	4631      	mov	r1, r6
   d7da8:	4418      	add	r0, r3
   d7daa:	f000 ffc7 	bl	d8d3c <strcpy>
	len = newlen;
   d7dae:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d7db0:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d7db2:	bd70      	pop	{r4, r5, r6, pc}

000d7db4 <_ZN21StringPrintableHelper5writeEPKhj>:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
    }

    virtual size_t write(const uint8_t *buffer, size_t size) override
   d7db4:	b538      	push	{r3, r4, r5, lr}
   d7db6:	4604      	mov	r4, r0
    {
        unsigned len = s.length();
   d7db8:	6880      	ldr	r0, [r0, #8]
   d7dba:	6885      	ldr	r5, [r0, #8]
        s.concat((const char*)buffer, size);
   d7dbc:	f7ff ffe3 	bl	d7d86 <_ZN6String6concatEPKcj>
   d7dc0:	68a3      	ldr	r3, [r4, #8]
        return s.length()-len;
   d7dc2:	6898      	ldr	r0, [r3, #8]
    }
   d7dc4:	1b40      	subs	r0, r0, r5
   d7dc6:	bd38      	pop	{r3, r4, r5, pc}

000d7dc8 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d7dc8:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d7dca:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d7dcc:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d7dd0:	2201      	movs	r2, #1
   d7dd2:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d7dd4:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d7dd8:	f7ff ffd5 	bl	d7d86 <_ZN6String6concatEPKcj>
}
   d7ddc:	b003      	add	sp, #12
   d7dde:	f85d fb04 	ldr.w	pc, [sp], #4

000d7de2 <_ZN21StringPrintableHelper5writeEh>:
        unsigned len = s.length();
        s.concat((const char*)buffer, size);
        return s.length()-len;
    }

    virtual size_t write(uint8_t c) override
   d7de2:	b508      	push	{r3, lr}
    {
        return s.concat((char)c);
   d7de4:	6880      	ldr	r0, [r0, #8]
   d7de6:	f7ff ffef 	bl	d7dc8 <_ZN6String6concatEc>
    }
   d7dea:	bd08      	pop	{r3, pc}

000d7dec <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d7dec:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7dee:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d7df0:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7df2:	b912      	cbnz	r2, d7dfa <_ZNK6String6equalsEPKc+0xe>
   d7df4:	b919      	cbnz	r1, d7dfe <_ZNK6String6equalsEPKc+0x12>
   d7df6:	2001      	movs	r0, #1
   d7df8:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d7dfa:	b911      	cbnz	r1, d7e02 <_ZNK6String6equalsEPKc+0x16>
   d7dfc:	6803      	ldr	r3, [r0, #0]
   d7dfe:	7818      	ldrb	r0, [r3, #0]
   d7e00:	e002      	b.n	d7e08 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d7e02:	6800      	ldr	r0, [r0, #0]
   d7e04:	f000 ff90 	bl	d8d28 <strcmp>
   d7e08:	fab0 f080 	clz	r0, r0
   d7e0c:	0940      	lsrs	r0, r0, #5
}
   d7e0e:	bd08      	pop	{r3, pc}

000d7e10 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d7e10:	6800      	ldr	r0, [r0, #0]
   d7e12:	b108      	cbz	r0, d7e18 <_ZNK6String5toIntEv+0x8>
   d7e14:	f000 bef8 	b.w	d8c08 <atol>
	return 0;
}
   d7e18:	4770      	bx	lr
	...

000d7e1c <_ZN6StringC1ERK9Printable>:
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   d7e1c:	b530      	push	{r4, r5, lr}
   d7e1e:	b085      	sub	sp, #20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7e20:	2300      	movs	r3, #0
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   d7e22:	460d      	mov	r5, r1
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7e24:	9302      	str	r3, [sp, #8]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7e26:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7e28:	6043      	str	r3, [r0, #4]
	len = 0;
   d7e2a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7e2c:	7303      	strb	r3, [r0, #12]
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
   d7e2e:	2114      	movs	r1, #20
{
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
   d7e30:	4b06      	ldr	r3, [pc, #24]	; (d7e4c <_ZN6StringC1ERK9Printable+0x30>)
   d7e32:	9301      	str	r3, [sp, #4]
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   d7e34:	4604      	mov	r4, r0
{
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
   d7e36:	9003      	str	r0, [sp, #12]
        s.reserve(20);
   d7e38:	f7ff ff3e 	bl	d7cb8 <_ZN6String7reserveEj>

String::String(const Printable& printable)
{
    init();
    StringPrintableHelper help(*this);
    printable.printTo(help);
   d7e3c:	682b      	ldr	r3, [r5, #0]
   d7e3e:	a901      	add	r1, sp, #4
   d7e40:	681b      	ldr	r3, [r3, #0]
   d7e42:	4628      	mov	r0, r5
   d7e44:	4798      	blx	r3
}
   d7e46:	4620      	mov	r0, r4
   d7e48:	b005      	add	sp, #20
   d7e4a:	bd30      	pop	{r4, r5, pc}
   d7e4c:	000d949c 	.word	0x000d949c

000d7e50 <_ZN6String6formatEPKcz>:

String String::format(const char* fmt, ...)
{
   d7e50:	b40e      	push	{r1, r2, r3}
   d7e52:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
   d7e54:	ac09      	add	r4, sp, #36	; 0x24
   d7e56:	4605      	mov	r5, r0
   d7e58:	f854 7b04 	ldr.w	r7, [r4], #4
    va_list marker;
    va_start(marker, fmt);
   d7e5c:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d7e5e:	4623      	mov	r3, r4
   d7e60:	463a      	mov	r2, r7
   d7e62:	2105      	movs	r1, #5
   d7e64:	a802      	add	r0, sp, #8
   d7e66:	f7fc ff1f 	bl	d4ca8 <vsnprintf>
    va_end(marker);

    String result;
   d7e6a:	490c      	ldr	r1, [pc, #48]	; (d7e9c <_ZN6String6formatEPKcz+0x4c>)
{
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d7e6c:	4606      	mov	r6, r0
    va_end(marker);

    String result;
   d7e6e:	4628      	mov	r0, r5
   d7e70:	f7ff ff4b 	bl	d7d0a <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   d7e74:	4631      	mov	r1, r6
   d7e76:	4628      	mov	r0, r5
   d7e78:	f7ff ff1e 	bl	d7cb8 <_ZN6String7reserveEj>
    if (result.buffer) {
   d7e7c:	6828      	ldr	r0, [r5, #0]
   d7e7e:	b130      	cbz	r0, d7e8e <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d7e80:	4623      	mov	r3, r4
   d7e82:	463a      	mov	r2, r7
   d7e84:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
   d7e86:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d7e88:	f7fc ff0e 	bl	d4ca8 <vsnprintf>
        va_end(marker);
        result.len = n;
   d7e8c:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
   d7e8e:	4628      	mov	r0, r5
   d7e90:	b004      	add	sp, #16
   d7e92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d7e96:	b003      	add	sp, #12
   d7e98:	4770      	bx	lr
   d7e9a:	bf00      	nop
   d7e9c:	000d937c 	.word	0x000d937c

000d7ea0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7ea0:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7ea2:	4c09      	ldr	r4, [pc, #36]	; (d7ec8 <_GLOBAL__sub_I_System+0x28>)
   d7ea4:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7ea6:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7eaa:	6020      	str	r0, [r4, #0]
   d7eac:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d7eae:	71a0      	strb	r0, [r4, #6]
   d7eb0:	8120      	strh	r0, [r4, #8]
   d7eb2:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7eb4:	f7fc fe52 	bl	d4b5c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7eb8:	4620      	mov	r0, r4
   d7eba:	4a04      	ldr	r2, [pc, #16]	; (d7ecc <_GLOBAL__sub_I_System+0x2c>)
   d7ebc:	4904      	ldr	r1, [pc, #16]	; (d7ed0 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d7ec2:	f000 bd35 	b.w	d8930 <__aeabi_atexit>
   d7ec6:	bf00      	nop
   d7ec8:	2003e5f0 	.word	0x2003e5f0
   d7ecc:	2003e360 	.word	0x2003e360
   d7ed0:	000d41b5 	.word	0x000d41b5

000d7ed4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7ed4:	4b02      	ldr	r3, [pc, #8]	; (d7ee0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7ed6:	681a      	ldr	r2, [r3, #0]
   d7ed8:	4b02      	ldr	r3, [pc, #8]	; (d7ee4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7eda:	601a      	str	r2, [r3, #0]
   d7edc:	4770      	bx	lr
   d7ede:	bf00      	nop
   d7ee0:	2003e2f4 	.word	0x2003e2f4
   d7ee4:	2003e5fc 	.word	0x2003e5fc

000d7ee8 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d7ee8:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d7eea:	6804      	ldr	r4, [r0, #0]
   d7eec:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d7eee:	46a4      	mov	ip, r4
    }
   d7ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d7ef4:	4760      	bx	ip

000d7ef6 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d7ef6:	6803      	ldr	r3, [r0, #0]
   d7ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7efa:	4718      	bx	r3

000d7efc <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d7efc:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d7efe:	4770      	bx	lr

000d7f00 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d7f00:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d7f02:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d7f04:	1a10      	subs	r0, r2, r0
   d7f06:	4770      	bx	lr

000d7f08 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d7f08:	b513      	push	{r0, r1, r4, lr}
   d7f0a:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d7f0c:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d7f0e:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d7f12:	68d4      	ldr	r4, [r2, #12]
   d7f14:	4619      	mov	r1, r3
   d7f16:	2201      	movs	r2, #1
   d7f18:	47a0      	blx	r4
}
   d7f1a:	b002      	add	sp, #8
   d7f1c:	bd10      	pop	{r4, pc}

000d7f1e <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d7f1e:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d7f20:	6803      	ldr	r3, [r0, #0]
   d7f22:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d7f24:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d7f26:	4798      	blx	r3
   d7f28:	b128      	cbz	r0, d7f36 <_ZN3UDP4readEv+0x18>
   d7f2a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d7f2c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d7f2e:	1c59      	adds	r1, r3, #1
   d7f30:	86e1      	strh	r1, [r4, #54]	; 0x36
   d7f32:	5cd0      	ldrb	r0, [r2, r3]
   d7f34:	bd10      	pop	{r4, pc}
   d7f36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d7f3a:	bd10      	pop	{r4, pc}

000d7f3c <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d7f3c:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d7f3e:	6803      	ldr	r3, [r0, #0]
   d7f40:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d7f42:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d7f44:	4798      	blx	r3
   d7f46:	b118      	cbz	r0, d7f50 <_ZN3UDP4peekEv+0x14>
   d7f48:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d7f4a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d7f4c:	5cd0      	ldrb	r0, [r2, r3]
   d7f4e:	bd10      	pop	{r4, pc}
   d7f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d7f54:	bd10      	pop	{r4, pc}

000d7f56 <_ZN3UDP5flushEv>:

void UDP::flush() {
   d7f56:	4770      	bx	lr

000d7f58 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d7f58:	b410      	push	{r4}
   d7f5a:	4603      	mov	r3, r0
   d7f5c:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d7f5e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d7f60:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d7f62:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d7f64:	6803      	ldr	r3, [r0, #0]
   d7f66:	1a52      	subs	r2, r2, r1
   d7f68:	68db      	ldr	r3, [r3, #12]
   d7f6a:	4421      	add	r1, r4
}
   d7f6c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d7f70:	4718      	bx	r3

000d7f72 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d7f72:	f1a0 0010 	sub.w	r0, r0, #16
   d7f76:	f7ff bfef 	b.w	d7f58 <_ZNK3UDP7printToER5Print>

000d7f7a <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d7f7a:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d7f7c:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d7f7e:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d7f80:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d7f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d7f84:	4604      	mov	r4, r0
   d7f86:	460f      	mov	r7, r1
   d7f88:	4615      	mov	r5, r2
    stop();
   d7f8a:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d7f8c:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d7f8e:	4632      	mov	r2, r6
   d7f90:	2100      	movs	r1, #0
   d7f92:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d7f94:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d7f96:	f000 fe7e 	bl	d8c96 <memset>
    saddr.sin6_len = sizeof(saddr);
   d7f9a:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d7f9e:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d7fa0:	260a      	movs	r6, #10
   d7fa2:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d7fa6:	f7fc fcb9 	bl	d491c <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d7faa:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d7fac:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d7fb0:	2102      	movs	r1, #2
   d7fb2:	4630      	mov	r0, r6
   d7fb4:	f7fc fcf2 	bl	d499c <sock_socket>

    if (_sock < 0) {
   d7fb8:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d7fba:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d7fbc:	db24      	blt.n	d8008 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d7fbe:	2204      	movs	r2, #4
   d7fc0:	9200      	str	r2, [sp, #0]
   d7fc2:	ab02      	add	r3, sp, #8
   d7fc4:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7fc8:	f7fc fcc8 	bl	d495c <sock_setsockopt>
   d7fcc:	b9e0      	cbnz	r0, d8008 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d7fce:	b195      	cbz	r5, d7ff6 <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d7fd0:	9003      	str	r0, [sp, #12]
   d7fd2:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d7fd6:	a903      	add	r1, sp, #12
   d7fd8:	b2e8      	uxtb	r0, r5
   d7fda:	f7fc fc5f 	bl	d489c <if_index_to_name>
   d7fde:	b998      	cbnz	r0, d8008 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d7fe0:	2306      	movs	r3, #6
   d7fe2:	9300      	str	r3, [sp, #0]
   d7fe4:	f241 020b 	movw	r2, #4107	; 0x100b
   d7fe8:	ab03      	add	r3, sp, #12
   d7fea:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7fee:	6960      	ldr	r0, [r4, #20]
   d7ff0:	f7fc fcb4 	bl	d495c <sock_setsockopt>
   d7ff4:	b940      	cbnz	r0, d8008 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d7ff6:	221c      	movs	r2, #28
   d7ff8:	a905      	add	r1, sp, #20
   d7ffa:	6960      	ldr	r0, [r4, #20]
   d7ffc:	f7fc fca6 	bl	d494c <sock_bind>
   d8000:	b910      	cbnz	r0, d8008 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d8002:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d8004:	2001      	movs	r0, #1
   d8006:	e004      	b.n	d8012 <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d8008:	6823      	ldr	r3, [r4, #0]
   d800a:	4620      	mov	r0, r4
   d800c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d800e:	4798      	blx	r3
   d8010:	2000      	movs	r0, #0
    }
    return bound;
}
   d8012:	b00d      	add	sp, #52	; 0x34
   d8014:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8016 <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d8016:	b510      	push	{r4, lr}
   d8018:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d801a:	6940      	ldr	r0, [r0, #20]
   d801c:	2800      	cmp	r0, #0
   d801e:	db01      	blt.n	d8024 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d8020:	f7fc fca4 	bl	d496c <sock_close>
    }

    _sock = -1;
   d8024:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8028:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d802a:	2300      	movs	r3, #0
   d802c:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d802e:	8723      	strh	r3, [r4, #56]	; 0x38
   d8030:	bd10      	pop	{r4, pc}

000d8032 <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d8032:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d8034:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d8036:	4605      	mov	r5, r0
   d8038:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d803a:	b113      	cbz	r3, d8042 <_ZN3UDP5writeEPKhj+0x10>
   d803c:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d803e:	1a24      	subs	r4, r4, r0
   d8040:	e000      	b.n	d8044 <_ZN3UDP5writeEPKhj+0x12>
   d8042:	461c      	mov	r4, r3
   d8044:	4294      	cmp	r4, r2
   d8046:	bf28      	it	cs
   d8048:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d804a:	4622      	mov	r2, r4
   d804c:	4418      	add	r0, r3
   d804e:	f000 fdfc 	bl	d8c4a <memcpy>
    _offset += size;
   d8052:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d8054:	4423      	add	r3, r4
   d8056:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d8058:	4620      	mov	r0, r4
   d805a:	bd38      	pop	{r3, r4, r5, pc}

000d805c <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d805c:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d805e:	6803      	ldr	r3, [r0, #0]
   d8060:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d8062:	4604      	mov	r4, r0
   d8064:	460e      	mov	r6, r1
   d8066:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d8068:	4798      	blx	r3
   d806a:	b188      	cbz	r0, d8090 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d806c:	6823      	ldr	r3, [r4, #0]
   d806e:	4620      	mov	r0, r4
   d8070:	691b      	ldr	r3, [r3, #16]
   d8072:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d8074:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d8076:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d8078:	4285      	cmp	r5, r0
   d807a:	bfa8      	it	ge
   d807c:	4605      	movge	r5, r0
   d807e:	4419      	add	r1, r3
   d8080:	462a      	mov	r2, r5
   d8082:	4630      	mov	r0, r6
   d8084:	f000 fde1 	bl	d8c4a <memcpy>
        _offset += read;
   d8088:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d808a:	442b      	add	r3, r5
   d808c:	86e3      	strh	r3, [r4, #54]	; 0x36
   d808e:	e001      	b.n	d8094 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d8090:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d8094:	4628      	mov	r0, r5
   d8096:	bd70      	pop	{r4, r5, r6, pc}

000d8098 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d8098:	b570      	push	{r4, r5, r6, lr}
   d809a:	4604      	mov	r4, r0
   d809c:	4b05      	ldr	r3, [pc, #20]	; (d80b4 <_ZN3UDP8remoteIPEv+0x1c>)
   d809e:	f844 3b04 	str.w	r3, [r4], #4
   d80a2:	f101 0520 	add.w	r5, r1, #32
   d80a6:	4606      	mov	r6, r0
   d80a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d80aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d80ac:	682b      	ldr	r3, [r5, #0]
   d80ae:	7023      	strb	r3, [r4, #0]
   d80b0:	4630      	mov	r0, r6
   d80b2:	bd70      	pop	{r4, r5, r6, pc}
   d80b4:	000d9274 	.word	0x000d9274

000d80b8 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d80b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d80ba:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d80bc:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d80be:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d80c0:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d80c2:	4a0a      	ldr	r2, [pc, #40]	; (d80ec <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d80c4:	9202      	str	r2, [sp, #8]
   d80c6:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d80c8:	468e      	mov	lr, r1
   d80ca:	4606      	mov	r6, r0
   d80cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d80ce:	ac03      	add	r4, sp, #12
   d80d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d80d2:	682b      	ldr	r3, [r5, #0]
   d80d4:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d80d6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d80da:	9300      	str	r3, [sp, #0]
   d80dc:	4662      	mov	r2, ip
   d80de:	ab02      	add	r3, sp, #8
   d80e0:	4671      	mov	r1, lr
   d80e2:	4630      	mov	r0, r6
   d80e4:	47b8      	blx	r7
    }
   d80e6:	b009      	add	sp, #36	; 0x24
   d80e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d80ea:	bf00      	nop
   d80ec:	000d9274 	.word	0x000d9274

000d80f0 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d80f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d80f2:	6803      	ldr	r3, [r0, #0]
   d80f4:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d80f8:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d80fa:	4b0d      	ldr	r3, [pc, #52]	; (d8130 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d80fc:	b089      	sub	sp, #36	; 0x24
   d80fe:	f100 0620 	add.w	r6, r0, #32
   d8102:	4604      	mov	r4, r0
   d8104:	9302      	str	r3, [sp, #8]
   d8106:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d8108:	ad03      	add	r5, sp, #12
   d810a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d810c:	6833      	ldr	r3, [r6, #0]
   d810e:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d8110:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d8112:	9300      	str	r3, [sp, #0]
   d8114:	4672      	mov	r2, lr
   d8116:	ab02      	add	r3, sp, #8
   d8118:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d811a:	4620      	mov	r0, r4
   d811c:	47b8      	blx	r7
    flush(); // wait for send to complete
   d811e:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d8120:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d8122:	69db      	ldr	r3, [r3, #28]
   d8124:	4620      	mov	r0, r4
   d8126:	4798      	blx	r3
    return result;
}
   d8128:	4628      	mov	r0, r5
   d812a:	b009      	add	sp, #36	; 0x24
   d812c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d812e:	bf00      	nop
   d8130:	000d9274 	.word	0x000d9274

000d8134 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d8134:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d8136:	7843      	ldrb	r3, [r0, #1]
   d8138:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d813a:	b08d      	sub	sp, #52	; 0x34
   d813c:	4605      	mov	r5, r0
   d813e:	460c      	mov	r4, r1
   d8140:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d8142:	d101      	bne.n	d8148 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d8144:	1d01      	adds	r1, r0, #4
   d8146:	e033      	b.n	d81b0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d8148:	2b0a      	cmp	r3, #10
   d814a:	d135      	bne.n	d81b8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d814c:	2211      	movs	r2, #17
   d814e:	2100      	movs	r1, #0
   d8150:	a801      	add	r0, sp, #4
   d8152:	f000 fda0 	bl	d8c96 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d8156:	68ab      	ldr	r3, [r5, #8]
   d8158:	b943      	cbnz	r3, d816c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d815a:	68eb      	ldr	r3, [r5, #12]
   d815c:	b933      	cbnz	r3, d816c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d815e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d8162:	692e      	ldr	r6, [r5, #16]
   d8164:	f7fc fbca 	bl	d48fc <inet_htonl>
   d8168:	4286      	cmp	r6, r0
   d816a:	d01f      	beq.n	d81ac <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d816c:	f105 0308 	add.w	r3, r5, #8
   d8170:	ae01      	add	r6, sp, #4
   d8172:	f105 0e18 	add.w	lr, r5, #24
   d8176:	6818      	ldr	r0, [r3, #0]
   d8178:	6859      	ldr	r1, [r3, #4]
   d817a:	4632      	mov	r2, r6
   d817c:	c203      	stmia	r2!, {r0, r1}
   d817e:	3308      	adds	r3, #8
   d8180:	4573      	cmp	r3, lr
   d8182:	4616      	mov	r6, r2
   d8184:	d1f7      	bne.n	d8176 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d8186:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d8188:	a901      	add	r1, sp, #4
   d818a:	a806      	add	r0, sp, #24
   d818c:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d818e:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d8192:	f7fd fe53 	bl	d5e3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8196:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d8198:	3404      	adds	r4, #4
   d819a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d819c:	6833      	ldr	r3, [r6, #0]
   d819e:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d81a0:	b157      	cbz	r7, d81b8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d81a2:	8868      	ldrh	r0, [r5, #2]
   d81a4:	f7fc fbb2 	bl	d490c <inet_ntohs>
   d81a8:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d81aa:	e005      	b.n	d81b8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d81ac:	f105 0114 	add.w	r1, r5, #20
   d81b0:	4620      	mov	r0, r4
   d81b2:	f7fd fe78 	bl	d5ea6 <_ZN9IPAddressaSEPKh>
   d81b6:	e7f3      	b.n	d81a0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d81b8:	b00d      	add	sp, #52	; 0x34
   d81ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d81bc <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d81bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d81c0:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d81c2:	ab0e      	add	r3, sp, #56	; 0x38
   d81c4:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d81c6:	4606      	mov	r6, r0
   d81c8:	4617      	mov	r7, r2
   d81ca:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d81cc:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d81d0:	462a      	mov	r2, r5
   d81d2:	4629      	mov	r1, r5
   d81d4:	f7fc fbb2 	bl	d493c <netdb_getaddrinfo>
   d81d8:	2800      	cmp	r0, #0
   d81da:	db1f      	blt.n	d821c <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d81dc:	9b01      	ldr	r3, [sp, #4]
   d81de:	b1fb      	cbz	r3, d8220 <_ZN3UDP11beginPacketEPKct+0x64>
   d81e0:	695b      	ldr	r3, [r3, #20]
   d81e2:	b1eb      	cbz	r3, d8220 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d81e4:	a802      	add	r0, sp, #8
   d81e6:	f7fd fe1b 	bl	d5e20 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d81ea:	9b01      	ldr	r3, [sp, #4]
   d81ec:	462a      	mov	r2, r5
   d81ee:	6958      	ldr	r0, [r3, #20]
   d81f0:	a902      	add	r1, sp, #8
   d81f2:	f7ff ff9f 	bl	d8134 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d81f6:	a802      	add	r0, sp, #8
   d81f8:	f7fd fe32 	bl	d5e60 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d81fc:	b180      	cbz	r0, d8220 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d81fe:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8200:	ad03      	add	r5, sp, #12
   d8202:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d8206:	4b0b      	ldr	r3, [pc, #44]	; (d8234 <_ZN3UDP11beginPacketEPKct+0x78>)
   d8208:	9308      	str	r3, [sp, #32]
   d820a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d820c:	ac09      	add	r4, sp, #36	; 0x24
   d820e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8210:	682b      	ldr	r3, [r5, #0]
   d8212:	7023      	strb	r3, [r4, #0]
   d8214:	463a      	mov	r2, r7
   d8216:	a908      	add	r1, sp, #32
   d8218:	4630      	mov	r0, r6
   d821a:	47c0      	blx	r8
   d821c:	4604      	mov	r4, r0
   d821e:	e001      	b.n	d8224 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d8220:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d8224:	9801      	ldr	r0, [sp, #4]
   d8226:	f7fc fb81 	bl	d492c <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d822a:	4620      	mov	r0, r4
   d822c:	b00e      	add	sp, #56	; 0x38
   d822e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8232:	bf00      	nop
   d8234:	000d9274 	.word	0x000d9274

000d8238 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d8238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d823c:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d8240:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d8244:	b08c      	sub	sp, #48	; 0x30
   d8246:	4605      	mov	r5, r0
   d8248:	460c      	mov	r4, r1
   d824a:	4617      	mov	r7, r2
   d824c:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d824e:	db00      	blt.n	d8252 <_ZN3UDP13receivePacketEPhjm+0x1a>
   d8250:	b911      	cbnz	r1, d8258 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d8252:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8256:	e035      	b.n	d82c4 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d8258:	f04f 0a1c 	mov.w	sl, #28
   d825c:	ae05      	add	r6, sp, #20
   d825e:	4652      	mov	r2, sl
   d8260:	2100      	movs	r1, #0
   d8262:	4630      	mov	r0, r6
   d8264:	f000 fd17 	bl	d8c96 <memset>
        socklen_t slen = sizeof(saddr);
   d8268:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d826c:	f1b9 0f00 	cmp.w	r9, #0
   d8270:	d014      	beq.n	d829c <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d8272:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8276:	fbb9 f1f2 	udiv	r1, r9, r2
   d827a:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d827c:	fb02 9111 	mls	r1, r2, r1, r9
   d8280:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d8282:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d8284:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d8286:	9300      	str	r3, [sp, #0]
   d8288:	f241 0206 	movw	r2, #4102	; 0x1006
   d828c:	ab03      	add	r3, sp, #12
   d828e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8292:	4640      	mov	r0, r8
   d8294:	f7fc fb62 	bl	d495c <sock_setsockopt>
            if (ret) {
   d8298:	b108      	cbz	r0, d829e <_ZN3UDP13receivePacketEPhjm+0x66>
   d829a:	e013      	b.n	d82c4 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d829c:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d829e:	ab02      	add	r3, sp, #8
   d82a0:	9301      	str	r3, [sp, #4]
   d82a2:	4621      	mov	r1, r4
   d82a4:	4603      	mov	r3, r0
   d82a6:	9600      	str	r6, [sp, #0]
   d82a8:	463a      	mov	r2, r7
   d82aa:	6968      	ldr	r0, [r5, #20]
   d82ac:	f7fc fb66 	bl	d497c <sock_recvfrom>
        if (ret >= 0) {
   d82b0:	1e04      	subs	r4, r0, #0
   d82b2:	db06      	blt.n	d82c2 <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d82b4:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d82b8:	f105 011c 	add.w	r1, r5, #28
   d82bc:	4630      	mov	r0, r6
   d82be:	f7ff ff39 	bl	d8134 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d82c2:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d82c4:	b00c      	add	sp, #48	; 0x30
   d82c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d82ca <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d82ca:	b538      	push	{r3, r4, r5, lr}
   d82cc:	4605      	mov	r5, r0
   d82ce:	4614      	mov	r4, r2
   d82d0:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d82d2:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d82d4:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d82d6:	d111      	bne.n	d82fc <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d82d8:	231c      	movs	r3, #28
   d82da:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d82dc:	230a      	movs	r3, #10
   d82de:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d82e0:	f7fc fb1c 	bl	d491c <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d82e4:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d82e6:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d82ea:	1d2b      	adds	r3, r5, #4
   d82ec:	3514      	adds	r5, #20
   d82ee:	f853 2b04 	ldr.w	r2, [r3], #4
   d82f2:	f844 2b04 	str.w	r2, [r4], #4
   d82f6:	42ab      	cmp	r3, r5
   d82f8:	d1f9      	bne.n	d82ee <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d82fa:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d82fc:	2b04      	cmp	r3, #4
   d82fe:	d10a      	bne.n	d8316 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d8300:	2310      	movs	r3, #16
   d8302:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d8304:	2302      	movs	r3, #2
   d8306:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d8308:	f7fc fb08 	bl	d491c <inet_htons>
   d830c:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d830e:	6868      	ldr	r0, [r5, #4]
   d8310:	f7fc faf4 	bl	d48fc <inet_htonl>
   d8314:	6060      	str	r0, [r4, #4]
   d8316:	bd38      	pop	{r3, r4, r5, pc}

000d8318 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d8318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d831c:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d831e:	ac03      	add	r4, sp, #12
   d8320:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d8322:	4699      	mov	r9, r3
   d8324:	4606      	mov	r6, r0
   d8326:	460f      	mov	r7, r1
   d8328:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d832a:	2100      	movs	r1, #0
   d832c:	462a      	mov	r2, r5
   d832e:	4620      	mov	r0, r4
   d8330:	f000 fcb1 	bl	d8c96 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d8334:	4622      	mov	r2, r4
   d8336:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d833a:	4648      	mov	r0, r9
   d833c:	f7ff ffc5 	bl	d82ca <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d8340:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d8344:	b143      	cbz	r3, d8358 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d8346:	e88d 0030 	stmia.w	sp, {r4, r5}
   d834a:	2300      	movs	r3, #0
   d834c:	4642      	mov	r2, r8
   d834e:	4639      	mov	r1, r7
   d8350:	6970      	ldr	r0, [r6, #20]
   d8352:	f7fc fb1b 	bl	d498c <sock_sendto>
   d8356:	e001      	b.n	d835c <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d8358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d835c:	b00b      	add	sp, #44	; 0x2c
   d835e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8362 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d8362:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8364:	b091      	sub	sp, #68	; 0x44
   d8366:	460c      	mov	r4, r1
   d8368:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d836a:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d836c:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d836e:	a809      	add	r0, sp, #36	; 0x24
   d8370:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d8372:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d8374:	f000 fc8f 	bl	d8c96 <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d8378:	aa09      	add	r2, sp, #36	; 0x24
   d837a:	2100      	movs	r1, #0
   d837c:	4620      	mov	r0, r4
   d837e:	f7ff ffa4 	bl	d82ca <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d8382:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d8386:	2b02      	cmp	r3, #2
   d8388:	d12e      	bne.n	d83e8 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x86>
        struct ip_mreq mreq = {};
   d838a:	2300      	movs	r3, #0
   d838c:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d838e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8390:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d8392:	b1dd      	cbz	r5, d83cc <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d8394:	a902      	add	r1, sp, #8
   d8396:	4628      	mov	r0, r5
   d8398:	f7fc fa88 	bl	d48ac <if_get_by_index>
   d839c:	b9b0      	cbnz	r0, d83cc <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
                struct if_addrs* addrs = nullptr;
   d839e:	a910      	add	r1, sp, #64	; 0x40
   d83a0:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d83a4:	9802      	ldr	r0, [sp, #8]
   d83a6:	f7fc fa89 	bl	d48bc <if_get_addrs>
   d83aa:	b960      	cbnz	r0, d83c6 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d83ac:	9b03      	ldr	r3, [sp, #12]
   d83ae:	b153      	cbz	r3, d83c6 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                        auto ifaddr = a->if_addr->addr;
   d83b0:	68da      	ldr	r2, [r3, #12]
   d83b2:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d83b4:	7851      	ldrb	r1, [r2, #1]
   d83b6:	2902      	cmp	r1, #2
   d83b8:	d103      	bne.n	d83c2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d83ba:	6852      	ldr	r2, [r2, #4]
   d83bc:	b10a      	cbz	r2, d83c2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d83be:	9205      	str	r2, [sp, #20]
   d83c0:	e001      	b.n	d83c6 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d83c2:	681b      	ldr	r3, [r3, #0]
   d83c4:	e7f3      	b.n	d83ae <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d83c6:	9803      	ldr	r0, [sp, #12]
   d83c8:	f7fc fa80 	bl	d48cc <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d83cc:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d83ce:	f04f 0308 	mov.w	r3, #8
   d83d2:	9300      	str	r3, [sp, #0]
   d83d4:	bf18      	it	ne
   d83d6:	2203      	movne	r2, #3
   d83d8:	ab04      	add	r3, sp, #16
   d83da:	bf08      	it	eq
   d83dc:	2204      	moveq	r2, #4
   d83de:	2100      	movs	r1, #0
   d83e0:	4630      	mov	r0, r6
   d83e2:	f7fc fabb 	bl	d495c <sock_setsockopt>
   d83e6:	e01e      	b.n	d8426 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d83e8:	2b0a      	cmp	r3, #10
   d83ea:	d11a      	bne.n	d8422 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc0>
        struct ipv6_mreq mreq = {};
   d83ec:	ac04      	add	r4, sp, #16
   d83ee:	2214      	movs	r2, #20
   d83f0:	2100      	movs	r1, #0
   d83f2:	4620      	mov	r0, r4
   d83f4:	f000 fc4f 	bl	d8c96 <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d83f8:	ab0b      	add	r3, sp, #44	; 0x2c
   d83fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d83fc:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d83fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d8402:	f04f 0314 	mov.w	r3, #20
   d8406:	9300      	str	r3, [sp, #0]
   d8408:	bf18      	it	ne
   d840a:	220c      	movne	r2, #12
   d840c:	4623      	mov	r3, r4
   d840e:	bf08      	it	eq
   d8410:	220d      	moveq	r2, #13
   d8412:	2129      	movs	r1, #41	; 0x29
   d8414:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d8416:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d8418:	f7fc faa0 	bl	d495c <sock_setsockopt>
   d841c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d8420:	e001      	b.n	d8426 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d8422:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d8426:	b011      	add	sp, #68	; 0x44
   d8428:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d842c <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d842c:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d842e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8432:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d8434:	4b0b      	ldr	r3, [pc, #44]	; (d8464 <_ZN3UDPC1Ev+0x38>)
   d8436:	f103 0208 	add.w	r2, r3, #8
   d843a:	336c      	adds	r3, #108	; 0x6c
   d843c:	2500      	movs	r5, #0
   d843e:	6103      	str	r3, [r0, #16]
   d8440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return -1;
}

} // anonymous

UDP::UDP()
   d8444:	4604      	mov	r4, r0
   d8446:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d8448:	6002      	str	r2, [r0, #0]
   d844a:	6143      	str	r3, [r0, #20]
   d844c:	301c      	adds	r0, #28
   d844e:	f7fd fce7 	bl	d5e20 <_ZN9IPAddressC1Ev>
   d8452:	f44f 7300 	mov.w	r3, #512	; 0x200
   d8456:	86e5      	strh	r5, [r4, #54]	; 0x36
   d8458:	8725      	strh	r5, [r4, #56]	; 0x38
   d845a:	63e5      	str	r5, [r4, #60]	; 0x3c
   d845c:	6423      	str	r3, [r4, #64]	; 0x40
   d845e:	6465      	str	r5, [r4, #68]	; 0x44
}
   d8460:	4620      	mov	r0, r4
   d8462:	bd38      	pop	{r3, r4, r5, pc}
   d8464:	000d94d8 	.word	0x000d94d8

000d8468 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d8468:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d846a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d846e:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d8470:	b123      	cbz	r3, d847c <_ZN3UDP13releaseBufferEv+0x14>
   d8472:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d8474:	b110      	cbz	r0, d847c <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d8476:	2101      	movs	r1, #1
   d8478:	f000 fa5f 	bl	d893a <_ZdlPvj>
    }
    _buffer = NULL;
   d847c:	2300      	movs	r3, #0
   d847e:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d8480:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d8484:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d8486:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d8488:	8723      	strh	r3, [r4, #56]	; 0x38
   d848a:	bd10      	pop	{r4, pc}

000d848c <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d848c:	b570      	push	{r4, r5, r6, lr}
   d848e:	4604      	mov	r4, r0
   d8490:	4616      	mov	r6, r2
   d8492:	460d      	mov	r5, r1
    releaseBuffer();
   d8494:	f7ff ffe8 	bl	d8468 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d8498:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d849a:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d849c:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d849e:	b93e      	cbnz	r6, d84b0 <_ZN3UDP9setBufferEjPh+0x24>
   d84a0:	b135      	cbz	r5, d84b0 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d84a2:	4628      	mov	r0, r5
   d84a4:	f7fb fdf9 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d84a8:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d84aa:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d84ac:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d84b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d84b2:	b103      	cbz	r3, d84b6 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d84b4:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d84b6:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d84b8:	3000      	adds	r0, #0
   d84ba:	bf18      	it	ne
   d84bc:	2001      	movne	r0, #1
   d84be:	bd70      	pop	{r4, r5, r6, pc}

000d84c0 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d84c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d84c2:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d84c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d84c6:	4605      	mov	r5, r0
   d84c8:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d84ca:	b91a      	cbnz	r2, d84d4 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d84cc:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d84ce:	b109      	cbz	r1, d84d4 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d84d0:	f7ff ffdc 	bl	d848c <_ZN3UDP9setBufferEjPh>
   d84d4:	3404      	adds	r4, #4
   d84d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d84d8:	f105 0620 	add.w	r6, r5, #32
   d84dc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d84de:	6823      	ldr	r3, [r4, #0]
   d84e0:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d84e2:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d84e4:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d84e6:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d84e8:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d84ea:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d84ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d84ee <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d84ee:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d84f0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d84f2:	4604      	mov	r4, r0
   d84f4:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   d84f6:	b91a      	cbnz	r2, d8500 <_ZN3UDP11parsePacketEm+0x12>
   d84f8:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d84fa:	b109      	cbz	r1, d8500 <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   d84fc:	f7ff ffc6 	bl	d848c <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d8500:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d8502:	2200      	movs	r2, #0
   d8504:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d8506:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d8508:	b149      	cbz	r1, d851e <_ZN3UDP11parsePacketEm+0x30>
   d850a:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d850c:	b13a      	cbz	r2, d851e <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d850e:	6823      	ldr	r3, [r4, #0]
   d8510:	4620      	mov	r0, r4
   d8512:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   d8514:	4633      	mov	r3, r6
   d8516:	47a8      	blx	r5
        if (result > 0) {
   d8518:	2800      	cmp	r0, #0
            _total = result;
   d851a:	bfc8      	it	gt
   d851c:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d851e:	6823      	ldr	r3, [r4, #0]
   d8520:	4620      	mov	r0, r4
   d8522:	691b      	ldr	r3, [r3, #16]
}
   d8524:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d8528:	4718      	bx	r3
	...

000d852c <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d852c:	b510      	push	{r4, lr}
   d852e:	4b07      	ldr	r3, [pc, #28]	; (d854c <_ZN3UDPD1Ev+0x20>)
   d8530:	f103 0208 	add.w	r2, r3, #8
   d8534:	336c      	adds	r3, #108	; 0x6c
   d8536:	4604      	mov	r4, r0
   d8538:	6002      	str	r2, [r0, #0]
   d853a:	6103      	str	r3, [r0, #16]
   d853c:	f7ff fd6b 	bl	d8016 <_ZN3UDP4stopEv>
   d8540:	4620      	mov	r0, r4
   d8542:	f7ff ff91 	bl	d8468 <_ZN3UDP13releaseBufferEv>
   d8546:	4620      	mov	r0, r4
   d8548:	bd10      	pop	{r4, pc}
   d854a:	bf00      	nop
   d854c:	000d94d8 	.word	0x000d94d8

000d8550 <_ZN3UDPD0Ev>:
   d8550:	b510      	push	{r4, lr}
   d8552:	4604      	mov	r4, r0
   d8554:	f7ff ffea 	bl	d852c <_ZN3UDPD1Ev>
   d8558:	4620      	mov	r0, r4
   d855a:	214c      	movs	r1, #76	; 0x4c
   d855c:	f000 f9ed 	bl	d893a <_ZdlPvj>
   d8560:	4620      	mov	r0, r4
   d8562:	bd10      	pop	{r4, pc}

000d8564 <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d8564:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d8566:	6940      	ldr	r0, [r0, #20]
   d8568:	2800      	cmp	r0, #0
   d856a:	db04      	blt.n	d8576 <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d856c:	2301      	movs	r3, #1
   d856e:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d8572:	f7ff bef6 	b.w	d8362 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>
}
   d8576:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d857a:	4770      	bx	lr

000d857c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d857c:	4770      	bx	lr

000d857e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d857e:	7441      	strb	r1, [r0, #17]
   d8580:	4770      	bx	lr

000d8582 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d8582:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d8584:	7c00      	ldrb	r0, [r0, #16]
   d8586:	f7fc fa49 	bl	d4a1c <HAL_USART_Available_Data_For_Write>
}
   d858a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d858e:	bd08      	pop	{r3, pc}

000d8590 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d8590:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d8592:	7c00      	ldrb	r0, [r0, #16]
   d8594:	f7fc fa22 	bl	d49dc <HAL_USART_Available_Data>
}
   d8598:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d859c:	bd08      	pop	{r3, pc}

000d859e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d859e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d85a0:	7c00      	ldrb	r0, [r0, #16]
   d85a2:	f7fc fa2b 	bl	d49fc <HAL_USART_Peek_Data>
}
   d85a6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d85aa:	bf28      	it	cs
   d85ac:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d85b0:	bd08      	pop	{r3, pc}

000d85b2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d85b2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d85b4:	7c00      	ldrb	r0, [r0, #16]
   d85b6:	f7fc fa19 	bl	d49ec <HAL_USART_Read_Data>
}
   d85ba:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d85be:	bf28      	it	cs
   d85c0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d85c4:	bd08      	pop	{r3, pc}

000d85c6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d85c6:	7c00      	ldrb	r0, [r0, #16]
   d85c8:	f7fc ba20 	b.w	d4a0c <HAL_USART_Flush_Data>

000d85cc <_ZN11USARTSerialD0Ev>:
   d85cc:	b510      	push	{r4, lr}
   d85ce:	2114      	movs	r1, #20
   d85d0:	4604      	mov	r4, r0
   d85d2:	f000 f9b2 	bl	d893a <_ZdlPvj>
   d85d6:	4620      	mov	r0, r4
   d85d8:	bd10      	pop	{r4, pc}

000d85da <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d85da:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d85dc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d85de:	4604      	mov	r4, r0
   d85e0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d85e2:	b925      	cbnz	r5, d85ee <_ZN11USARTSerial5writeEh+0x14>
   d85e4:	7c00      	ldrb	r0, [r0, #16]
   d85e6:	f7fc fa19 	bl	d4a1c <HAL_USART_Available_Data_For_Write>
   d85ea:	2800      	cmp	r0, #0
   d85ec:	dd05      	ble.n	d85fa <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d85ee:	4631      	mov	r1, r6
   d85f0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d85f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d85f6:	f7fc b9e9 	b.w	d49cc <HAL_USART_Write_Data>
  }
  return 0;
}
   d85fa:	4628      	mov	r0, r5
   d85fc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8600 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d8600:	b510      	push	{r4, lr}
   d8602:	4604      	mov	r4, r0
   d8604:	4608      	mov	r0, r1
   d8606:	4611      	mov	r1, r2
   d8608:	2200      	movs	r2, #0
   d860a:	6062      	str	r2, [r4, #4]
   d860c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8610:	60a2      	str	r2, [r4, #8]
   d8612:	4a05      	ldr	r2, [pc, #20]	; (d8628 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d8614:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d8616:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d8618:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d861a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d861c:	461a      	mov	r2, r3
   d861e:	f7fc f9c5 	bl	d49ac <HAL_USART_Init>
}
   d8622:	4620      	mov	r0, r4
   d8624:	bd10      	pop	{r4, pc}
   d8626:	bf00      	nop
   d8628:	000d9550 	.word	0x000d9550

000d862c <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d862c:	2300      	movs	r3, #0
   d862e:	7c00      	ldrb	r0, [r0, #16]
   d8630:	f7fc b9fc 	b.w	d4a2c <HAL_USART_BeginConfig>

000d8634 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d8634:	2200      	movs	r2, #0
   d8636:	f7ff bff9 	b.w	d862c <_ZN11USARTSerial5beginEmm>

000d863a <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d863a:	7c00      	ldrb	r0, [r0, #16]
   d863c:	f7fc b9be 	b.w	d49bc <HAL_USART_End>

000d8640 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d8640:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d8642:	4d0c      	ldr	r5, [pc, #48]	; (d8674 <_Z22__fetch_global_Serial1v+0x34>)
   d8644:	6829      	ldr	r1, [r5, #0]
   d8646:	f011 0401 	ands.w	r4, r1, #1
   d864a:	d111      	bne.n	d8670 <_Z22__fetch_global_Serial1v+0x30>
   d864c:	4628      	mov	r0, r5
   d864e:	f7fb fd35 	bl	d40bc <__cxa_guard_acquire>
   d8652:	b168      	cbz	r0, d8670 <_Z22__fetch_global_Serial1v+0x30>
   d8654:	4a08      	ldr	r2, [pc, #32]	; (d8678 <_Z22__fetch_global_Serial1v+0x38>)
   d8656:	4b09      	ldr	r3, [pc, #36]	; (d867c <_Z22__fetch_global_Serial1v+0x3c>)
   d8658:	4809      	ldr	r0, [pc, #36]	; (d8680 <_Z22__fetch_global_Serial1v+0x40>)
   d865a:	4621      	mov	r1, r4
   d865c:	f7ff ffd0 	bl	d8600 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d8660:	4628      	mov	r0, r5
   d8662:	f7fb fd30 	bl	d40c6 <__cxa_guard_release>
   d8666:	4a07      	ldr	r2, [pc, #28]	; (d8684 <_Z22__fetch_global_Serial1v+0x44>)
   d8668:	4907      	ldr	r1, [pc, #28]	; (d8688 <_Z22__fetch_global_Serial1v+0x48>)
   d866a:	4805      	ldr	r0, [pc, #20]	; (d8680 <_Z22__fetch_global_Serial1v+0x40>)
   d866c:	f000 f960 	bl	d8930 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d8670:	4803      	ldr	r0, [pc, #12]	; (d8680 <_Z22__fetch_global_Serial1v+0x40>)
   d8672:	bd38      	pop	{r3, r4, r5, pc}
   d8674:	2003e698 	.word	0x2003e698
   d8678:	2003e69c 	.word	0x2003e69c
   d867c:	2003e614 	.word	0x2003e614
   d8680:	2003e600 	.word	0x2003e600
   d8684:	2003e360 	.word	0x2003e360
   d8688:	000d857d 	.word	0x000d857d

000d868c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d868c:	7441      	strb	r1, [r0, #17]
   d868e:	4770      	bx	lr

000d8690 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d8690:	4770      	bx	lr

000d8692 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d8692:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d8694:	2100      	movs	r1, #0
   d8696:	7c00      	ldrb	r0, [r0, #16]
   d8698:	f7fc f9f8 	bl	d4a8c <HAL_USB_USART_Receive_Data>
}
   d869c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d86a0:	bf28      	it	cs
   d86a2:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d86a6:	bd08      	pop	{r3, pc}

000d86a8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d86a8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d86aa:	2101      	movs	r1, #1
   d86ac:	7c00      	ldrb	r0, [r0, #16]
   d86ae:	f7fc f9ed 	bl	d4a8c <HAL_USB_USART_Receive_Data>
}
   d86b2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d86b6:	bf28      	it	cs
   d86b8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d86bc:	bd08      	pop	{r3, pc}

000d86be <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d86be:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d86c0:	7c00      	ldrb	r0, [r0, #16]
   d86c2:	f7fc f9db 	bl	d4a7c <HAL_USB_USART_Available_Data_For_Write>
}
   d86c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d86ca:	bd08      	pop	{r3, pc}

000d86cc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d86cc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d86ce:	7c00      	ldrb	r0, [r0, #16]
   d86d0:	f7fc f9cc 	bl	d4a6c <HAL_USB_USART_Available_Data>
}
   d86d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d86d8:	bd08      	pop	{r3, pc}

000d86da <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d86da:	7c00      	ldrb	r0, [r0, #16]
   d86dc:	f7fc b9e6 	b.w	d4aac <HAL_USB_USART_Flush_Data>

000d86e0 <_ZN9USBSerialD0Ev>:
   d86e0:	b510      	push	{r4, lr}
   d86e2:	2114      	movs	r1, #20
   d86e4:	4604      	mov	r4, r0
   d86e6:	f000 f928 	bl	d893a <_ZdlPvj>
   d86ea:	4620      	mov	r0, r4
   d86ec:	bd10      	pop	{r4, pc}

000d86ee <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d86ee:	b538      	push	{r3, r4, r5, lr}
   d86f0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d86f2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d86f4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d86f6:	f7fc f9c1 	bl	d4a7c <HAL_USB_USART_Available_Data_For_Write>
   d86fa:	2800      	cmp	r0, #0
   d86fc:	dc01      	bgt.n	d8702 <_ZN9USBSerial5writeEh+0x14>
   d86fe:	7c60      	ldrb	r0, [r4, #17]
   d8700:	b128      	cbz	r0, d870e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d8702:	4629      	mov	r1, r5
   d8704:	7c20      	ldrb	r0, [r4, #16]
   d8706:	f7fc f9c9 	bl	d4a9c <HAL_USB_USART_Send_Data>
   d870a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d870e:	bd38      	pop	{r3, r4, r5, pc}

000d8710 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8710:	b510      	push	{r4, lr}
   d8712:	4604      	mov	r4, r0
   d8714:	2300      	movs	r3, #0
   d8716:	6063      	str	r3, [r4, #4]
   d8718:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d871c:	60a3      	str	r3, [r4, #8]
   d871e:	4b05      	ldr	r3, [pc, #20]	; (d8734 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d8720:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d8722:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8724:	4608      	mov	r0, r1
{
  _serial = serial;
   d8726:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d8728:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d872a:	4611      	mov	r1, r2
   d872c:	f7fc f986 	bl	d4a3c <HAL_USB_USART_Init>
}
   d8730:	4620      	mov	r0, r4
   d8732:	bd10      	pop	{r4, pc}
   d8734:	000d9580 	.word	0x000d9580

000d8738 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d8738:	2200      	movs	r2, #0
   d873a:	7c00      	ldrb	r0, [r0, #16]
   d873c:	f7fc b986 	b.w	d4a4c <HAL_USB_USART_Begin>

000d8740 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d8740:	7c00      	ldrb	r0, [r0, #16]
   d8742:	f7fc b98b 	b.w	d4a5c <HAL_USB_USART_End>

000d8746 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8746:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8748:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d874a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d874c:	2100      	movs	r1, #0
   d874e:	f000 faa2 	bl	d8c96 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d8752:	4620      	mov	r0, r4
   d8754:	bd10      	pop	{r4, pc}
	...

000d8758 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8758:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d875a:	4d0e      	ldr	r5, [pc, #56]	; (d8794 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d875c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d875e:	a801      	add	r0, sp, #4
   d8760:	f7ff fff1 	bl	d8746 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8764:	6829      	ldr	r1, [r5, #0]
   d8766:	f011 0401 	ands.w	r4, r1, #1
   d876a:	d110      	bne.n	d878e <_Z16_fetch_usbserialv+0x36>
   d876c:	4628      	mov	r0, r5
   d876e:	f7fb fca5 	bl	d40bc <__cxa_guard_acquire>
   d8772:	b160      	cbz	r0, d878e <_Z16_fetch_usbserialv+0x36>
   d8774:	aa01      	add	r2, sp, #4
   d8776:	4621      	mov	r1, r4
   d8778:	4807      	ldr	r0, [pc, #28]	; (d8798 <_Z16_fetch_usbserialv+0x40>)
   d877a:	f7ff ffc9 	bl	d8710 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d877e:	4628      	mov	r0, r5
   d8780:	f7fb fca1 	bl	d40c6 <__cxa_guard_release>
   d8784:	4a05      	ldr	r2, [pc, #20]	; (d879c <_Z16_fetch_usbserialv+0x44>)
   d8786:	4906      	ldr	r1, [pc, #24]	; (d87a0 <_Z16_fetch_usbserialv+0x48>)
   d8788:	4803      	ldr	r0, [pc, #12]	; (d8798 <_Z16_fetch_usbserialv+0x40>)
   d878a:	f000 f8d1 	bl	d8930 <__aeabi_atexit>
	return _usbserial;
}
   d878e:	4802      	ldr	r0, [pc, #8]	; (d8798 <_Z16_fetch_usbserialv+0x40>)
   d8790:	b007      	add	sp, #28
   d8792:	bd30      	pop	{r4, r5, pc}
   d8794:	2003e720 	.word	0x2003e720
   d8798:	2003e724 	.word	0x2003e724
   d879c:	2003e360 	.word	0x2003e360
   d87a0:	000d8691 	.word	0x000d8691

000d87a4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d87a4:	2200      	movs	r2, #0
   d87a6:	4611      	mov	r1, r2
   d87a8:	6840      	ldr	r0, [r0, #4]
   d87aa:	f7fc ba2d 	b.w	d4c08 <network_ready>

000d87ae <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d87ae:	2200      	movs	r2, #0
   d87b0:	4611      	mov	r1, r2
   d87b2:	6840      	ldr	r0, [r0, #4]
   d87b4:	f7fc ba48 	b.w	d4c48 <network_listening>

000d87b8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d87b8:	2200      	movs	r2, #0
   d87ba:	4611      	mov	r1, r2
   d87bc:	6840      	ldr	r0, [r0, #4]
   d87be:	f7fc ba53 	b.w	d4c68 <network_get_listen_timeout>

000d87c2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d87c2:	2200      	movs	r2, #0
   d87c4:	6840      	ldr	r0, [r0, #4]
   d87c6:	f7fc ba47 	b.w	d4c58 <network_set_listen_timeout>

000d87ca <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d87ca:	2200      	movs	r2, #0
   d87cc:	f081 0101 	eor.w	r1, r1, #1
   d87d0:	6840      	ldr	r0, [r0, #4]
   d87d2:	f7fc ba31 	b.w	d4c38 <network_listen>

000d87d6 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d87d6:	2300      	movs	r3, #0
   d87d8:	461a      	mov	r2, r3
   d87da:	4619      	mov	r1, r3
   d87dc:	6840      	ldr	r0, [r0, #4]
   d87de:	f7fc ba23 	b.w	d4c28 <network_off>

000d87e2 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d87e2:	2300      	movs	r3, #0
   d87e4:	461a      	mov	r2, r3
   d87e6:	4619      	mov	r1, r3
   d87e8:	6840      	ldr	r0, [r0, #4]
   d87ea:	f7fc ba15 	b.w	d4c18 <network_on>

000d87ee <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d87ee:	2200      	movs	r2, #0
   d87f0:	4611      	mov	r1, r2
   d87f2:	6840      	ldr	r0, [r0, #4]
   d87f4:	f7fc b9f8 	b.w	d4be8 <network_connecting>

000d87f8 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d87f8:	2200      	movs	r2, #0
   d87fa:	2102      	movs	r1, #2
   d87fc:	6840      	ldr	r0, [r0, #4]
   d87fe:	f7fc b9fb 	b.w	d4bf8 <network_disconnect>

000d8802 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8802:	2300      	movs	r3, #0
   d8804:	461a      	mov	r2, r3
   d8806:	6840      	ldr	r0, [r0, #4]
   d8808:	f7fc b9e6 	b.w	d4bd8 <network_connect>

000d880c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d880c:	4b02      	ldr	r3, [pc, #8]	; (d8818 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d880e:	2204      	movs	r2, #4
   d8810:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d8812:	4a02      	ldr	r2, [pc, #8]	; (d881c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d8814:	601a      	str	r2, [r3, #0]
   d8816:	4770      	bx	lr
   d8818:	2003e738 	.word	0x2003e738
   d881c:	000d95b0 	.word	0x000d95b0

000d8820 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d8820:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d8822:	4b0c      	ldr	r3, [pc, #48]	; (d8854 <serialEventRun+0x34>)
   d8824:	b133      	cbz	r3, d8834 <serialEventRun+0x14>
   d8826:	f7ff ff97 	bl	d8758 <_Z16_fetch_usbserialv>
   d882a:	6803      	ldr	r3, [r0, #0]
   d882c:	691b      	ldr	r3, [r3, #16]
   d882e:	4798      	blx	r3
   d8830:	2800      	cmp	r0, #0
   d8832:	dc09      	bgt.n	d8848 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d8834:	4b08      	ldr	r3, [pc, #32]	; (d8858 <serialEventRun+0x38>)
   d8836:	b163      	cbz	r3, d8852 <serialEventRun+0x32>
   d8838:	f7ff ff02 	bl	d8640 <_Z22__fetch_global_Serial1v>
   d883c:	6803      	ldr	r3, [r0, #0]
   d883e:	691b      	ldr	r3, [r3, #16]
   d8840:	4798      	blx	r3
   d8842:	2800      	cmp	r0, #0
   d8844:	dc03      	bgt.n	d884e <serialEventRun+0x2e>
   d8846:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d8848:	f3af 8000 	nop.w
   d884c:	e7f2      	b.n	d8834 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d884e:	f3af 8000 	nop.w
   d8852:	bd08      	pop	{r3, pc}
	...

000d885c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d885c:	b508      	push	{r3, lr}
	serialEventRun();
   d885e:	f7ff ffdf 	bl	d8820 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8862:	f7fc f803 	bl	d486c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d8866:	4b01      	ldr	r3, [pc, #4]	; (d886c <_post_loop+0x10>)
   d8868:	6018      	str	r0, [r3, #0]
   d886a:	bd08      	pop	{r3, pc}
   d886c:	2003e748 	.word	0x2003e748

000d8870 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8870:	4802      	ldr	r0, [pc, #8]	; (d887c <_Z33system_initialize_user_backup_ramv+0xc>)
   d8872:	4a03      	ldr	r2, [pc, #12]	; (d8880 <_Z33system_initialize_user_backup_ramv+0x10>)
   d8874:	4903      	ldr	r1, [pc, #12]	; (d8884 <_Z33system_initialize_user_backup_ramv+0x14>)
   d8876:	1a12      	subs	r2, r2, r0
   d8878:	f000 b9e7 	b.w	d8c4a <memcpy>
   d887c:	2003f400 	.word	0x2003f400
   d8880:	2003f404 	.word	0x2003f404
   d8884:	000d9780 	.word	0x000d9780

000d8888 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8888:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d888a:	2300      	movs	r3, #0
   d888c:	9300      	str	r3, [sp, #0]
   d888e:	461a      	mov	r2, r3
   d8890:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8894:	f7fc f97c 	bl	d4b90 <system_ctrl_set_result>
}
   d8898:	b003      	add	sp, #12
   d889a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d88a0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d88a0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d88a2:	8843      	ldrh	r3, [r0, #2]
   d88a4:	2b0a      	cmp	r3, #10
   d88a6:	d008      	beq.n	d88ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d88a8:	2b50      	cmp	r3, #80	; 0x50
   d88aa:	d109      	bne.n	d88c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d88ac:	4b09      	ldr	r3, [pc, #36]	; (d88d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d88ae:	681b      	ldr	r3, [r3, #0]
   d88b0:	b13b      	cbz	r3, d88c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d88b2:	b003      	add	sp, #12
   d88b4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d88b8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d88ba:	f7ff ffe5 	bl	d8888 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d88be:	e006      	b.n	d88ce <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d88c0:	2300      	movs	r3, #0
   d88c2:	9300      	str	r3, [sp, #0]
   d88c4:	461a      	mov	r2, r3
   d88c6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d88ca:	f7fc f961 	bl	d4b90 <system_ctrl_set_result>
        break;
    }
}
   d88ce:	b003      	add	sp, #12
   d88d0:	f85d fb04 	ldr.w	pc, [sp], #4
   d88d4:	2003e740 	.word	0x2003e740

000d88d8 <module_user_init_hook>:

void module_user_init_hook()
{
   d88d8:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d88da:	4c10      	ldr	r4, [pc, #64]	; (d891c <module_user_init_hook+0x44>)
   d88dc:	4d10      	ldr	r5, [pc, #64]	; (d8920 <module_user_init_hook+0x48>)
   d88de:	6823      	ldr	r3, [r4, #0]
   d88e0:	42ab      	cmp	r3, r5
   d88e2:	4b10      	ldr	r3, [pc, #64]	; (d8924 <module_user_init_hook+0x4c>)
   d88e4:	bf0c      	ite	eq
   d88e6:	2201      	moveq	r2, #1
   d88e8:	2200      	movne	r2, #0
   d88ea:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d88ec:	d002      	beq.n	d88f4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d88ee:	f7ff ffbf 	bl	d8870 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d88f2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d88f4:	f7fb ffa2 	bl	d483c <HAL_RNG_GetRandomNumber>
   d88f8:	4604      	mov	r4, r0
    srand(seed);
   d88fa:	f000 f9d5 	bl	d8ca8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d88fe:	4b0a      	ldr	r3, [pc, #40]	; (d8928 <module_user_init_hook+0x50>)
   d8900:	b113      	cbz	r3, d8908 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d8902:	4620      	mov	r0, r4
   d8904:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8908:	2100      	movs	r1, #0
   d890a:	4807      	ldr	r0, [pc, #28]	; (d8928 <module_user_init_hook+0x50>)
   d890c:	f7fc f95c 	bl	d4bc8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8910:	2100      	movs	r1, #0
   d8912:	4806      	ldr	r0, [pc, #24]	; (d892c <module_user_init_hook+0x54>)
}
   d8914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8918:	f7fc b930 	b.w	d4b7c <system_ctrl_set_app_request_handler>
   d891c:	2003f400 	.word	0x2003f400
   d8920:	9a271c1e 	.word	0x9a271c1e
   d8924:	2003e744 	.word	0x2003e744
   d8928:	00000000 	.word	0x00000000
   d892c:	000d88a1 	.word	0x000d88a1

000d8930 <__aeabi_atexit>:
   d8930:	460b      	mov	r3, r1
   d8932:	4601      	mov	r1, r0
   d8934:	4618      	mov	r0, r3
   d8936:	f000 b96b 	b.w	d8c10 <__cxa_atexit>

000d893a <_ZdlPvj>:
   d893a:	f7fb bbb0 	b.w	d409e <_ZdlPv>
	...

000d8940 <_ZSt15get_new_handlerv>:
   d8940:	4b02      	ldr	r3, [pc, #8]	; (d894c <_ZSt15get_new_handlerv+0xc>)
   d8942:	6818      	ldr	r0, [r3, #0]
   d8944:	f3bf 8f5f 	dmb	sy
   d8948:	4770      	bx	lr
   d894a:	bf00      	nop
   d894c:	2003e74c 	.word	0x2003e74c

000d8950 <_ZnwjRKSt9nothrow_t>:
   d8950:	b510      	push	{r4, lr}
   d8952:	2800      	cmp	r0, #0
   d8954:	bf14      	ite	ne
   d8956:	4604      	movne	r4, r0
   d8958:	2401      	moveq	r4, #1
   d895a:	4620      	mov	r0, r4
   d895c:	f7fc f98c 	bl	d4c78 <malloc>
   d8960:	b920      	cbnz	r0, d896c <_ZnwjRKSt9nothrow_t+0x1c>
   d8962:	f7ff ffed 	bl	d8940 <_ZSt15get_new_handlerv>
   d8966:	b108      	cbz	r0, d896c <_ZnwjRKSt9nothrow_t+0x1c>
   d8968:	4780      	blx	r0
   d896a:	e7f6      	b.n	d895a <_ZnwjRKSt9nothrow_t+0xa>
   d896c:	bd10      	pop	{r4, pc}

000d896e <_ZnajRKSt9nothrow_t>:
   d896e:	f7ff bfef 	b.w	d8950 <_ZnwjRKSt9nothrow_t>

000d8972 <_ZSt25__throw_bad_function_callv>:
   d8972:	b508      	push	{r3, lr}
   d8974:	f7fc f9a0 	bl	d4cb8 <abort>

000d8978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d8978:	4b24      	ldr	r3, [pc, #144]	; (d8a0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d897a:	681a      	ldr	r2, [r3, #0]
   d897c:	07d0      	lsls	r0, r2, #31
   d897e:	bf5c      	itt	pl
   d8980:	2201      	movpl	r2, #1
   d8982:	601a      	strpl	r2, [r3, #0]
   d8984:	4b22      	ldr	r3, [pc, #136]	; (d8a10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d8986:	681a      	ldr	r2, [r3, #0]
   d8988:	07d1      	lsls	r1, r2, #31
   d898a:	bf5c      	itt	pl
   d898c:	2201      	movpl	r2, #1
   d898e:	601a      	strpl	r2, [r3, #0]
   d8990:	4b20      	ldr	r3, [pc, #128]	; (d8a14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8992:	681a      	ldr	r2, [r3, #0]
   d8994:	07d2      	lsls	r2, r2, #31
   d8996:	bf5c      	itt	pl
   d8998:	2201      	movpl	r2, #1
   d899a:	601a      	strpl	r2, [r3, #0]
   d899c:	4b1e      	ldr	r3, [pc, #120]	; (d8a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d899e:	681a      	ldr	r2, [r3, #0]
   d89a0:	07d0      	lsls	r0, r2, #31
   d89a2:	bf5c      	itt	pl
   d89a4:	2201      	movpl	r2, #1
   d89a6:	601a      	strpl	r2, [r3, #0]
   d89a8:	4b1c      	ldr	r3, [pc, #112]	; (d8a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d89aa:	681a      	ldr	r2, [r3, #0]
   d89ac:	07d1      	lsls	r1, r2, #31
   d89ae:	bf5c      	itt	pl
   d89b0:	2201      	movpl	r2, #1
   d89b2:	601a      	strpl	r2, [r3, #0]
   d89b4:	4b1a      	ldr	r3, [pc, #104]	; (d8a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d89b6:	681a      	ldr	r2, [r3, #0]
   d89b8:	07d2      	lsls	r2, r2, #31
   d89ba:	bf5c      	itt	pl
   d89bc:	2201      	movpl	r2, #1
   d89be:	601a      	strpl	r2, [r3, #0]
   d89c0:	4b18      	ldr	r3, [pc, #96]	; (d8a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d89c2:	681a      	ldr	r2, [r3, #0]
   d89c4:	07d0      	lsls	r0, r2, #31
   d89c6:	bf5c      	itt	pl
   d89c8:	2201      	movpl	r2, #1
   d89ca:	601a      	strpl	r2, [r3, #0]
   d89cc:	4b16      	ldr	r3, [pc, #88]	; (d8a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d89ce:	681a      	ldr	r2, [r3, #0]
   d89d0:	07d1      	lsls	r1, r2, #31
   d89d2:	bf5c      	itt	pl
   d89d4:	2201      	movpl	r2, #1
   d89d6:	601a      	strpl	r2, [r3, #0]
   d89d8:	4b14      	ldr	r3, [pc, #80]	; (d8a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d89da:	681a      	ldr	r2, [r3, #0]
   d89dc:	07d2      	lsls	r2, r2, #31
   d89de:	bf5c      	itt	pl
   d89e0:	2201      	movpl	r2, #1
   d89e2:	601a      	strpl	r2, [r3, #0]
   d89e4:	4b12      	ldr	r3, [pc, #72]	; (d8a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d89e6:	681a      	ldr	r2, [r3, #0]
   d89e8:	07d0      	lsls	r0, r2, #31
   d89ea:	bf5c      	itt	pl
   d89ec:	2201      	movpl	r2, #1
   d89ee:	601a      	strpl	r2, [r3, #0]
   d89f0:	4b10      	ldr	r3, [pc, #64]	; (d8a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d89f2:	681a      	ldr	r2, [r3, #0]
   d89f4:	07d1      	lsls	r1, r2, #31
   d89f6:	bf5c      	itt	pl
   d89f8:	2201      	movpl	r2, #1
   d89fa:	601a      	strpl	r2, [r3, #0]
   d89fc:	4b0e      	ldr	r3, [pc, #56]	; (d8a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d89fe:	681a      	ldr	r2, [r3, #0]
   d8a00:	07d2      	lsls	r2, r2, #31
   d8a02:	bf5c      	itt	pl
   d8a04:	2201      	movpl	r2, #1
   d8a06:	601a      	strpl	r2, [r3, #0]
   d8a08:	4770      	bx	lr
   d8a0a:	bf00      	nop
   d8a0c:	2003e77c 	.word	0x2003e77c
   d8a10:	2003e778 	.word	0x2003e778
   d8a14:	2003e774 	.word	0x2003e774
   d8a18:	2003e770 	.word	0x2003e770
   d8a1c:	2003e76c 	.word	0x2003e76c
   d8a20:	2003e768 	.word	0x2003e768
   d8a24:	2003e764 	.word	0x2003e764
   d8a28:	2003e760 	.word	0x2003e760
   d8a2c:	2003e75c 	.word	0x2003e75c
   d8a30:	2003e758 	.word	0x2003e758
   d8a34:	2003e754 	.word	0x2003e754
   d8a38:	2003e750 	.word	0x2003e750

000d8a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8a3c:	4b18      	ldr	r3, [pc, #96]	; (d8aa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8a3e:	681a      	ldr	r2, [r3, #0]
   d8a40:	07d1      	lsls	r1, r2, #31
   d8a42:	bf5c      	itt	pl
   d8a44:	2201      	movpl	r2, #1
   d8a46:	601a      	strpl	r2, [r3, #0]
   d8a48:	4b16      	ldr	r3, [pc, #88]	; (d8aa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8a4a:	681a      	ldr	r2, [r3, #0]
   d8a4c:	07d2      	lsls	r2, r2, #31
   d8a4e:	bf5c      	itt	pl
   d8a50:	2201      	movpl	r2, #1
   d8a52:	601a      	strpl	r2, [r3, #0]
   d8a54:	4b14      	ldr	r3, [pc, #80]	; (d8aa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8a56:	681a      	ldr	r2, [r3, #0]
   d8a58:	07d0      	lsls	r0, r2, #31
   d8a5a:	bf5c      	itt	pl
   d8a5c:	2201      	movpl	r2, #1
   d8a5e:	601a      	strpl	r2, [r3, #0]
   d8a60:	4b12      	ldr	r3, [pc, #72]	; (d8aac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8a62:	681a      	ldr	r2, [r3, #0]
   d8a64:	07d1      	lsls	r1, r2, #31
   d8a66:	bf5c      	itt	pl
   d8a68:	2201      	movpl	r2, #1
   d8a6a:	601a      	strpl	r2, [r3, #0]
   d8a6c:	4b10      	ldr	r3, [pc, #64]	; (d8ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8a6e:	681a      	ldr	r2, [r3, #0]
   d8a70:	07d2      	lsls	r2, r2, #31
   d8a72:	bf5c      	itt	pl
   d8a74:	2201      	movpl	r2, #1
   d8a76:	601a      	strpl	r2, [r3, #0]
   d8a78:	4b0e      	ldr	r3, [pc, #56]	; (d8ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8a7a:	681a      	ldr	r2, [r3, #0]
   d8a7c:	07d0      	lsls	r0, r2, #31
   d8a7e:	bf5c      	itt	pl
   d8a80:	2201      	movpl	r2, #1
   d8a82:	601a      	strpl	r2, [r3, #0]
   d8a84:	4b0c      	ldr	r3, [pc, #48]	; (d8ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8a86:	681a      	ldr	r2, [r3, #0]
   d8a88:	07d1      	lsls	r1, r2, #31
   d8a8a:	bf5c      	itt	pl
   d8a8c:	2201      	movpl	r2, #1
   d8a8e:	601a      	strpl	r2, [r3, #0]
   d8a90:	4b0a      	ldr	r3, [pc, #40]	; (d8abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8a92:	681a      	ldr	r2, [r3, #0]
   d8a94:	07d2      	lsls	r2, r2, #31
   d8a96:	bf5c      	itt	pl
   d8a98:	2201      	movpl	r2, #1
   d8a9a:	601a      	strpl	r2, [r3, #0]
   d8a9c:	4770      	bx	lr
   d8a9e:	bf00      	nop
   d8aa0:	2003e79c 	.word	0x2003e79c
   d8aa4:	2003e798 	.word	0x2003e798
   d8aa8:	2003e794 	.word	0x2003e794
   d8aac:	2003e790 	.word	0x2003e790
   d8ab0:	2003e78c 	.word	0x2003e78c
   d8ab4:	2003e788 	.word	0x2003e788
   d8ab8:	2003e784 	.word	0x2003e784
   d8abc:	2003e780 	.word	0x2003e780

000d8ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8ac0:	4b18      	ldr	r3, [pc, #96]	; (d8b24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8ac2:	681a      	ldr	r2, [r3, #0]
   d8ac4:	07d1      	lsls	r1, r2, #31
   d8ac6:	bf5c      	itt	pl
   d8ac8:	2201      	movpl	r2, #1
   d8aca:	601a      	strpl	r2, [r3, #0]
   d8acc:	4b16      	ldr	r3, [pc, #88]	; (d8b28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8ace:	681a      	ldr	r2, [r3, #0]
   d8ad0:	07d2      	lsls	r2, r2, #31
   d8ad2:	bf5c      	itt	pl
   d8ad4:	2201      	movpl	r2, #1
   d8ad6:	601a      	strpl	r2, [r3, #0]
   d8ad8:	4b14      	ldr	r3, [pc, #80]	; (d8b2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8ada:	681a      	ldr	r2, [r3, #0]
   d8adc:	07d0      	lsls	r0, r2, #31
   d8ade:	bf5c      	itt	pl
   d8ae0:	2201      	movpl	r2, #1
   d8ae2:	601a      	strpl	r2, [r3, #0]
   d8ae4:	4b12      	ldr	r3, [pc, #72]	; (d8b30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8ae6:	681a      	ldr	r2, [r3, #0]
   d8ae8:	07d1      	lsls	r1, r2, #31
   d8aea:	bf5c      	itt	pl
   d8aec:	2201      	movpl	r2, #1
   d8aee:	601a      	strpl	r2, [r3, #0]
   d8af0:	4b10      	ldr	r3, [pc, #64]	; (d8b34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8af2:	681a      	ldr	r2, [r3, #0]
   d8af4:	07d2      	lsls	r2, r2, #31
   d8af6:	bf5c      	itt	pl
   d8af8:	2201      	movpl	r2, #1
   d8afa:	601a      	strpl	r2, [r3, #0]
   d8afc:	4b0e      	ldr	r3, [pc, #56]	; (d8b38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8afe:	681a      	ldr	r2, [r3, #0]
   d8b00:	07d0      	lsls	r0, r2, #31
   d8b02:	bf5c      	itt	pl
   d8b04:	2201      	movpl	r2, #1
   d8b06:	601a      	strpl	r2, [r3, #0]
   d8b08:	4b0c      	ldr	r3, [pc, #48]	; (d8b3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8b0a:	681a      	ldr	r2, [r3, #0]
   d8b0c:	07d1      	lsls	r1, r2, #31
   d8b0e:	bf5c      	itt	pl
   d8b10:	2201      	movpl	r2, #1
   d8b12:	601a      	strpl	r2, [r3, #0]
   d8b14:	4b0a      	ldr	r3, [pc, #40]	; (d8b40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8b16:	681a      	ldr	r2, [r3, #0]
   d8b18:	07d2      	lsls	r2, r2, #31
   d8b1a:	bf5c      	itt	pl
   d8b1c:	2201      	movpl	r2, #1
   d8b1e:	601a      	strpl	r2, [r3, #0]
   d8b20:	4770      	bx	lr
   d8b22:	bf00      	nop
   d8b24:	2003e7bc 	.word	0x2003e7bc
   d8b28:	2003e7b8 	.word	0x2003e7b8
   d8b2c:	2003e7b4 	.word	0x2003e7b4
   d8b30:	2003e7b0 	.word	0x2003e7b0
   d8b34:	2003e7ac 	.word	0x2003e7ac
   d8b38:	2003e7a8 	.word	0x2003e7a8
   d8b3c:	2003e7a4 	.word	0x2003e7a4
   d8b40:	2003e7a0 	.word	0x2003e7a0

000d8b44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d8b44:	4b24      	ldr	r3, [pc, #144]	; (d8bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d8b46:	681a      	ldr	r2, [r3, #0]
   d8b48:	07d0      	lsls	r0, r2, #31
   d8b4a:	bf5c      	itt	pl
   d8b4c:	2201      	movpl	r2, #1
   d8b4e:	601a      	strpl	r2, [r3, #0]
   d8b50:	4b22      	ldr	r3, [pc, #136]	; (d8bdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d8b52:	681a      	ldr	r2, [r3, #0]
   d8b54:	07d1      	lsls	r1, r2, #31
   d8b56:	bf5c      	itt	pl
   d8b58:	2201      	movpl	r2, #1
   d8b5a:	601a      	strpl	r2, [r3, #0]
   d8b5c:	4b20      	ldr	r3, [pc, #128]	; (d8be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d8b5e:	681a      	ldr	r2, [r3, #0]
   d8b60:	07d2      	lsls	r2, r2, #31
   d8b62:	bf5c      	itt	pl
   d8b64:	2201      	movpl	r2, #1
   d8b66:	601a      	strpl	r2, [r3, #0]
   d8b68:	4b1e      	ldr	r3, [pc, #120]	; (d8be4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8b6a:	681a      	ldr	r2, [r3, #0]
   d8b6c:	07d0      	lsls	r0, r2, #31
   d8b6e:	bf5c      	itt	pl
   d8b70:	2201      	movpl	r2, #1
   d8b72:	601a      	strpl	r2, [r3, #0]
   d8b74:	4b1c      	ldr	r3, [pc, #112]	; (d8be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d8b76:	681a      	ldr	r2, [r3, #0]
   d8b78:	07d1      	lsls	r1, r2, #31
   d8b7a:	bf5c      	itt	pl
   d8b7c:	2201      	movpl	r2, #1
   d8b7e:	601a      	strpl	r2, [r3, #0]
   d8b80:	4b1a      	ldr	r3, [pc, #104]	; (d8bec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d8b82:	681a      	ldr	r2, [r3, #0]
   d8b84:	07d2      	lsls	r2, r2, #31
   d8b86:	bf5c      	itt	pl
   d8b88:	2201      	movpl	r2, #1
   d8b8a:	601a      	strpl	r2, [r3, #0]
   d8b8c:	4b18      	ldr	r3, [pc, #96]	; (d8bf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d8b8e:	681a      	ldr	r2, [r3, #0]
   d8b90:	07d0      	lsls	r0, r2, #31
   d8b92:	bf5c      	itt	pl
   d8b94:	2201      	movpl	r2, #1
   d8b96:	601a      	strpl	r2, [r3, #0]
   d8b98:	4b16      	ldr	r3, [pc, #88]	; (d8bf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8b9a:	681a      	ldr	r2, [r3, #0]
   d8b9c:	07d1      	lsls	r1, r2, #31
   d8b9e:	bf5c      	itt	pl
   d8ba0:	2201      	movpl	r2, #1
   d8ba2:	601a      	strpl	r2, [r3, #0]
   d8ba4:	4b14      	ldr	r3, [pc, #80]	; (d8bf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d8ba6:	681a      	ldr	r2, [r3, #0]
   d8ba8:	07d2      	lsls	r2, r2, #31
   d8baa:	bf5c      	itt	pl
   d8bac:	2201      	movpl	r2, #1
   d8bae:	601a      	strpl	r2, [r3, #0]
   d8bb0:	4b12      	ldr	r3, [pc, #72]	; (d8bfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d8bb2:	681a      	ldr	r2, [r3, #0]
   d8bb4:	07d0      	lsls	r0, r2, #31
   d8bb6:	bf5c      	itt	pl
   d8bb8:	2201      	movpl	r2, #1
   d8bba:	601a      	strpl	r2, [r3, #0]
   d8bbc:	4b10      	ldr	r3, [pc, #64]	; (d8c00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d8bbe:	681a      	ldr	r2, [r3, #0]
   d8bc0:	07d1      	lsls	r1, r2, #31
   d8bc2:	bf5c      	itt	pl
   d8bc4:	2201      	movpl	r2, #1
   d8bc6:	601a      	strpl	r2, [r3, #0]
   d8bc8:	4b0e      	ldr	r3, [pc, #56]	; (d8c04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d8bca:	681a      	ldr	r2, [r3, #0]
   d8bcc:	07d2      	lsls	r2, r2, #31
   d8bce:	bf5c      	itt	pl
   d8bd0:	2201      	movpl	r2, #1
   d8bd2:	601a      	strpl	r2, [r3, #0]
   d8bd4:	4770      	bx	lr
   d8bd6:	bf00      	nop
   d8bd8:	2003e7ec 	.word	0x2003e7ec
   d8bdc:	2003e7e8 	.word	0x2003e7e8
   d8be0:	2003e7e4 	.word	0x2003e7e4
   d8be4:	2003e7e0 	.word	0x2003e7e0
   d8be8:	2003e7dc 	.word	0x2003e7dc
   d8bec:	2003e7d8 	.word	0x2003e7d8
   d8bf0:	2003e7d4 	.word	0x2003e7d4
   d8bf4:	2003e7d0 	.word	0x2003e7d0
   d8bf8:	2003e7cc 	.word	0x2003e7cc
   d8bfc:	2003e7c8 	.word	0x2003e7c8
   d8c00:	2003e7c4 	.word	0x2003e7c4
   d8c04:	2003e7c0 	.word	0x2003e7c0

000d8c08 <atol>:
   d8c08:	220a      	movs	r2, #10
   d8c0a:	2100      	movs	r1, #0
   d8c0c:	f000 b960 	b.w	d8ed0 <strtol>

000d8c10 <__cxa_atexit>:
   d8c10:	b510      	push	{r4, lr}
   d8c12:	4c05      	ldr	r4, [pc, #20]	; (d8c28 <__cxa_atexit+0x18>)
   d8c14:	4613      	mov	r3, r2
   d8c16:	b12c      	cbz	r4, d8c24 <__cxa_atexit+0x14>
   d8c18:	460a      	mov	r2, r1
   d8c1a:	4601      	mov	r1, r0
   d8c1c:	2002      	movs	r0, #2
   d8c1e:	f3af 8000 	nop.w
   d8c22:	bd10      	pop	{r4, pc}
   d8c24:	4620      	mov	r0, r4
   d8c26:	bd10      	pop	{r4, pc}
   d8c28:	00000000 	.word	0x00000000

000d8c2c <memcmp>:
   d8c2c:	b510      	push	{r4, lr}
   d8c2e:	3901      	subs	r1, #1
   d8c30:	4402      	add	r2, r0
   d8c32:	4290      	cmp	r0, r2
   d8c34:	d007      	beq.n	d8c46 <memcmp+0x1a>
   d8c36:	f810 3b01 	ldrb.w	r3, [r0], #1
   d8c3a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8c3e:	42a3      	cmp	r3, r4
   d8c40:	d0f7      	beq.n	d8c32 <memcmp+0x6>
   d8c42:	1b18      	subs	r0, r3, r4
   d8c44:	bd10      	pop	{r4, pc}
   d8c46:	2000      	movs	r0, #0
   d8c48:	bd10      	pop	{r4, pc}

000d8c4a <memcpy>:
   d8c4a:	b510      	push	{r4, lr}
   d8c4c:	1e43      	subs	r3, r0, #1
   d8c4e:	440a      	add	r2, r1
   d8c50:	4291      	cmp	r1, r2
   d8c52:	d004      	beq.n	d8c5e <memcpy+0x14>
   d8c54:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8c58:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8c5c:	e7f8      	b.n	d8c50 <memcpy+0x6>
   d8c5e:	bd10      	pop	{r4, pc}

000d8c60 <memmove>:
   d8c60:	4288      	cmp	r0, r1
   d8c62:	b510      	push	{r4, lr}
   d8c64:	eb01 0302 	add.w	r3, r1, r2
   d8c68:	d801      	bhi.n	d8c6e <memmove+0xe>
   d8c6a:	1e42      	subs	r2, r0, #1
   d8c6c:	e00b      	b.n	d8c86 <memmove+0x26>
   d8c6e:	4298      	cmp	r0, r3
   d8c70:	d2fb      	bcs.n	d8c6a <memmove+0xa>
   d8c72:	1881      	adds	r1, r0, r2
   d8c74:	1ad2      	subs	r2, r2, r3
   d8c76:	42d3      	cmn	r3, r2
   d8c78:	d004      	beq.n	d8c84 <memmove+0x24>
   d8c7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d8c7e:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d8c82:	e7f8      	b.n	d8c76 <memmove+0x16>
   d8c84:	bd10      	pop	{r4, pc}
   d8c86:	4299      	cmp	r1, r3
   d8c88:	d004      	beq.n	d8c94 <memmove+0x34>
   d8c8a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8c8e:	f802 4f01 	strb.w	r4, [r2, #1]!
   d8c92:	e7f8      	b.n	d8c86 <memmove+0x26>
   d8c94:	bd10      	pop	{r4, pc}

000d8c96 <memset>:
   d8c96:	4402      	add	r2, r0
   d8c98:	4603      	mov	r3, r0
   d8c9a:	4293      	cmp	r3, r2
   d8c9c:	d002      	beq.n	d8ca4 <memset+0xe>
   d8c9e:	f803 1b01 	strb.w	r1, [r3], #1
   d8ca2:	e7fa      	b.n	d8c9a <memset+0x4>
   d8ca4:	4770      	bx	lr
	...

000d8ca8 <srand>:
   d8ca8:	b538      	push	{r3, r4, r5, lr}
   d8caa:	4b12      	ldr	r3, [pc, #72]	; (d8cf4 <srand+0x4c>)
   d8cac:	681c      	ldr	r4, [r3, #0]
   d8cae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8cb0:	4605      	mov	r5, r0
   d8cb2:	b9d3      	cbnz	r3, d8cea <srand+0x42>
   d8cb4:	2018      	movs	r0, #24
   d8cb6:	f7fb ffdf 	bl	d4c78 <malloc>
   d8cba:	f243 330e 	movw	r3, #13070	; 0x330e
   d8cbe:	63a0      	str	r0, [r4, #56]	; 0x38
   d8cc0:	8003      	strh	r3, [r0, #0]
   d8cc2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d8cc6:	8043      	strh	r3, [r0, #2]
   d8cc8:	f241 2334 	movw	r3, #4660	; 0x1234
   d8ccc:	8083      	strh	r3, [r0, #4]
   d8cce:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8cd2:	80c3      	strh	r3, [r0, #6]
   d8cd4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d8cd8:	8103      	strh	r3, [r0, #8]
   d8cda:	2305      	movs	r3, #5
   d8cdc:	8143      	strh	r3, [r0, #10]
   d8cde:	230b      	movs	r3, #11
   d8ce0:	8183      	strh	r3, [r0, #12]
   d8ce2:	2201      	movs	r2, #1
   d8ce4:	2300      	movs	r3, #0
   d8ce6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8cea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8cec:	2200      	movs	r2, #0
   d8cee:	611d      	str	r5, [r3, #16]
   d8cf0:	615a      	str	r2, [r3, #20]
   d8cf2:	bd38      	pop	{r3, r4, r5, pc}
   d8cf4:	2003e35c 	.word	0x2003e35c

000d8cf8 <strchr>:
   d8cf8:	b2c9      	uxtb	r1, r1
   d8cfa:	4603      	mov	r3, r0
   d8cfc:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8d00:	b11a      	cbz	r2, d8d0a <strchr+0x12>
   d8d02:	4291      	cmp	r1, r2
   d8d04:	d1f9      	bne.n	d8cfa <strchr+0x2>
   d8d06:	4618      	mov	r0, r3
   d8d08:	4770      	bx	lr
   d8d0a:	2900      	cmp	r1, #0
   d8d0c:	bf0c      	ite	eq
   d8d0e:	4618      	moveq	r0, r3
   d8d10:	2000      	movne	r0, #0
   d8d12:	4770      	bx	lr

000d8d14 <strchrnul>:
   d8d14:	b510      	push	{r4, lr}
   d8d16:	4604      	mov	r4, r0
   d8d18:	f7ff ffee 	bl	d8cf8 <strchr>
   d8d1c:	b918      	cbnz	r0, d8d26 <strchrnul+0x12>
   d8d1e:	4620      	mov	r0, r4
   d8d20:	f000 f814 	bl	d8d4c <strlen>
   d8d24:	4420      	add	r0, r4
   d8d26:	bd10      	pop	{r4, pc}

000d8d28 <strcmp>:
   d8d28:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8d2c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8d30:	2a01      	cmp	r2, #1
   d8d32:	bf28      	it	cs
   d8d34:	429a      	cmpcs	r2, r3
   d8d36:	d0f7      	beq.n	d8d28 <strcmp>
   d8d38:	1ad0      	subs	r0, r2, r3
   d8d3a:	4770      	bx	lr

000d8d3c <strcpy>:
   d8d3c:	4603      	mov	r3, r0
   d8d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8d42:	f803 2b01 	strb.w	r2, [r3], #1
   d8d46:	2a00      	cmp	r2, #0
   d8d48:	d1f9      	bne.n	d8d3e <strcpy+0x2>
   d8d4a:	4770      	bx	lr

000d8d4c <strlen>:
   d8d4c:	4603      	mov	r3, r0
   d8d4e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8d52:	2a00      	cmp	r2, #0
   d8d54:	d1fb      	bne.n	d8d4e <strlen+0x2>
   d8d56:	1a18      	subs	r0, r3, r0
   d8d58:	3801      	subs	r0, #1
   d8d5a:	4770      	bx	lr

000d8d5c <strncmp>:
   d8d5c:	b530      	push	{r4, r5, lr}
   d8d5e:	b182      	cbz	r2, d8d82 <strncmp+0x26>
   d8d60:	1e45      	subs	r5, r0, #1
   d8d62:	3901      	subs	r1, #1
   d8d64:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d8d68:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8d6c:	42a3      	cmp	r3, r4
   d8d6e:	d106      	bne.n	d8d7e <strncmp+0x22>
   d8d70:	43ec      	mvns	r4, r5
   d8d72:	4414      	add	r4, r2
   d8d74:	42e0      	cmn	r0, r4
   d8d76:	d001      	beq.n	d8d7c <strncmp+0x20>
   d8d78:	2b00      	cmp	r3, #0
   d8d7a:	d1f3      	bne.n	d8d64 <strncmp+0x8>
   d8d7c:	461c      	mov	r4, r3
   d8d7e:	1b18      	subs	r0, r3, r4
   d8d80:	bd30      	pop	{r4, r5, pc}
   d8d82:	4610      	mov	r0, r2
   d8d84:	bd30      	pop	{r4, r5, pc}

000d8d86 <strnlen>:
   d8d86:	b510      	push	{r4, lr}
   d8d88:	4603      	mov	r3, r0
   d8d8a:	4401      	add	r1, r0
   d8d8c:	428b      	cmp	r3, r1
   d8d8e:	d004      	beq.n	d8d9a <strnlen+0x14>
   d8d90:	781a      	ldrb	r2, [r3, #0]
   d8d92:	1c5c      	adds	r4, r3, #1
   d8d94:	b10a      	cbz	r2, d8d9a <strnlen+0x14>
   d8d96:	4623      	mov	r3, r4
   d8d98:	e7f8      	b.n	d8d8c <strnlen+0x6>
   d8d9a:	1a18      	subs	r0, r3, r0
   d8d9c:	bd10      	pop	{r4, pc}

000d8d9e <strrchr>:
   d8d9e:	b538      	push	{r3, r4, r5, lr}
   d8da0:	4603      	mov	r3, r0
   d8da2:	460d      	mov	r5, r1
   d8da4:	b141      	cbz	r1, d8db8 <strrchr+0x1a>
   d8da6:	2400      	movs	r4, #0
   d8da8:	4629      	mov	r1, r5
   d8daa:	4618      	mov	r0, r3
   d8dac:	f7ff ffa4 	bl	d8cf8 <strchr>
   d8db0:	b130      	cbz	r0, d8dc0 <strrchr+0x22>
   d8db2:	1c43      	adds	r3, r0, #1
   d8db4:	4604      	mov	r4, r0
   d8db6:	e7f7      	b.n	d8da8 <strrchr+0xa>
   d8db8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8dbc:	f7ff bf9c 	b.w	d8cf8 <strchr>
   d8dc0:	4620      	mov	r0, r4
   d8dc2:	bd38      	pop	{r3, r4, r5, pc}

000d8dc4 <_strtol_r>:
   d8dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8dc8:	4680      	mov	r8, r0
   d8dca:	4840      	ldr	r0, [pc, #256]	; (d8ecc <_strtol_r+0x108>)
   d8dcc:	f8d0 9000 	ldr.w	r9, [r0]
   d8dd0:	460f      	mov	r7, r1
   d8dd2:	463d      	mov	r5, r7
   d8dd4:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8dd8:	eb09 0004 	add.w	r0, r9, r4
   d8ddc:	7840      	ldrb	r0, [r0, #1]
   d8dde:	f000 0008 	and.w	r0, r0, #8
   d8de2:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d8de6:	b108      	cbz	r0, d8dec <_strtol_r+0x28>
   d8de8:	462f      	mov	r7, r5
   d8dea:	e7f2      	b.n	d8dd2 <_strtol_r+0xe>
   d8dec:	2c2d      	cmp	r4, #45	; 0x2d
   d8dee:	d103      	bne.n	d8df8 <_strtol_r+0x34>
   d8df0:	1cbd      	adds	r5, r7, #2
   d8df2:	787c      	ldrb	r4, [r7, #1]
   d8df4:	2601      	movs	r6, #1
   d8df6:	e003      	b.n	d8e00 <_strtol_r+0x3c>
   d8df8:	2c2b      	cmp	r4, #43	; 0x2b
   d8dfa:	bf04      	itt	eq
   d8dfc:	787c      	ldrbeq	r4, [r7, #1]
   d8dfe:	1cbd      	addeq	r5, r7, #2
   d8e00:	b113      	cbz	r3, d8e08 <_strtol_r+0x44>
   d8e02:	2b10      	cmp	r3, #16
   d8e04:	d10a      	bne.n	d8e1c <_strtol_r+0x58>
   d8e06:	e05b      	b.n	d8ec0 <_strtol_r+0xfc>
   d8e08:	2c30      	cmp	r4, #48	; 0x30
   d8e0a:	d157      	bne.n	d8ebc <_strtol_r+0xf8>
   d8e0c:	7828      	ldrb	r0, [r5, #0]
   d8e0e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8e12:	2858      	cmp	r0, #88	; 0x58
   d8e14:	d14d      	bne.n	d8eb2 <_strtol_r+0xee>
   d8e16:	786c      	ldrb	r4, [r5, #1]
   d8e18:	2310      	movs	r3, #16
   d8e1a:	3502      	adds	r5, #2
   d8e1c:	2e00      	cmp	r6, #0
   d8e1e:	bf14      	ite	ne
   d8e20:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d8e24:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d8e28:	2700      	movs	r7, #0
   d8e2a:	fbbc faf3 	udiv	sl, ip, r3
   d8e2e:	4638      	mov	r0, r7
   d8e30:	fb03 cc1a 	mls	ip, r3, sl, ip
   d8e34:	eb09 0e04 	add.w	lr, r9, r4
   d8e38:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8e3c:	f01e 0f04 	tst.w	lr, #4
   d8e40:	d001      	beq.n	d8e46 <_strtol_r+0x82>
   d8e42:	3c30      	subs	r4, #48	; 0x30
   d8e44:	e00b      	b.n	d8e5e <_strtol_r+0x9a>
   d8e46:	f01e 0e03 	ands.w	lr, lr, #3
   d8e4a:	d01b      	beq.n	d8e84 <_strtol_r+0xc0>
   d8e4c:	f1be 0f01 	cmp.w	lr, #1
   d8e50:	bf0c      	ite	eq
   d8e52:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d8e56:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d8e5a:	ebce 0404 	rsb	r4, lr, r4
   d8e5e:	42a3      	cmp	r3, r4
   d8e60:	dd10      	ble.n	d8e84 <_strtol_r+0xc0>
   d8e62:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d8e66:	d00a      	beq.n	d8e7e <_strtol_r+0xba>
   d8e68:	4550      	cmp	r0, sl
   d8e6a:	d806      	bhi.n	d8e7a <_strtol_r+0xb6>
   d8e6c:	d101      	bne.n	d8e72 <_strtol_r+0xae>
   d8e6e:	4564      	cmp	r4, ip
   d8e70:	dc03      	bgt.n	d8e7a <_strtol_r+0xb6>
   d8e72:	fb03 4000 	mla	r0, r3, r0, r4
   d8e76:	2701      	movs	r7, #1
   d8e78:	e001      	b.n	d8e7e <_strtol_r+0xba>
   d8e7a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d8e7e:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8e82:	e7d7      	b.n	d8e34 <_strtol_r+0x70>
   d8e84:	1c7b      	adds	r3, r7, #1
   d8e86:	d10c      	bne.n	d8ea2 <_strtol_r+0xde>
   d8e88:	2e00      	cmp	r6, #0
   d8e8a:	f04f 0322 	mov.w	r3, #34	; 0x22
   d8e8e:	bf14      	ite	ne
   d8e90:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d8e94:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8e98:	f8c8 3000 	str.w	r3, [r8]
   d8e9c:	b92a      	cbnz	r2, d8eaa <_strtol_r+0xe6>
   d8e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8ea2:	b106      	cbz	r6, d8ea6 <_strtol_r+0xe2>
   d8ea4:	4240      	negs	r0, r0
   d8ea6:	b172      	cbz	r2, d8ec6 <_strtol_r+0x102>
   d8ea8:	b107      	cbz	r7, d8eac <_strtol_r+0xe8>
   d8eaa:	1e69      	subs	r1, r5, #1
   d8eac:	6011      	str	r1, [r2, #0]
   d8eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8eb2:	2430      	movs	r4, #48	; 0x30
   d8eb4:	2b00      	cmp	r3, #0
   d8eb6:	d1b1      	bne.n	d8e1c <_strtol_r+0x58>
   d8eb8:	2308      	movs	r3, #8
   d8eba:	e7af      	b.n	d8e1c <_strtol_r+0x58>
   d8ebc:	230a      	movs	r3, #10
   d8ebe:	e7ad      	b.n	d8e1c <_strtol_r+0x58>
   d8ec0:	2c30      	cmp	r4, #48	; 0x30
   d8ec2:	d0a3      	beq.n	d8e0c <_strtol_r+0x48>
   d8ec4:	e7aa      	b.n	d8e1c <_strtol_r+0x58>
   d8ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8eca:	bf00      	nop
   d8ecc:	2003e2f8 	.word	0x2003e2f8

000d8ed0 <strtol>:
   d8ed0:	4613      	mov	r3, r2
   d8ed2:	460a      	mov	r2, r1
   d8ed4:	4601      	mov	r1, r0
   d8ed6:	4802      	ldr	r0, [pc, #8]	; (d8ee0 <strtol+0x10>)
   d8ed8:	6800      	ldr	r0, [r0, #0]
   d8eda:	f7ff bf73 	b.w	d8dc4 <_strtol_r>
   d8ede:	bf00      	nop
   d8ee0:	2003e35c 	.word	0x2003e35c

000d8ee4 <dynalib_user>:
   d8ee4:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d8ef4:	00000000                                ....

000d8ef8 <_ZTVN5spark10LogHandlerE>:
	...
   d8f08:	000d40a9 000d40cd                       .@...@..

000d8f10 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d8f18:	000d41c5 000d41f9 000d6e91 000d40cf     .A...A...n...@..
   d8f28:	00646572 65657267 6c62006e 4d006575     red.green.blue.M
   d8f38:	20687365 6e6e6f63 20746365 6c6c6163     esh connect call
   d8f48:	6c006465 6c61636f 203a5049 46007325     ed.localIP: %s.F
   d8f58:	656c6961 6f742064 62757320 69726373     ailed to subscri
   d8f68:	77206562 20687469 6f727265 6f632072     be with error co
   d8f78:	203a6564 4d006425 20687365 72207369     de: %d.Mesh is r
   d8f88:	79646165 32350021 35444246 382d4443     eady!.52FBD5CD-8
   d8f98:	2d453943 34384334 4633422d 36452d37     C9E-4C84-B3F7-E6
   d8fa8:	42423437 34393334 35003032 44424632     74BB439420.52FBD
   d8fb8:	2d434335 45394338 3843342d 33422d34     5CC-8C9E-4C84-B3
   d8fc8:	452d3746 42343736 39333442 00303234     F7-E674BB439420.
   d8fd8:	42463235 42433544 3943382d 43342d45     52FBD5CB-8C9E-4C
   d8fe8:	422d3438 2d374633 34373645 33344242     84-B3F7-E674BB43
   d8ff8:	30323439 46323500 43354442 43382d41     9420.52FBD5CA-8C
   d9008:	342d4539 2d343843 37463342 3736452d     9E-4C84-B3F7-E67
   d9018:	34424234 32343933 00000030              4BB439420...

000d9024 <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d902c:	000d4cdb 000d4ce1 000d5939 000d4d0b     .L...L..9Y...M..
   d903c:	000d4cdd                                .L..

000d9040 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9048:	000d4cd5 000d4cef 000d5a45 000d4d0f     .L...L..EZ...M..
   d9058:	000d4cd7                                .L..

000d905c <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9064:	000d4ccf 000d4cfd 000d53f9 000d4d13     .L...L...S...M..
   d9074:	000d4cd1                                .L..

000d9078 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d9078:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.
   d9088:	69726977 622e676e 5300656c 74726174     wiring.ble.Start
   d9098:	73696420 65766f63 676e6972 72657320      discovering ser
   d90a8:	65636976 53002e73 74726174 73696420     vices..Start dis
   d90b8:	65766f63 676e6972 61686320 74636172     covering charact
   d90c8:	73697265 73636974 6550002e 64207265     eristics..Peer d
   d90d8:	63697665 73692065 73696d20 676e6973     evice is missing
   d90e8:	61460021 64656c69 206f7420 65707061     !.Failed to appe
   d90f8:	7020646e 20726565 746e6543 206c6172     nd peer Central 
   d9108:	69766564 002e6563 6e6e6f43 65746365     device..Connecte
   d9118:	79622064 6e654320 6c617274 76656420     d by Central dev
   d9128:	2e656369 73694400 6e6e6f63 65746365     ice..Disconnecte
   d9138:	79622064 6d657220 2065746f 69766564     d by remote devi
   d9148:	002e6563 6e6e6143 6120746f 6e206464     ce..Cannot add n
   d9158:	70207765 20726565 69766564 002e6563     ew peer device..
   d9168:	2077654e 69726570 72656870 69206c61     New peripheral i
   d9178:	6f632073 63656e6e 2e646574 69614600     s connected..Fai
   d9188:	2064656c 61206f74 6e657070 69642064     led to append di
   d9198:	766f6373 64657265 61686320 74636172     scovered charact
   d91a8:	73697265 2e636974 69614600 2064656c     eristic..Failed 
   d91b8:	61206f74 6e657070 69642064 766f6373     to append discov
   d91c8:	64657265 72657320 65636976 6146002e     ered service..Fa
   d91d8:	64656c69 206f7420 65707061 6c20646e     iled to append l
   d91e8:	6c61636f 61686320 74636172 73697265     ocal characteris
   d91f8:	2e636974 70754400 6163696c 20646574     tic..Duplicated 
   d9208:	72616863 65746361 74736972 63206369     characteristic c
   d9218:	6f6e6e61 65622074 64646120 002e6465     annot be added..

000d9228 <_ZN8particle7BleUuid9BASE_UUIDE>:
   d9228:	5f9b34fb 80000080 00001000 00000000     .4._............

000d9238 <_ZTVN5spark13EthernetClassE>:
	...
   d9240:	000d5d8d 000d5d83 000d5d79 000d5d6f     .]...]..y]..o]..
   d9250:	000d5d63 000d5d57 000d5d4b 000d5d43     c]..W]..K]..C]..
   d9260:	000d5d39 000d5d2f 000d79e1              9]../]...y..

000d926c <_ZTV9IPAddress>:
	...
   d9274:	000d5dbd 000d5dad 000d5daf 00302e30     .]...]...]..0.0.
   d9284:	736c6166 72740065 25006575 2e250075     false.true.%u.%.
   d9294:	00666c2a 6e006725 006c6c75 34302575     *lf.%g.null.u%04
   d92a4:	00000078                                x...

000d92a8 <_ZTVN5spark16JSONStreamWriterE>:
	...
   d92b0:	000d626d 000d6293 000d6247 000d5eeb     mb...b..Gb...^..

000d92c0 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d92c8:	000d66e9 000d66fd 000d7045 000d624f     .f...f..Ep..Ob..
   d92d8:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
   d92e8:	00316c61 65707974 72617000 63006d61     al1.type.param.c
   d92f8:	6900646d 6e680064 74730064 66006d72     md.id.hnd.strm.f
   d9308:	00746c69 006c766c 48646461 6c646e61     ilt.lvl.addHandl
   d9318:	72007265 766f6d65 6e614865 72656c64     er.removeHandler
   d9328:	756e6500 6e61486d 72656c64 534a0073     .enumHandlers.JS
   d9338:	74534e4f 6d616572 48676f4c 6c646e61     ONStreamLogHandl
   d9348:	61007265 25007070 75303130 205d0020     er.app.%010u .] 
   d9358:	00202c00 203a2928 005b2000 65646f63     ., .(): . [.code
   d9368:	00203d20 64006925 69617465 3d20736c      = .%i.details =
   d9378:	0a0d0020 006e6c00 63006e66 0065646f      ....ln.fn.code.
   d9388:	61746564 6e006c69 00656e6f 63617274     detail.none.trac
   d9398:	6e690065 77006f66 006e7261 6f727265     e.info.warn.erro
   d93a8:	61700072 0063696e 006c6c61              r.panic.all.

000d93b4 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d93bc:	000d66bd 000d66d5 000d6e91 000d40cf     .f...f...n...@..

000d93cc <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d93d4:	000d626b 000d62a1 000d6db9 000d6251     kb...b...m..Qb..

000d93e4 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d93ec:	000d6269 000d62af 000d6601 000d62bd     ib...b...f...b..

000d93fc <_ZTVN5spark9MeshClassE>:
	...
   d9404:	000d7249 000d723f 000d7235 000d722b     Ir..?r..5r..+r..
   d9414:	000d721f 000d7213 000d7207 000d71ff     .r...r...r...q..
   d9424:	000d71f5 000d71eb 000d79e1 33306666     .q...q...y..ff03
   d9434:	3a313a3a 31303031 72697700 00676e69     ::1:1001.wiring.
   d9444:	73726170 61702065 74656b63 00642520     parse packet %d.
   d9454:	00316874 6873656d 00627570              th1.meshpub.

000d9460 <_ZTVN5spark12NetworkClassE>:
	...
   d9468:	000d7979 000d7983 000d798d 000d7997     yy...y...y...y..
   d9478:	000d79a1 000d79ad 000d79b9 000d79c5     .y...y...y...y..
   d9488:	000d79cd 000d79d7 000d79e1              .y...y...y..

000d9494 <_ZTV21StringPrintableHelper>:
	...
   d949c:	000d7c4d 000d7c4f 000d7de3 000d7db5     M|..O|...}...}..
   d94ac:	2b25005a 3a643330 75323025 2d592500     Z.%+03d:%02u.%Y-
   d94bc:	252d6d25 48255464 3a4d253a 7a255325     %m-%dT%H:%M:%S%z
   d94cc:	63736100 656d6974 00000000              .asctime....

000d94d8 <_ZTV3UDP>:
	...
   d94e0:	000d852d 000d8551 000d7f09 000d8033     -...Q.......3...
   d94f0:	000d7f01 000d7f1f 000d7f3d 000d7f57     ........=...W...
   d9500:	000d7f7b 000d8017 000d8319 000d80b9     {...............
   d9510:	000d8239 000d7ee9 000d84c1 000d81bd     9....~..........
   d9520:	000d80f1 000d84ef 000d805d 000d7ef7     ........]....~..
   d9530:	000d8099 000d7efd 000d7f59 fffffff0     .....~..Y.......
   d9540:	00000000 000d7f73                       ....s...

000d9548 <_ZTV11USARTSerial>:
	...
   d9550:	000d857d 000d85cd 000d85db 000d7ac1     }............z..
   d9560:	000d8591 000d85b3 000d859f 000d85c7     ................
   d9570:	000d857f 000d8583                       ........

000d9578 <_ZTV9USBSerial>:
	...
   d9580:	000d8691 000d86e1 000d86ef 000d7ac1     .............z..
   d9590:	000d86cd 000d8693 000d86a9 000d86db     ................
   d95a0:	000d86bf 000d868d                       ........

000d95a8 <_ZTVN5spark9WiFiClassE>:
	...
   d95b0:	000d8803 000d87f9 000d87ef 000d87a5     ................
   d95c0:	000d87e3 000d87d7 000d87cb 000d87c3     ................
   d95d0:	000d87b9 000d87af 000d79e1              .........y..

000d95dc <_ZSt7nothrow>:
	...

000d95dd <_ctype_>:
   d95dd:	20202000 20202020 28282020 20282828     .         ((((( 
   d95ed:	20202020 20202020 20202020 20202020                     
   d95fd:	10108820 10101010 10101010 10101010      ...............
   d960d:	04040410 04040404 10040404 10101010     ................
   d961d:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d962d:	01010101 01010101 01010101 10101010     ................
   d963d:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d964d:	02020202 02020202 02020202 10101010     ................
   d965d:	00000020 00000000 00000000 00000000      ...............
	...

000d96e0 <__sf_fake_stdin>:
	...

000d9700 <__sf_fake_stdout>:
	...

000d9720 <__sf_fake_stderr>:
	...
   d9740:	00000043                                         C.

000d9742 <link_const_variable_data_end>:
	...

000d9744 <link_constructors_location>:
   d9744:	000d4641 	.word	0x000d4641
   d9748:	000d5cf5 	.word	0x000d5cf5
   d974c:	000d5d99 	.word	0x000d5d99
   d9750:	000d6e81 	.word	0x000d6e81
   d9754:	000d7929 	.word	0x000d7929
   d9758:	000d7aad 	.word	0x000d7aad
   d975c:	000d7c31 	.word	0x000d7c31
   d9760:	000d7ea1 	.word	0x000d7ea1
   d9764:	000d7ed5 	.word	0x000d7ed5
   d9768:	000d880d 	.word	0x000d880d
   d976c:	000d8979 	.word	0x000d8979
   d9770:	000d8a3d 	.word	0x000d8a3d
   d9774:	000d8ac1 	.word	0x000d8ac1
   d9778:	000d8b45 	.word	0x000d8b45

000d977c <link_constructors_end>:
   d977c:	00000000 	.word	0x00000000
