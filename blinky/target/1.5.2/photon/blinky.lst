
/Users/arminmahmoudi/dev/lights/particle/blinky/target/1.5.2/photon/blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003b20  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3b40  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000090  20000000  080a3b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001a0  20000090  20000090  00030090  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a3bd4  080a3bd4  00023bd4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a3bfc  080a3bfc  00023bfc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ad9ec  00000000  00000000  00023c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000fc5d  00000000  00000000  000d15ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000119d8  00000000  00000000  000e1249  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001c70  00000000  00000000  000f2c21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002f08  00000000  00000000  000f4891  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002660e  00000000  00000000  000f7799  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000259a9  00000000  00000000  0011dda7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a89d6  00000000  00000000  00143750  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000afb4  00000000  00000000  001ec128  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f003 fbb3 	bl	80a379c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f003 fbb8 	bl	80a37b2 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a3b44 	.word	0x080a3b44
 80a0050:	20000090 	.word	0x20000090
 80a0054:	20000090 	.word	0x20000090
 80a0058:	20000230 	.word	0x20000230
 80a005c:	20000230 	.word	0x20000230

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f002 fa3d 	bl	80a24e0 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a3b04 	.word	0x080a3b04
 80a0088:	080a3b40 	.word	0x080a3b40

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b81c 	b.w	80a00c8 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 f85b 	bl	80a014c <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f002 b9e3 	b.w	80a2464 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f001 bd4b 	b.w	80a1b38 <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f001 bd51 	b.w	80a1b48 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr

080a00b6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a00b6:	b510      	push	{r4, lr}
 80a00b8:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
 80a00ba:	6800      	ldr	r0, [r0, #0]
 80a00bc:	b108      	cbz	r0, 80a00c2 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80a00be:	f001 fd43 	bl	80a1b48 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a00c2:	4620      	mov	r0, r4
 80a00c4:	bd10      	pop	{r4, pc}
	...

080a00c8 <setup>:
bool calibrating = true;
uint calibrationPeriodMs = 10000;
int startTime = 0;

void setup()
{
 80a00c8:	b510      	push	{r4, lr}
  pinMode(ONBOARD_LED, OUTPUT);
 80a00ca:	2101      	movs	r1, #1
 80a00cc:	2007      	movs	r0, #7

  Serial.begin(9600);
  strip.begin();
 80a00ce:	4c0a      	ldr	r4, [pc, #40]	; (80a00f8 <setup+0x30>)
uint calibrationPeriodMs = 10000;
int startTime = 0;

void setup()
{
  pinMode(ONBOARD_LED, OUTPUT);
 80a00d0:	f002 fa78 	bl	80a25c4 <pinMode>

  Serial.begin(9600);
 80a00d4:	f002 f8e0 	bl	80a2298 <_Z16_fetch_usbserialv>
 80a00d8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00dc:	f002 f8d0 	bl	80a2280 <_ZN9USBSerial5beginEl>
  strip.begin();
 80a00e0:	4620      	mov	r0, r4
 80a00e2:	f000 f8d5 	bl	80a0290 <_ZN17Adafruit_NeoPixel5beginEv>
  // strip.setBrightness(10);
  strip.show(); // Initialize all pixels to 'off'
 80a00e6:	4620      	mov	r0, r4
 80a00e8:	f000 f908 	bl	80a02fc <_ZN17Adafruit_NeoPixel4showEv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a00ec:	f001 fba6 	bl	80a183c <HAL_Timer_Get_Milli_Seconds>

  startTime = millis(); // start delay
 80a00f0:	4b02      	ldr	r3, [pc, #8]	; (80a00fc <setup+0x34>)
 80a00f2:	6018      	str	r0, [r3, #0]
 80a00f4:	bd10      	pop	{r4, pc}
 80a00f6:	bf00      	nop
 80a00f8:	20000094 	.word	0x20000094
 80a00fc:	200000b4 	.word	0x200000b4

080a0100 <_Z10colorFromGf>:
}

int minG = -1.5;
int maxG = 1.5;

int colorFromG(float g) {
 80a0100:	b507      	push	{r0, r1, r2, lr}
  int gInt = floor(g * 10);
 80a0102:	490f      	ldr	r1, [pc, #60]	; (80a0140 <_Z10colorFromGf+0x40>)
 80a0104:	f003 f9ec 	bl	80a34e0 <__aeabi_fmul>
 80a0108:	f002 fe4e 	bl	80a2da8 <__aeabi_f2d>
 80a010c:	f002 fc60 	bl	80a29d0 <floor>
 80a0110:	f003 f94e 	bl	80a33b0 <__aeabi_d2iz>
  // g = constrain(g, -1.0, 1.0);
  if (gInt < minG) {
 80a0114:	490b      	ldr	r1, [pc, #44]	; (80a0144 <_Z10colorFromGf+0x44>)
 80a0116:	4a0c      	ldr	r2, [pc, #48]	; (80a0148 <_Z10colorFromGf+0x48>)
 80a0118:	680b      	ldr	r3, [r1, #0]
 80a011a:	4298      	cmp	r0, r3
 80a011c:	da01      	bge.n	80a0122 <_Z10colorFromGf+0x22>
    minG = gInt;
 80a011e:	6008      	str	r0, [r1, #0]
 80a0120:	e003      	b.n	80a012a <_Z10colorFromGf+0x2a>
  } else if (gInt > maxG) {
 80a0122:	6813      	ldr	r3, [r2, #0]
 80a0124:	4298      	cmp	r0, r3
    maxG = gInt;
 80a0126:	bfc8      	it	gt
 80a0128:	6010      	strgt	r0, [r2, #0]
  }
  return map(gInt, minG, maxG, 0, 255);
 80a012a:	23ff      	movs	r3, #255	; 0xff
 80a012c:	9300      	str	r3, [sp, #0]
 80a012e:	6812      	ldr	r2, [r2, #0]
 80a0130:	2300      	movs	r3, #0
 80a0132:	6809      	ldr	r1, [r1, #0]
 80a0134:	f001 fd10 	bl	80a1b58 <_Z3mapiiiii>
}
 80a0138:	b003      	add	sp, #12
 80a013a:	f85d fb04 	ldr.w	pc, [sp], #4
 80a013e:	bf00      	nop
 80a0140:	41200000 	.word	0x41200000
 80a0144:	20000000 	.word	0x20000000
 80a0148:	20000008 	.word	0x20000008

080a014c <loop>:

  startTime = millis(); // start delay
}

void loop()
{
 80a014c:	b570      	push	{r4, r5, r6, lr}
  digitalWrite(ONBOARD_LED, LOW);
 80a014e:	2100      	movs	r1, #0

  startTime = millis(); // start delay
}

void loop()
{
 80a0150:	b086      	sub	sp, #24
  digitalWrite(ONBOARD_LED, LOW);
 80a0152:	2007      	movs	r0, #7
 80a0154:	f002 fa47 	bl	80a25e6 <digitalWrite>
  if (calibrating && (millis() - startTime <= calibrationPeriodMs))
 80a0158:	4b1c      	ldr	r3, [pc, #112]	; (80a01cc <loop+0x80>)
 80a015a:	781b      	ldrb	r3, [r3, #0]
 80a015c:	b143      	cbz	r3, 80a0170 <loop+0x24>
 80a015e:	f001 fb6d 	bl	80a183c <HAL_Timer_Get_Milli_Seconds>
 80a0162:	4b1b      	ldr	r3, [pc, #108]	; (80a01d0 <loop+0x84>)
 80a0164:	681b      	ldr	r3, [r3, #0]
 80a0166:	1ac0      	subs	r0, r0, r3
 80a0168:	4b1a      	ldr	r3, [pc, #104]	; (80a01d4 <loop+0x88>)
 80a016a:	681b      	ldr	r3, [r3, #0]
 80a016c:	4298      	cmp	r0, r3
 80a016e:	d924      	bls.n	80a01ba <loop+0x6e>
    AutoCalibrate();
  }
  else
  {
    float xyz[3];
    setXYZ(xyz);
 80a0170:	a803      	add	r0, sp, #12
 80a0172:	f001 fa31 	bl	80a15d8 <_Z6setXYZPf>

    for (int i=0; i<strip.numPixels(); i++) {
 80a0176:	2400      	movs	r4, #0
 80a0178:	4817      	ldr	r0, [pc, #92]	; (80a01d8 <loop+0x8c>)
 80a017a:	f001 f9a8 	bl	80a14ce <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a017e:	4284      	cmp	r4, r0
 80a0180:	da14      	bge.n	80a01ac <loop+0x60>
      strip.setPixelColor(i, colorFromG(xyz[0]), colorFromG(xyz[1]), colorFromG(xyz[2]));
 80a0182:	9803      	ldr	r0, [sp, #12]
 80a0184:	f7ff ffbc 	bl	80a0100 <_Z10colorFromGf>
 80a0188:	4605      	mov	r5, r0
 80a018a:	9804      	ldr	r0, [sp, #16]
 80a018c:	f7ff ffb8 	bl	80a0100 <_Z10colorFromGf>
 80a0190:	4606      	mov	r6, r0
 80a0192:	9805      	ldr	r0, [sp, #20]
 80a0194:	f7ff ffb4 	bl	80a0100 <_Z10colorFromGf>
 80a0198:	b2c0      	uxtb	r0, r0
 80a019a:	9000      	str	r0, [sp, #0]
 80a019c:	b2a1      	uxth	r1, r4
 80a019e:	b2f3      	uxtb	r3, r6
 80a01a0:	b2ea      	uxtb	r2, r5
 80a01a2:	480d      	ldr	r0, [pc, #52]	; (80a01d8 <loop+0x8c>)
 80a01a4:	f001 f964 	bl	80a1470 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
  else
  {
    float xyz[3];
    setXYZ(xyz);

    for (int i=0; i<strip.numPixels(); i++) {
 80a01a8:	3401      	adds	r4, #1
 80a01aa:	e7e5      	b.n	80a0178 <loop+0x2c>
      strip.setPixelColor(i, colorFromG(xyz[0]), colorFromG(xyz[1]), colorFromG(xyz[2]));
    }
    // strip.setPixelColor(4, xyz[0], 0, 0);
    // strip.setPixelColor(5, 0, xyz[1], 0);
    // strip.setPixelColor(6, 0, 0, xyz[2]);
    strip.show();
 80a01ac:	480a      	ldr	r0, [pc, #40]	; (80a01d8 <loop+0x8c>)
 80a01ae:	f000 f8a5 	bl	80a02fc <_ZN17Adafruit_NeoPixel4showEv>
    delay(100);
 80a01b2:	2064      	movs	r0, #100	; 0x64
 80a01b4:	f001 fcdc 	bl	80a1b70 <delay>
  }
}
 80a01b8:	e005      	b.n	80a01c6 <loop+0x7a>
void loop()
{
  digitalWrite(ONBOARD_LED, LOW);
  if (calibrating && (millis() - startTime <= calibrationPeriodMs))
  {
    digitalWrite(ONBOARD_LED, HIGH);
 80a01ba:	2101      	movs	r1, #1
 80a01bc:	2007      	movs	r0, #7
 80a01be:	f002 fa12 	bl	80a25e6 <digitalWrite>
    AutoCalibrate();
 80a01c2:	f001 f9a7 	bl	80a1514 <_Z13AutoCalibratev>
    // strip.setPixelColor(5, 0, xyz[1], 0);
    // strip.setPixelColor(6, 0, 0, xyz[2]);
    strip.show();
    delay(100);
  }
}
 80a01c6:	b006      	add	sp, #24
 80a01c8:	bd70      	pop	{r4, r5, r6, pc}
 80a01ca:	bf00      	nop
 80a01cc:	20000004 	.word	0x20000004
 80a01d0:	200000b4 	.word	0x200000b4
 80a01d4:	2000000c 	.word	0x2000000c
 80a01d8:	20000094 	.word	0x20000094

080a01dc <_GLOBAL__sub_I_SystemMode>:
  Serial.print(roll);
  Serial.print(" pitch = ");
  Serial.print(pitch);
  Serial.print("\n\n");
  delay(200);
}
 80a01dc:	b538      	push	{r3, r4, r5, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a01de:	4c11      	ldr	r4, [pc, #68]	; (80a0224 <_GLOBAL__sub_I_SystemMode+0x48>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a01e0:	f001 fb34 	bl	80a184c <HAL_Pin_Map>
 80a01e4:	2300      	movs	r3, #0
 80a01e6:	6023      	str	r3, [r4, #0]
 80a01e8:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a01ea:	71a3      	strb	r3, [r4, #6]
 80a01ec:	8123      	strh	r3, [r4, #8]
 80a01ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
#include <math.h>
#include <neopixel.h>

SYSTEM_MODE(AUTOMATIC);
 80a01f2:	4d0d      	ldr	r5, [pc, #52]	; (80a0228 <_GLOBAL__sub_I_SystemMode+0x4c>)
 80a01f4:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a01f6:	2001      	movs	r0, #1
 80a01f8:	f001 fc22 	bl	80a1a40 <set_system_mode>
 80a01fc:	462a      	mov	r2, r5
 80a01fe:	490b      	ldr	r1, [pc, #44]	; (80a022c <_GLOBAL__sub_I_SystemMode+0x50>)
 80a0200:	4620      	mov	r0, r4
#define PIXEL_PIN D2
#define PIXEL_COUNT 144
#define PIXEL_TYPE WS2812B
#define ONBOARD_LED D7

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a0202:	4c0b      	ldr	r4, [pc, #44]	; (80a0230 <_GLOBAL__sub_I_SystemMode+0x54>)
#include <math.h>
#include <neopixel.h>

SYSTEM_MODE(AUTOMATIC);
 80a0204:	f002 fa78 	bl	80a26f8 <__aeabi_atexit>
#define PIXEL_PIN D2
#define PIXEL_COUNT 144
#define PIXEL_TYPE WS2812B
#define ONBOARD_LED D7

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a0208:	2302      	movs	r3, #2
 80a020a:	461a      	mov	r2, r3
 80a020c:	2190      	movs	r1, #144	; 0x90
 80a020e:	4620      	mov	r0, r4
 80a0210:	f000 f863 	bl	80a02da <_ZN17Adafruit_NeoPixelC1Ethh>
 80a0214:	462a      	mov	r2, r5
 80a0216:	4620      	mov	r0, r4
  Serial.print(roll);
  Serial.print(" pitch = ");
  Serial.print(pitch);
  Serial.print("\n\n");
  delay(200);
}
 80a0218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#define PIXEL_PIN D2
#define PIXEL_COUNT 144
#define PIXEL_TYPE WS2812B
#define ONBOARD_LED D7

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a021c:	4905      	ldr	r1, [pc, #20]	; (80a0234 <_GLOBAL__sub_I_SystemMode+0x58>)
 80a021e:	f002 ba6b 	b.w	80a26f8 <__aeabi_atexit>
 80a0222:	bf00      	nop
 80a0224:	200000a8 	.word	0x200000a8
 80a0228:	20000090 	.word	0x20000090
 80a022c:	080a00b7 	.word	0x080a00b7
 80a0230:	20000094 	.word	0x20000094
 80a0234:	080a023d 	.word	0x080a023d

080a0238 <micros>:
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0238:	f001 baf8 	b.w	80a182c <HAL_Timer_Get_Micro_Seconds>

080a023c <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a023c:	b510      	push	{r4, lr}
 80a023e:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a0240:	68c0      	ldr	r0, [r0, #12]
 80a0242:	b108      	cbz	r0, 80a0248 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a0244:	f001 fc80 	bl	80a1b48 <free>
  if (begun) pinMode(pin, INPUT);
 80a0248:	7823      	ldrb	r3, [r4, #0]
 80a024a:	b11b      	cbz	r3, 80a0254 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a024c:	2100      	movs	r1, #0
 80a024e:	79e0      	ldrb	r0, [r4, #7]
 80a0250:	f002 f9b8 	bl	80a25c4 <pinMode>
}
 80a0254:	4620      	mov	r0, r4
 80a0256:	bd10      	pop	{r4, pc}

080a0258 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0258:	b538      	push	{r3, r4, r5, lr}
 80a025a:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a025c:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a025e:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a0260:	b108      	cbz	r0, 80a0266 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a0262:	f001 fc71 	bl	80a1b48 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a0266:	79a3      	ldrb	r3, [r4, #6]
 80a0268:	2b06      	cmp	r3, #6
 80a026a:	bf0c      	ite	eq
 80a026c:	2004      	moveq	r0, #4
 80a026e:	2003      	movne	r0, #3
 80a0270:	4368      	muls	r0, r5
 80a0272:	b280      	uxth	r0, r0
 80a0274:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a0276:	f001 fc5f 	bl	80a1b38 <malloc>
 80a027a:	60e0      	str	r0, [r4, #12]
 80a027c:	b128      	cbz	r0, 80a028a <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a027e:	88a2      	ldrh	r2, [r4, #4]
 80a0280:	2100      	movs	r1, #0
 80a0282:	f003 fa96 	bl	80a37b2 <memset>
    numLEDs = n;
 80a0286:	8065      	strh	r5, [r4, #2]
 80a0288:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a028a:	80a0      	strh	r0, [r4, #4]
 80a028c:	8060      	strh	r0, [r4, #2]
 80a028e:	bd38      	pop	{r3, r4, r5, pc}

080a0290 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a0290:	b510      	push	{r4, lr}
 80a0292:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a0294:	2101      	movs	r1, #1
 80a0296:	79c0      	ldrb	r0, [r0, #7]
 80a0298:	f002 f994 	bl	80a25c4 <pinMode>
  digitalWrite(pin, LOW);
 80a029c:	2100      	movs	r1, #0
 80a029e:	79e0      	ldrb	r0, [r4, #7]
 80a02a0:	f002 f9a1 	bl	80a25e6 <digitalWrite>
  begun = true;
 80a02a4:	2301      	movs	r3, #1
 80a02a6:	7023      	strb	r3, [r4, #0]
 80a02a8:	bd10      	pop	{r4, pc}

080a02aa <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a02aa:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a02ac:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a02ae:	4605      	mov	r5, r0
 80a02b0:	460c      	mov	r4, r1
    if (begun) {
 80a02b2:	b11b      	cbz	r3, 80a02bc <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a02b4:	2100      	movs	r1, #0
 80a02b6:	79c0      	ldrb	r0, [r0, #7]
 80a02b8:	f002 f984 	bl	80a25c4 <pinMode>
    }
    pin = p;
    if (begun) {
 80a02bc:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a02be:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a02c0:	b153      	cbz	r3, 80a02d8 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a02c2:	b2a4      	uxth	r4, r4
 80a02c4:	4620      	mov	r0, r4
 80a02c6:	2101      	movs	r1, #1
 80a02c8:	f002 f97c 	bl	80a25c4 <pinMode>
        digitalWrite(p, LOW);
 80a02cc:	4620      	mov	r0, r4
    }
}
 80a02ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a02d2:	2100      	movs	r1, #0
 80a02d4:	f002 b987 	b.w	80a25e6 <digitalWrite>
 80a02d8:	bd38      	pop	{r3, r4, r5, pc}

080a02da <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a02da:	b570      	push	{r4, r5, r6, lr}
 80a02dc:	4604      	mov	r4, r0
 80a02de:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a02e0:	2500      	movs	r5, #0
 80a02e2:	7183      	strb	r3, [r0, #6]
 80a02e4:	7005      	strb	r5, [r0, #0]
 80a02e6:	7205      	strb	r5, [r0, #8]
 80a02e8:	60c5      	str	r5, [r0, #12]
 80a02ea:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a02ec:	f7ff ffb4 	bl	80a0258 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a02f0:	4620      	mov	r0, r4
 80a02f2:	4631      	mov	r1, r6
 80a02f4:	f7ff ffd9 	bl	80a02aa <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a02f8:	4620      	mov	r0, r4
 80a02fa:	bd70      	pop	{r4, r5, r6, pc}

080a02fc <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a02fc:	68c3      	ldr	r3, [r0, #12]
 80a02fe:	2b00      	cmp	r3, #0
 80a0300:	f000 858e 	beq.w	80a0e20 <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a0304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0308:	4604      	mov	r4, r0
 80a030a:	7983      	ldrb	r3, [r0, #6]
 80a030c:	b086      	sub	sp, #24
 80a030e:	3b02      	subs	r3, #2
 80a0310:	b2db      	uxtb	r3, r3
 80a0312:	2b04      	cmp	r3, #4
 80a0314:	bf96      	itet	ls
 80a0316:	4a29      	ldrls	r2, [pc, #164]	; (80a03bc <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a0318:	2532      	movhi	r5, #50	; 0x32
 80a031a:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a031e:	f7ff ff8b 	bl	80a0238 <micros>
 80a0322:	6923      	ldr	r3, [r4, #16]
 80a0324:	1ac0      	subs	r0, r0, r3
 80a0326:	42a8      	cmp	r0, r5
 80a0328:	d3f9      	bcc.n	80a031e <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a032a:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a032c:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a032e:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0330:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0332:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a0336:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a033a:	f000 8272 	beq.w	80a0822 <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a033e:	2907      	cmp	r1, #7
 80a0340:	f000 826f 	beq.w	80a0822 <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a0344:	2906      	cmp	r1, #6
 80a0346:	f000 8432 	beq.w	80a0bae <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a034a:	2905      	cmp	r1, #5
 80a034c:	f000 83ab 	beq.w	80a0aa6 <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a0350:	2908      	cmp	r1, #8
 80a0352:	f000 83a8 	beq.w	80a0aa6 <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a0356:	2900      	cmp	r1, #0
 80a0358:	f040 8563 	bne.w	80a0e22 <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a035c:	4a18      	ldr	r2, [pc, #96]	; (80a03c0 <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a035e:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0362:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0366:	b29b      	uxth	r3, r3
 80a0368:	2b00      	cmp	r3, #0
 80a036a:	f000 8395 	beq.w	80a0a98 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a036e:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0370:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0374:	f10e 0503 	add.w	r5, lr, #3
 80a0378:	3b03      	subs	r3, #3
 80a037a:	b29b      	uxth	r3, r3
 80a037c:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0380:	f89e 3000 	ldrb.w	r3, [lr]
 80a0384:	b2db      	uxtb	r3, r3
 80a0386:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a038a:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a038e:	b2db      	uxtb	r3, r3
 80a0390:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0394:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0398:	b2db      	uxtb	r3, r3
 80a039a:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a039e:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a03a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a03a6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a03aa:	021b      	lsls	r3, r3, #8
 80a03ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a03b0:	4303      	orrs	r3, r0
 80a03b2:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a03b4:	f88d 1005 	strb.w	r1, [sp, #5]
 80a03b8:	e11b      	b.n	80a05f2 <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a03ba:	bf00      	nop
 80a03bc:	080a3838 	.word	0x080a3838
 80a03c0:	200000b8 	.word	0x200000b8
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a03c4:	4600      	mov	r0, r0
 80a03c6:	bf00      	nop
 80a03c8:	bf00      	nop
 80a03ca:	bf00      	nop
 80a03cc:	bf00      	nop
 80a03ce:	bf00      	nop
 80a03d0:	bf00      	nop
 80a03d2:	bf00      	nop
 80a03d4:	bf00      	nop
 80a03d6:	bf00      	nop
 80a03d8:	bf00      	nop
 80a03da:	bf00      	nop
 80a03dc:	bf00      	nop
 80a03de:	bf00      	nop
 80a03e0:	bf00      	nop
 80a03e2:	bf00      	nop
 80a03e4:	bf00      	nop
 80a03e6:	bf00      	nop
 80a03e8:	bf00      	nop
 80a03ea:	bf00      	nop
 80a03ec:	bf00      	nop
 80a03ee:	bf00      	nop
 80a03f0:	bf00      	nop
 80a03f2:	bf00      	nop
 80a03f4:	bf00      	nop
 80a03f6:	bf00      	nop
 80a03f8:	bf00      	nop
 80a03fa:	bf00      	nop
 80a03fc:	bf00      	nop
 80a03fe:	bf00      	nop
 80a0400:	bf00      	nop
 80a0402:	bf00      	nop
 80a0404:	bf00      	nop
 80a0406:	bf00      	nop
 80a0408:	bf00      	nop
 80a040a:	bf00      	nop
 80a040c:	bf00      	nop
 80a040e:	bf00      	nop
 80a0410:	bf00      	nop
 80a0412:	bf00      	nop
 80a0414:	bf00      	nop
 80a0416:	bf00      	nop
 80a0418:	bf00      	nop
 80a041a:	bf00      	nop
 80a041c:	bf00      	nop
 80a041e:	bf00      	nop
 80a0420:	bf00      	nop
 80a0422:	bf00      	nop
 80a0424:	bf00      	nop
 80a0426:	bf00      	nop
 80a0428:	bf00      	nop
 80a042a:	bf00      	nop
 80a042c:	bf00      	nop
 80a042e:	bf00      	nop
 80a0430:	bf00      	nop
 80a0432:	bf00      	nop
 80a0434:	bf00      	nop
 80a0436:	bf00      	nop
 80a0438:	bf00      	nop
 80a043a:	bf00      	nop
 80a043c:	bf00      	nop
 80a043e:	bf00      	nop
 80a0440:	bf00      	nop
 80a0442:	bf00      	nop
 80a0444:	bf00      	nop
 80a0446:	bf00      	nop
 80a0448:	bf00      	nop
 80a044a:	bf00      	nop
 80a044c:	bf00      	nop
 80a044e:	bf00      	nop
 80a0450:	bf00      	nop
 80a0452:	bf00      	nop
 80a0454:	bf00      	nop
 80a0456:	bf00      	nop
 80a0458:	bf00      	nop
 80a045a:	bf00      	nop
 80a045c:	bf00      	nop
 80a045e:	bf00      	nop
 80a0460:	bf00      	nop
 80a0462:	bf00      	nop
 80a0464:	bf00      	nop
 80a0466:	bf00      	nop
 80a0468:	bf00      	nop
 80a046a:	bf00      	nop
 80a046c:	bf00      	nop
 80a046e:	bf00      	nop
 80a0470:	bf00      	nop
 80a0472:	bf00      	nop
 80a0474:	bf00      	nop
 80a0476:	bf00      	nop
 80a0478:	bf00      	nop
 80a047a:	bf00      	nop
 80a047c:	bf00      	nop
 80a047e:	bf00      	nop
 80a0480:	bf00      	nop
 80a0482:	bf00      	nop
 80a0484:	bf00      	nop
 80a0486:	bf00      	nop
 80a0488:	bf00      	nop
 80a048a:	bf00      	nop
 80a048c:	bf00      	nop
 80a048e:	bf00      	nop
 80a0490:	bf00      	nop
 80a0492:	bf00      	nop
 80a0494:	bf00      	nop
 80a0496:	bf00      	nop
 80a0498:	bf00      	nop
 80a049a:	bf00      	nop
 80a049c:	bf00      	nop
 80a049e:	bf00      	nop
 80a04a0:	bf00      	nop
 80a04a2:	bf00      	nop
 80a04a4:	bf00      	nop
 80a04a6:	bf00      	nop
 80a04a8:	bf00      	nop
 80a04aa:	bf00      	nop
 80a04ac:	bf00      	nop
 80a04ae:	bf00      	nop
 80a04b0:	bf00      	nop
 80a04b2:	bf00      	nop
 80a04b4:	bf00      	nop
 80a04b6:	bf00      	nop
 80a04b8:	bf00      	nop
 80a04ba:	bf00      	nop
 80a04bc:	bf00      	nop
 80a04be:	bf00      	nop
 80a04c0:	bf00      	nop
 80a04c2:	bf00      	nop
 80a04c4:	bf00      	nop
 80a04c6:	bf00      	nop
 80a04c8:	bf00      	nop
 80a04ca:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a04cc:	79e3      	ldrb	r3, [r4, #7]
 80a04ce:	6810      	ldr	r0, [r2, #0]
 80a04d0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a04d4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a04d8:	88bf      	ldrh	r7, [r7, #4]
 80a04da:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a04de:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a04e0:	4600      	mov	r0, r0
 80a04e2:	bf00      	nop
 80a04e4:	bf00      	nop
 80a04e6:	bf00      	nop
 80a04e8:	bf00      	nop
 80a04ea:	bf00      	nop
 80a04ec:	bf00      	nop
 80a04ee:	bf00      	nop
 80a04f0:	bf00      	nop
 80a04f2:	bf00      	nop
 80a04f4:	bf00      	nop
 80a04f6:	bf00      	nop
 80a04f8:	bf00      	nop
 80a04fa:	bf00      	nop
 80a04fc:	bf00      	nop
 80a04fe:	bf00      	nop
 80a0500:	bf00      	nop
 80a0502:	bf00      	nop
 80a0504:	bf00      	nop
 80a0506:	bf00      	nop
 80a0508:	bf00      	nop
 80a050a:	bf00      	nop
 80a050c:	bf00      	nop
 80a050e:	bf00      	nop
 80a0510:	bf00      	nop
 80a0512:	bf00      	nop
 80a0514:	bf00      	nop
 80a0516:	bf00      	nop
 80a0518:	bf00      	nop
 80a051a:	bf00      	nop
 80a051c:	bf00      	nop
 80a051e:	bf00      	nop
 80a0520:	bf00      	nop
 80a0522:	bf00      	nop
 80a0524:	bf00      	nop
 80a0526:	bf00      	nop
 80a0528:	bf00      	nop
 80a052a:	bf00      	nop
 80a052c:	bf00      	nop
 80a052e:	bf00      	nop
 80a0530:	bf00      	nop
 80a0532:	bf00      	nop
 80a0534:	bf00      	nop
 80a0536:	bf00      	nop
 80a0538:	bf00      	nop
 80a053a:	bf00      	nop
 80a053c:	bf00      	nop
 80a053e:	bf00      	nop
 80a0540:	bf00      	nop
 80a0542:	bf00      	nop
 80a0544:	bf00      	nop
 80a0546:	bf00      	nop
 80a0548:	bf00      	nop
 80a054a:	bf00      	nop
 80a054c:	bf00      	nop
 80a054e:	bf00      	nop
 80a0550:	bf00      	nop
 80a0552:	bf00      	nop
 80a0554:	bf00      	nop
 80a0556:	bf00      	nop
 80a0558:	bf00      	nop
 80a055a:	bf00      	nop
 80a055c:	bf00      	nop
 80a055e:	bf00      	nop
 80a0560:	bf00      	nop
 80a0562:	bf00      	nop
 80a0564:	bf00      	nop
 80a0566:	bf00      	nop
 80a0568:	bf00      	nop
 80a056a:	bf00      	nop
 80a056c:	bf00      	nop
 80a056e:	bf00      	nop
 80a0570:	bf00      	nop
 80a0572:	bf00      	nop
 80a0574:	bf00      	nop
 80a0576:	bf00      	nop
 80a0578:	bf00      	nop
 80a057a:	bf00      	nop
 80a057c:	bf00      	nop
 80a057e:	bf00      	nop
 80a0580:	bf00      	nop
 80a0582:	bf00      	nop
 80a0584:	bf00      	nop
 80a0586:	bf00      	nop
 80a0588:	bf00      	nop
 80a058a:	bf00      	nop
 80a058c:	bf00      	nop
 80a058e:	bf00      	nop
 80a0590:	bf00      	nop
 80a0592:	bf00      	nop
 80a0594:	bf00      	nop
 80a0596:	bf00      	nop
 80a0598:	bf00      	nop
 80a059a:	bf00      	nop
 80a059c:	bf00      	nop
 80a059e:	bf00      	nop
 80a05a0:	bf00      	nop
 80a05a2:	bf00      	nop
 80a05a4:	bf00      	nop
 80a05a6:	bf00      	nop
 80a05a8:	bf00      	nop
 80a05aa:	bf00      	nop
 80a05ac:	bf00      	nop
 80a05ae:	bf00      	nop
 80a05b0:	bf00      	nop
 80a05b2:	bf00      	nop
 80a05b4:	bf00      	nop
 80a05b6:	bf00      	nop
 80a05b8:	bf00      	nop
 80a05ba:	bf00      	nop
 80a05bc:	bf00      	nop
 80a05be:	bf00      	nop
 80a05c0:	bf00      	nop
 80a05c2:	bf00      	nop
 80a05c4:	bf00      	nop
 80a05c6:	bf00      	nop
 80a05c8:	bf00      	nop
 80a05ca:	bf00      	nop
 80a05cc:	bf00      	nop
 80a05ce:	bf00      	nop
 80a05d0:	bf00      	nop
 80a05d2:	bf00      	nop
 80a05d4:	bf00      	nop
 80a05d6:	bf00      	nop
 80a05d8:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a05da:	9b04      	ldr	r3, [sp, #16]
 80a05dc:	085b      	lsrs	r3, r3, #1
 80a05de:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a05e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a05e4:	3301      	adds	r3, #1
 80a05e6:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a05e8:	2b17      	cmp	r3, #23
 80a05ea:	f88d 3005 	strb.w	r3, [sp, #5]
 80a05ee:	f200 82db 	bhi.w	80a0ba8 <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a05f2:	79e3      	ldrb	r3, [r4, #7]
 80a05f4:	6810      	ldr	r0, [r2, #0]
 80a05f6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a05fa:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a05fe:	88bf      	ldrh	r7, [r7, #4]
 80a0600:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0604:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0606:	9803      	ldr	r0, [sp, #12]
 80a0608:	9b04      	ldr	r3, [sp, #16]
 80a060a:	4218      	tst	r0, r3
 80a060c:	f47f aeda 	bne.w	80a03c4 <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a0610:	4600      	mov	r0, r0
 80a0612:	bf00      	nop
 80a0614:	bf00      	nop
 80a0616:	bf00      	nop
 80a0618:	bf00      	nop
 80a061a:	bf00      	nop
 80a061c:	bf00      	nop
 80a061e:	bf00      	nop
 80a0620:	bf00      	nop
 80a0622:	bf00      	nop
 80a0624:	bf00      	nop
 80a0626:	bf00      	nop
 80a0628:	bf00      	nop
 80a062a:	bf00      	nop
 80a062c:	bf00      	nop
 80a062e:	bf00      	nop
 80a0630:	bf00      	nop
 80a0632:	bf00      	nop
 80a0634:	bf00      	nop
 80a0636:	bf00      	nop
 80a0638:	bf00      	nop
 80a063a:	bf00      	nop
 80a063c:	bf00      	nop
 80a063e:	bf00      	nop
 80a0640:	bf00      	nop
 80a0642:	bf00      	nop
 80a0644:	bf00      	nop
 80a0646:	bf00      	nop
 80a0648:	bf00      	nop
 80a064a:	bf00      	nop
 80a064c:	bf00      	nop
 80a064e:	bf00      	nop
 80a0650:	bf00      	nop
 80a0652:	bf00      	nop
 80a0654:	bf00      	nop
 80a0656:	bf00      	nop
 80a0658:	bf00      	nop
 80a065a:	bf00      	nop
 80a065c:	bf00      	nop
 80a065e:	bf00      	nop
 80a0660:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a0662:	79e3      	ldrb	r3, [r4, #7]
 80a0664:	6810      	ldr	r0, [r2, #0]
 80a0666:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a066a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a066e:	88bf      	ldrh	r7, [r7, #4]
 80a0670:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0674:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0676:	4600      	mov	r0, r0
 80a0678:	bf00      	nop
 80a067a:	bf00      	nop
 80a067c:	bf00      	nop
 80a067e:	bf00      	nop
 80a0680:	bf00      	nop
 80a0682:	bf00      	nop
 80a0684:	bf00      	nop
 80a0686:	bf00      	nop
 80a0688:	bf00      	nop
 80a068a:	bf00      	nop
 80a068c:	bf00      	nop
 80a068e:	bf00      	nop
 80a0690:	bf00      	nop
 80a0692:	bf00      	nop
 80a0694:	bf00      	nop
 80a0696:	bf00      	nop
 80a0698:	bf00      	nop
 80a069a:	bf00      	nop
 80a069c:	bf00      	nop
 80a069e:	bf00      	nop
 80a06a0:	bf00      	nop
 80a06a2:	bf00      	nop
 80a06a4:	bf00      	nop
 80a06a6:	bf00      	nop
 80a06a8:	bf00      	nop
 80a06aa:	bf00      	nop
 80a06ac:	bf00      	nop
 80a06ae:	bf00      	nop
 80a06b0:	bf00      	nop
 80a06b2:	bf00      	nop
 80a06b4:	bf00      	nop
 80a06b6:	bf00      	nop
 80a06b8:	bf00      	nop
 80a06ba:	bf00      	nop
 80a06bc:	bf00      	nop
 80a06be:	bf00      	nop
 80a06c0:	bf00      	nop
 80a06c2:	bf00      	nop
 80a06c4:	bf00      	nop
 80a06c6:	bf00      	nop
 80a06c8:	bf00      	nop
 80a06ca:	bf00      	nop
 80a06cc:	bf00      	nop
 80a06ce:	bf00      	nop
 80a06d0:	bf00      	nop
 80a06d2:	bf00      	nop
 80a06d4:	bf00      	nop
 80a06d6:	bf00      	nop
 80a06d8:	bf00      	nop
 80a06da:	bf00      	nop
 80a06dc:	bf00      	nop
 80a06de:	bf00      	nop
 80a06e0:	bf00      	nop
 80a06e2:	bf00      	nop
 80a06e4:	bf00      	nop
 80a06e6:	bf00      	nop
 80a06e8:	bf00      	nop
 80a06ea:	bf00      	nop
 80a06ec:	bf00      	nop
 80a06ee:	bf00      	nop
 80a06f0:	bf00      	nop
 80a06f2:	bf00      	nop
 80a06f4:	bf00      	nop
 80a06f6:	bf00      	nop
 80a06f8:	bf00      	nop
 80a06fa:	bf00      	nop
 80a06fc:	bf00      	nop
 80a06fe:	bf00      	nop
 80a0700:	bf00      	nop
 80a0702:	bf00      	nop
 80a0704:	bf00      	nop
 80a0706:	bf00      	nop
 80a0708:	bf00      	nop
 80a070a:	bf00      	nop
 80a070c:	bf00      	nop
 80a070e:	bf00      	nop
 80a0710:	bf00      	nop
 80a0712:	bf00      	nop
 80a0714:	bf00      	nop
 80a0716:	bf00      	nop
 80a0718:	bf00      	nop
 80a071a:	bf00      	nop
 80a071c:	bf00      	nop
 80a071e:	bf00      	nop
 80a0720:	bf00      	nop
 80a0722:	bf00      	nop
 80a0724:	bf00      	nop
 80a0726:	bf00      	nop
 80a0728:	bf00      	nop
 80a072a:	bf00      	nop
 80a072c:	bf00      	nop
 80a072e:	bf00      	nop
 80a0730:	bf00      	nop
 80a0732:	bf00      	nop
 80a0734:	bf00      	nop
 80a0736:	bf00      	nop
 80a0738:	bf00      	nop
 80a073a:	bf00      	nop
 80a073c:	bf00      	nop
 80a073e:	bf00      	nop
 80a0740:	bf00      	nop
 80a0742:	bf00      	nop
 80a0744:	bf00      	nop
 80a0746:	bf00      	nop
 80a0748:	bf00      	nop
 80a074a:	bf00      	nop
 80a074c:	bf00      	nop
 80a074e:	bf00      	nop
 80a0750:	bf00      	nop
 80a0752:	bf00      	nop
 80a0754:	bf00      	nop
 80a0756:	bf00      	nop
 80a0758:	bf00      	nop
 80a075a:	bf00      	nop
 80a075c:	bf00      	nop
 80a075e:	bf00      	nop
 80a0760:	bf00      	nop
 80a0762:	bf00      	nop
 80a0764:	bf00      	nop
 80a0766:	bf00      	nop
 80a0768:	bf00      	nop
 80a076a:	bf00      	nop
 80a076c:	bf00      	nop
 80a076e:	bf00      	nop
 80a0770:	bf00      	nop
 80a0772:	bf00      	nop
 80a0774:	bf00      	nop
 80a0776:	bf00      	nop
 80a0778:	bf00      	nop
 80a077a:	bf00      	nop
 80a077c:	bf00      	nop
 80a077e:	bf00      	nop
 80a0780:	bf00      	nop
 80a0782:	bf00      	nop
 80a0784:	bf00      	nop
 80a0786:	bf00      	nop
 80a0788:	bf00      	nop
 80a078a:	bf00      	nop
 80a078c:	bf00      	nop
 80a078e:	bf00      	nop
 80a0790:	bf00      	nop
 80a0792:	bf00      	nop
 80a0794:	bf00      	nop
 80a0796:	bf00      	nop
 80a0798:	bf00      	nop
 80a079a:	bf00      	nop
 80a079c:	bf00      	nop
 80a079e:	bf00      	nop
 80a07a0:	bf00      	nop
 80a07a2:	bf00      	nop
 80a07a4:	bf00      	nop
 80a07a6:	bf00      	nop
 80a07a8:	bf00      	nop
 80a07aa:	bf00      	nop
 80a07ac:	bf00      	nop
 80a07ae:	bf00      	nop
 80a07b0:	bf00      	nop
 80a07b2:	bf00      	nop
 80a07b4:	bf00      	nop
 80a07b6:	bf00      	nop
 80a07b8:	bf00      	nop
 80a07ba:	bf00      	nop
 80a07bc:	bf00      	nop
 80a07be:	bf00      	nop
 80a07c0:	bf00      	nop
 80a07c2:	bf00      	nop
 80a07c4:	bf00      	nop
 80a07c6:	bf00      	nop
 80a07c8:	bf00      	nop
 80a07ca:	bf00      	nop
 80a07cc:	bf00      	nop
 80a07ce:	bf00      	nop
 80a07d0:	bf00      	nop
 80a07d2:	bf00      	nop
 80a07d4:	bf00      	nop
 80a07d6:	bf00      	nop
 80a07d8:	bf00      	nop
 80a07da:	bf00      	nop
 80a07dc:	bf00      	nop
 80a07de:	bf00      	nop
 80a07e0:	bf00      	nop
 80a07e2:	bf00      	nop
 80a07e4:	bf00      	nop
 80a07e6:	bf00      	nop
 80a07e8:	bf00      	nop
 80a07ea:	bf00      	nop
 80a07ec:	bf00      	nop
 80a07ee:	bf00      	nop
 80a07f0:	bf00      	nop
 80a07f2:	bf00      	nop
 80a07f4:	bf00      	nop
 80a07f6:	bf00      	nop
 80a07f8:	bf00      	nop
 80a07fa:	bf00      	nop
 80a07fc:	bf00      	nop
 80a07fe:	bf00      	nop
 80a0800:	bf00      	nop
 80a0802:	bf00      	nop
 80a0804:	bf00      	nop
 80a0806:	bf00      	nop
 80a0808:	bf00      	nop
 80a080a:	bf00      	nop
 80a080c:	bf00      	nop
 80a080e:	bf00      	nop
 80a0810:	bf00      	nop
 80a0812:	bf00      	nop
 80a0814:	bf00      	nop
 80a0816:	bf00      	nop
 80a0818:	bf00      	nop
 80a081a:	bf00      	nop
 80a081c:	bf00      	nop
 80a081e:	bf00      	nop
 80a0820:	e6db      	b.n	80a05da <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0822:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0826:	4a17      	ldr	r2, [pc, #92]	; (80a0884 <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a0828:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a082a:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a082e:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0830:	2b00      	cmp	r3, #0
 80a0832:	f000 8131 	beq.w	80a0a98 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0836:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0838:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a083c:	f10e 0103 	add.w	r1, lr, #3
 80a0840:	3b03      	subs	r3, #3
 80a0842:	b29b      	uxth	r3, r3
 80a0844:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0848:	f89e 3000 	ldrb.w	r3, [lr]
 80a084c:	b2db      	uxtb	r3, r3
 80a084e:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0852:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0856:	b2db      	uxtb	r3, r3
 80a0858:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a085c:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0860:	b2db      	uxtb	r3, r3
 80a0862:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0866:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a086a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a086e:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a0872:	0200      	lsls	r0, r0, #8
 80a0874:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a0878:	433b      	orrs	r3, r7
 80a087a:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a087c:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0880:	e080      	b.n	80a0984 <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a0882:	bf00      	nop
 80a0884:	200000b8 	.word	0x200000b8
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0888:	4600      	mov	r0, r0
 80a088a:	bf00      	nop
 80a088c:	bf00      	nop
 80a088e:	bf00      	nop
 80a0890:	bf00      	nop
 80a0892:	bf00      	nop
 80a0894:	bf00      	nop
 80a0896:	bf00      	nop
 80a0898:	bf00      	nop
 80a089a:	bf00      	nop
 80a089c:	bf00      	nop
 80a089e:	bf00      	nop
 80a08a0:	bf00      	nop
 80a08a2:	bf00      	nop
 80a08a4:	bf00      	nop
 80a08a6:	bf00      	nop
 80a08a8:	bf00      	nop
 80a08aa:	bf00      	nop
 80a08ac:	bf00      	nop
 80a08ae:	bf00      	nop
 80a08b0:	bf00      	nop
 80a08b2:	bf00      	nop
 80a08b4:	bf00      	nop
 80a08b6:	bf00      	nop
 80a08b8:	bf00      	nop
 80a08ba:	bf00      	nop
 80a08bc:	bf00      	nop
 80a08be:	bf00      	nop
 80a08c0:	bf00      	nop
 80a08c2:	bf00      	nop
 80a08c4:	bf00      	nop
 80a08c6:	bf00      	nop
 80a08c8:	bf00      	nop
 80a08ca:	bf00      	nop
 80a08cc:	bf00      	nop
 80a08ce:	bf00      	nop
 80a08d0:	bf00      	nop
 80a08d2:	bf00      	nop
 80a08d4:	bf00      	nop
 80a08d6:	bf00      	nop
 80a08d8:	bf00      	nop
 80a08da:	bf00      	nop
 80a08dc:	bf00      	nop
 80a08de:	bf00      	nop
 80a08e0:	bf00      	nop
 80a08e2:	bf00      	nop
 80a08e4:	bf00      	nop
 80a08e6:	bf00      	nop
 80a08e8:	bf00      	nop
 80a08ea:	bf00      	nop
 80a08ec:	bf00      	nop
 80a08ee:	bf00      	nop
 80a08f0:	bf00      	nop
 80a08f2:	bf00      	nop
 80a08f4:	bf00      	nop
 80a08f6:	bf00      	nop
 80a08f8:	bf00      	nop
 80a08fa:	bf00      	nop
 80a08fc:	bf00      	nop
 80a08fe:	bf00      	nop
 80a0900:	bf00      	nop
 80a0902:	bf00      	nop
 80a0904:	bf00      	nop
 80a0906:	bf00      	nop
 80a0908:	bf00      	nop
 80a090a:	bf00      	nop
 80a090c:	bf00      	nop
 80a090e:	bf00      	nop
 80a0910:	bf00      	nop
 80a0912:	bf00      	nop
 80a0914:	bf00      	nop
 80a0916:	bf00      	nop
 80a0918:	bf00      	nop
 80a091a:	bf00      	nop
 80a091c:	bf00      	nop
 80a091e:	bf00      	nop
 80a0920:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a0922:	79e3      	ldrb	r3, [r4, #7]
 80a0924:	6810      	ldr	r0, [r2, #0]
 80a0926:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a092a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a092e:	88bf      	ldrh	r7, [r7, #4]
 80a0930:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0934:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0936:	4600      	mov	r0, r0
 80a0938:	bf00      	nop
 80a093a:	bf00      	nop
 80a093c:	bf00      	nop
 80a093e:	bf00      	nop
 80a0940:	bf00      	nop
 80a0942:	bf00      	nop
 80a0944:	bf00      	nop
 80a0946:	bf00      	nop
 80a0948:	bf00      	nop
 80a094a:	bf00      	nop
 80a094c:	bf00      	nop
 80a094e:	bf00      	nop
 80a0950:	bf00      	nop
 80a0952:	bf00      	nop
 80a0954:	bf00      	nop
 80a0956:	bf00      	nop
 80a0958:	bf00      	nop
 80a095a:	bf00      	nop
 80a095c:	bf00      	nop
 80a095e:	bf00      	nop
 80a0960:	bf00      	nop
 80a0962:	bf00      	nop
 80a0964:	bf00      	nop
 80a0966:	bf00      	nop
 80a0968:	bf00      	nop
 80a096a:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a096c:	9b04      	ldr	r3, [sp, #16]
 80a096e:	085b      	lsrs	r3, r3, #1
 80a0970:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0972:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0976:	3301      	adds	r3, #1
 80a0978:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a097a:	2b17      	cmp	r3, #23
 80a097c:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0980:	f200 8083 	bhi.w	80a0a8a <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a0984:	79e3      	ldrb	r3, [r4, #7]
 80a0986:	6810      	ldr	r0, [r2, #0]
 80a0988:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a098c:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0990:	88bf      	ldrh	r7, [r7, #4]
 80a0992:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0996:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0998:	9803      	ldr	r0, [sp, #12]
 80a099a:	9b04      	ldr	r3, [sp, #16]
 80a099c:	4218      	tst	r0, r3
 80a099e:	f47f af73 	bne.w	80a0888 <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a09a2:	4600      	mov	r0, r0
 80a09a4:	bf00      	nop
 80a09a6:	bf00      	nop
 80a09a8:	bf00      	nop
 80a09aa:	bf00      	nop
 80a09ac:	bf00      	nop
 80a09ae:	bf00      	nop
 80a09b0:	bf00      	nop
 80a09b2:	bf00      	nop
 80a09b4:	bf00      	nop
 80a09b6:	bf00      	nop
 80a09b8:	bf00      	nop
 80a09ba:	bf00      	nop
 80a09bc:	bf00      	nop
 80a09be:	bf00      	nop
 80a09c0:	bf00      	nop
 80a09c2:	bf00      	nop
 80a09c4:	bf00      	nop
 80a09c6:	bf00      	nop
 80a09c8:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a09ca:	79e3      	ldrb	r3, [r4, #7]
 80a09cc:	6810      	ldr	r0, [r2, #0]
 80a09ce:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a09d2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a09d6:	88bf      	ldrh	r7, [r7, #4]
 80a09d8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a09dc:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a09de:	4600      	mov	r0, r0
 80a09e0:	bf00      	nop
 80a09e2:	bf00      	nop
 80a09e4:	bf00      	nop
 80a09e6:	bf00      	nop
 80a09e8:	bf00      	nop
 80a09ea:	bf00      	nop
 80a09ec:	bf00      	nop
 80a09ee:	bf00      	nop
 80a09f0:	bf00      	nop
 80a09f2:	bf00      	nop
 80a09f4:	bf00      	nop
 80a09f6:	bf00      	nop
 80a09f8:	bf00      	nop
 80a09fa:	bf00      	nop
 80a09fc:	bf00      	nop
 80a09fe:	bf00      	nop
 80a0a00:	bf00      	nop
 80a0a02:	bf00      	nop
 80a0a04:	bf00      	nop
 80a0a06:	bf00      	nop
 80a0a08:	bf00      	nop
 80a0a0a:	bf00      	nop
 80a0a0c:	bf00      	nop
 80a0a0e:	bf00      	nop
 80a0a10:	bf00      	nop
 80a0a12:	bf00      	nop
 80a0a14:	bf00      	nop
 80a0a16:	bf00      	nop
 80a0a18:	bf00      	nop
 80a0a1a:	bf00      	nop
 80a0a1c:	bf00      	nop
 80a0a1e:	bf00      	nop
 80a0a20:	bf00      	nop
 80a0a22:	bf00      	nop
 80a0a24:	bf00      	nop
 80a0a26:	bf00      	nop
 80a0a28:	bf00      	nop
 80a0a2a:	bf00      	nop
 80a0a2c:	bf00      	nop
 80a0a2e:	bf00      	nop
 80a0a30:	bf00      	nop
 80a0a32:	bf00      	nop
 80a0a34:	bf00      	nop
 80a0a36:	bf00      	nop
 80a0a38:	bf00      	nop
 80a0a3a:	bf00      	nop
 80a0a3c:	bf00      	nop
 80a0a3e:	bf00      	nop
 80a0a40:	bf00      	nop
 80a0a42:	bf00      	nop
 80a0a44:	bf00      	nop
 80a0a46:	bf00      	nop
 80a0a48:	bf00      	nop
 80a0a4a:	bf00      	nop
 80a0a4c:	bf00      	nop
 80a0a4e:	bf00      	nop
 80a0a50:	bf00      	nop
 80a0a52:	bf00      	nop
 80a0a54:	bf00      	nop
 80a0a56:	bf00      	nop
 80a0a58:	bf00      	nop
 80a0a5a:	bf00      	nop
 80a0a5c:	bf00      	nop
 80a0a5e:	bf00      	nop
 80a0a60:	bf00      	nop
 80a0a62:	bf00      	nop
 80a0a64:	bf00      	nop
 80a0a66:	bf00      	nop
 80a0a68:	bf00      	nop
 80a0a6a:	bf00      	nop
 80a0a6c:	bf00      	nop
 80a0a6e:	bf00      	nop
 80a0a70:	bf00      	nop
 80a0a72:	bf00      	nop
 80a0a74:	bf00      	nop
 80a0a76:	bf00      	nop
 80a0a78:	bf00      	nop
 80a0a7a:	bf00      	nop
 80a0a7c:	bf00      	nop
 80a0a7e:	bf00      	nop
 80a0a80:	bf00      	nop
 80a0a82:	bf00      	nop
 80a0a84:	bf00      	nop
 80a0a86:	bf00      	nop
 80a0a88:	e770      	b.n	80a096c <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0a8a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0a8e:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0a90:	b29b      	uxth	r3, r3
 80a0a92:	2b00      	cmp	r3, #0
 80a0a94:	f47f aecf 	bne.w	80a0836 <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a0a98:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a0a9a:	f7ff fbcd 	bl	80a0238 <micros>
 80a0a9e:	6120      	str	r0, [r4, #16]
}
 80a0aa0:	b006      	add	sp, #24
 80a0aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0aa6:	4b5e      	ldr	r3, [pc, #376]	; (80a0c20 <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a0aa8:	4a5e      	ldr	r2, [pc, #376]	; (80a0c24 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0aaa:	4618      	mov	r0, r3
 80a0aac:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0aae:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0ab2:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0ab4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0ab8:	b292      	uxth	r2, r2
 80a0aba:	2a00      	cmp	r2, #0
 80a0abc:	d0ec      	beq.n	80a0a98 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0abe:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0ac2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0ac6:	f10e 0503 	add.w	r5, lr, #3
 80a0aca:	3a03      	subs	r2, #3
 80a0acc:	b292      	uxth	r2, r2
 80a0ace:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0ad2:	f89e 2000 	ldrb.w	r2, [lr]
 80a0ad6:	b2d2      	uxtb	r2, r2
 80a0ad8:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0adc:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a0ae0:	b2d2      	uxtb	r2, r2
 80a0ae2:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0ae6:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a0aea:	b2d2      	uxtb	r2, r2
 80a0aec:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0af0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a0af4:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a0af8:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a0afc:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a0b00:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a0b04:	ea42 020c 	orr.w	r2, r2, ip
 80a0b08:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0b0a:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a0b0e:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0b10:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a0b12:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0b16:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0b1a:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0b1e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0b22:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a0b24:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a0b28:	9e03      	ldr	r6, [sp, #12]
 80a0b2a:	9a04      	ldr	r2, [sp, #16]
 80a0b2c:	4216      	tst	r6, r2
 80a0b2e:	d023      	beq.n	80a0b78 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0b30:	685a      	ldr	r2, [r3, #4]
 80a0b32:	9e05      	ldr	r6, [sp, #20]
 80a0b34:	1b92      	subs	r2, r2, r6
 80a0b36:	2a4f      	cmp	r2, #79	; 0x4f
 80a0b38:	d9fa      	bls.n	80a0b30 <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a0b3a:	79e2      	ldrb	r2, [r4, #7]
 80a0b3c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0b40:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0b44:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0b48:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0b4c:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0b50:	6842      	ldr	r2, [r0, #4]
 80a0b52:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a0b54:	685a      	ldr	r2, [r3, #4]
 80a0b56:	9e05      	ldr	r6, [sp, #20]
 80a0b58:	1b92      	subs	r2, r2, r6
 80a0b5a:	2a07      	cmp	r2, #7
 80a0b5c:	d9fa      	bls.n	80a0b54 <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a0b5e:	9a04      	ldr	r2, [sp, #16]
 80a0b60:	0852      	lsrs	r2, r2, #1
 80a0b62:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0b64:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a0b68:	3201      	adds	r2, #1
 80a0b6a:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0b6c:	2a17      	cmp	r2, #23
 80a0b6e:	f88d 2005 	strb.w	r2, [sp, #5]
 80a0b72:	d9cc      	bls.n	80a0b0e <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0b74:	46ae      	mov	lr, r5
 80a0b76:	e79d      	b.n	80a0ab4 <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a0b78:	685a      	ldr	r2, [r3, #4]
 80a0b7a:	9e05      	ldr	r6, [sp, #20]
 80a0b7c:	1b92      	subs	r2, r2, r6
 80a0b7e:	2a18      	cmp	r2, #24
 80a0b80:	d9fa      	bls.n	80a0b78 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a0b82:	79e2      	ldrb	r2, [r4, #7]
 80a0b84:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0b88:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0b8c:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0b90:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0b94:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0b98:	6842      	ldr	r2, [r0, #4]
 80a0b9a:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a0b9c:	685a      	ldr	r2, [r3, #4]
 80a0b9e:	9e05      	ldr	r6, [sp, #20]
 80a0ba0:	1b92      	subs	r2, r2, r6
 80a0ba2:	2a45      	cmp	r2, #69	; 0x45
 80a0ba4:	d9fa      	bls.n	80a0b9c <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a0ba6:	e7da      	b.n	80a0b5e <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a0ba8:	46ae      	mov	lr, r5
 80a0baa:	f7ff bbda 	b.w	80a0362 <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a0bae:	4a1d      	ldr	r2, [pc, #116]	; (80a0c24 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a0bb0:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a0bb4:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a0bb6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0bba:	b29b      	uxth	r3, r3
 80a0bbc:	2b00      	cmp	r3, #0
 80a0bbe:	f43f af6b 	beq.w	80a0a98 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a0bc2:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a0bc4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0bc8:	f10e 0104 	add.w	r1, lr, #4
 80a0bcc:	3b04      	subs	r3, #4
 80a0bce:	b29b      	uxth	r3, r3
 80a0bd0:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0bd4:	f89e 3000 	ldrb.w	r3, [lr]
 80a0bd8:	b2db      	uxtb	r3, r3
 80a0bda:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0bde:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0be2:	b2db      	uxtb	r3, r3
 80a0be4:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0be8:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0bec:	b2db      	uxtb	r3, r3
 80a0bee:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a0bf2:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a0bf6:	b2db      	uxtb	r3, r3
 80a0bf8:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a0bfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a0c00:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a0c04:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a0c08:	043f      	lsls	r7, r7, #16
 80a0c0a:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a0c0e:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a0c12:	4303      	orrs	r3, r0
 80a0c14:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a0c18:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a0c1a:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0c1e:	e07e      	b.n	80a0d1e <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a0c20:	e0001000 	.word	0xe0001000
 80a0c24:	200000b8 	.word	0x200000b8
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0c28:	4600      	mov	r0, r0
 80a0c2a:	bf00      	nop
 80a0c2c:	bf00      	nop
 80a0c2e:	bf00      	nop
 80a0c30:	bf00      	nop
 80a0c32:	bf00      	nop
 80a0c34:	bf00      	nop
 80a0c36:	bf00      	nop
 80a0c38:	bf00      	nop
 80a0c3a:	bf00      	nop
 80a0c3c:	bf00      	nop
 80a0c3e:	bf00      	nop
 80a0c40:	bf00      	nop
 80a0c42:	bf00      	nop
 80a0c44:	bf00      	nop
 80a0c46:	bf00      	nop
 80a0c48:	bf00      	nop
 80a0c4a:	bf00      	nop
 80a0c4c:	bf00      	nop
 80a0c4e:	bf00      	nop
 80a0c50:	bf00      	nop
 80a0c52:	bf00      	nop
 80a0c54:	bf00      	nop
 80a0c56:	bf00      	nop
 80a0c58:	bf00      	nop
 80a0c5a:	bf00      	nop
 80a0c5c:	bf00      	nop
 80a0c5e:	bf00      	nop
 80a0c60:	bf00      	nop
 80a0c62:	bf00      	nop
 80a0c64:	bf00      	nop
 80a0c66:	bf00      	nop
 80a0c68:	bf00      	nop
 80a0c6a:	bf00      	nop
 80a0c6c:	bf00      	nop
 80a0c6e:	bf00      	nop
 80a0c70:	bf00      	nop
 80a0c72:	bf00      	nop
 80a0c74:	bf00      	nop
 80a0c76:	bf00      	nop
 80a0c78:	bf00      	nop
 80a0c7a:	bf00      	nop
 80a0c7c:	bf00      	nop
 80a0c7e:	bf00      	nop
 80a0c80:	bf00      	nop
 80a0c82:	bf00      	nop
 80a0c84:	bf00      	nop
 80a0c86:	bf00      	nop
 80a0c88:	bf00      	nop
 80a0c8a:	bf00      	nop
 80a0c8c:	bf00      	nop
 80a0c8e:	bf00      	nop
 80a0c90:	bf00      	nop
 80a0c92:	bf00      	nop
 80a0c94:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a0c96:	79e3      	ldrb	r3, [r4, #7]
 80a0c98:	6810      	ldr	r0, [r2, #0]
 80a0c9a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0c9e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0ca2:	88bf      	ldrh	r7, [r7, #4]
 80a0ca4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0ca8:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0caa:	4600      	mov	r0, r0
 80a0cac:	bf00      	nop
 80a0cae:	bf00      	nop
 80a0cb0:	bf00      	nop
 80a0cb2:	bf00      	nop
 80a0cb4:	bf00      	nop
 80a0cb6:	bf00      	nop
 80a0cb8:	bf00      	nop
 80a0cba:	bf00      	nop
 80a0cbc:	bf00      	nop
 80a0cbe:	bf00      	nop
 80a0cc0:	bf00      	nop
 80a0cc2:	bf00      	nop
 80a0cc4:	bf00      	nop
 80a0cc6:	bf00      	nop
 80a0cc8:	bf00      	nop
 80a0cca:	bf00      	nop
 80a0ccc:	bf00      	nop
 80a0cce:	bf00      	nop
 80a0cd0:	bf00      	nop
 80a0cd2:	bf00      	nop
 80a0cd4:	bf00      	nop
 80a0cd6:	bf00      	nop
 80a0cd8:	bf00      	nop
 80a0cda:	bf00      	nop
 80a0cdc:	bf00      	nop
 80a0cde:	bf00      	nop
 80a0ce0:	bf00      	nop
 80a0ce2:	bf00      	nop
 80a0ce4:	bf00      	nop
 80a0ce6:	bf00      	nop
 80a0ce8:	bf00      	nop
 80a0cea:	bf00      	nop
 80a0cec:	bf00      	nop
 80a0cee:	bf00      	nop
 80a0cf0:	bf00      	nop
 80a0cf2:	bf00      	nop
 80a0cf4:	bf00      	nop
 80a0cf6:	bf00      	nop
 80a0cf8:	bf00      	nop
 80a0cfa:	bf00      	nop
 80a0cfc:	bf00      	nop
 80a0cfe:	bf00      	nop
 80a0d00:	bf00      	nop
 80a0d02:	bf00      	nop
 80a0d04:	bf00      	nop
 80a0d06:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0d08:	9b04      	ldr	r3, [sp, #16]
 80a0d0a:	085b      	lsrs	r3, r3, #1
 80a0d0c:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a0d0e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0d12:	3301      	adds	r3, #1
 80a0d14:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a0d16:	2b1f      	cmp	r3, #31
 80a0d18:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0d1c:	d87e      	bhi.n	80a0e1c <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a0d1e:	79e3      	ldrb	r3, [r4, #7]
 80a0d20:	6810      	ldr	r0, [r2, #0]
 80a0d22:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0d26:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0d2a:	88bf      	ldrh	r7, [r7, #4]
 80a0d2c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0d30:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0d32:	9803      	ldr	r0, [sp, #12]
 80a0d34:	9b04      	ldr	r3, [sp, #16]
 80a0d36:	4218      	tst	r0, r3
 80a0d38:	f47f af76 	bne.w	80a0c28 <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0d3c:	4600      	mov	r0, r0
 80a0d3e:	bf00      	nop
 80a0d40:	bf00      	nop
 80a0d42:	bf00      	nop
 80a0d44:	bf00      	nop
 80a0d46:	bf00      	nop
 80a0d48:	bf00      	nop
 80a0d4a:	bf00      	nop
 80a0d4c:	bf00      	nop
 80a0d4e:	bf00      	nop
 80a0d50:	bf00      	nop
 80a0d52:	bf00      	nop
 80a0d54:	bf00      	nop
 80a0d56:	bf00      	nop
 80a0d58:	bf00      	nop
 80a0d5a:	bf00      	nop
 80a0d5c:	bf00      	nop
 80a0d5e:	bf00      	nop
 80a0d60:	bf00      	nop
 80a0d62:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a0d64:	79e3      	ldrb	r3, [r4, #7]
 80a0d66:	6810      	ldr	r0, [r2, #0]
 80a0d68:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0d6c:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0d70:	88bf      	ldrh	r7, [r7, #4]
 80a0d72:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0d76:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0d78:	4600      	mov	r0, r0
 80a0d7a:	bf00      	nop
 80a0d7c:	bf00      	nop
 80a0d7e:	bf00      	nop
 80a0d80:	bf00      	nop
 80a0d82:	bf00      	nop
 80a0d84:	bf00      	nop
 80a0d86:	bf00      	nop
 80a0d88:	bf00      	nop
 80a0d8a:	bf00      	nop
 80a0d8c:	bf00      	nop
 80a0d8e:	bf00      	nop
 80a0d90:	bf00      	nop
 80a0d92:	bf00      	nop
 80a0d94:	bf00      	nop
 80a0d96:	bf00      	nop
 80a0d98:	bf00      	nop
 80a0d9a:	bf00      	nop
 80a0d9c:	bf00      	nop
 80a0d9e:	bf00      	nop
 80a0da0:	bf00      	nop
 80a0da2:	bf00      	nop
 80a0da4:	bf00      	nop
 80a0da6:	bf00      	nop
 80a0da8:	bf00      	nop
 80a0daa:	bf00      	nop
 80a0dac:	bf00      	nop
 80a0dae:	bf00      	nop
 80a0db0:	bf00      	nop
 80a0db2:	bf00      	nop
 80a0db4:	bf00      	nop
 80a0db6:	bf00      	nop
 80a0db8:	bf00      	nop
 80a0dba:	bf00      	nop
 80a0dbc:	bf00      	nop
 80a0dbe:	bf00      	nop
 80a0dc0:	bf00      	nop
 80a0dc2:	bf00      	nop
 80a0dc4:	bf00      	nop
 80a0dc6:	bf00      	nop
 80a0dc8:	bf00      	nop
 80a0dca:	bf00      	nop
 80a0dcc:	bf00      	nop
 80a0dce:	bf00      	nop
 80a0dd0:	bf00      	nop
 80a0dd2:	bf00      	nop
 80a0dd4:	bf00      	nop
 80a0dd6:	bf00      	nop
 80a0dd8:	bf00      	nop
 80a0dda:	bf00      	nop
 80a0ddc:	bf00      	nop
 80a0dde:	bf00      	nop
 80a0de0:	bf00      	nop
 80a0de2:	bf00      	nop
 80a0de4:	bf00      	nop
 80a0de6:	bf00      	nop
 80a0de8:	bf00      	nop
 80a0dea:	bf00      	nop
 80a0dec:	bf00      	nop
 80a0dee:	bf00      	nop
 80a0df0:	bf00      	nop
 80a0df2:	bf00      	nop
 80a0df4:	bf00      	nop
 80a0df6:	bf00      	nop
 80a0df8:	bf00      	nop
 80a0dfa:	bf00      	nop
 80a0dfc:	bf00      	nop
 80a0dfe:	bf00      	nop
 80a0e00:	bf00      	nop
 80a0e02:	bf00      	nop
 80a0e04:	bf00      	nop
 80a0e06:	bf00      	nop
 80a0e08:	bf00      	nop
 80a0e0a:	bf00      	nop
 80a0e0c:	bf00      	nop
 80a0e0e:	bf00      	nop
 80a0e10:	bf00      	nop
 80a0e12:	bf00      	nop
 80a0e14:	bf00      	nop
 80a0e16:	bf00      	nop
 80a0e18:	bf00      	nop
 80a0e1a:	e775      	b.n	80a0d08 <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a0e1c:	468e      	mov	lr, r1
 80a0e1e:	e6ca      	b.n	80a0bb6 <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a0e20:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a0e22:	2903      	cmp	r1, #3
 80a0e24:	f000 812e 	beq.w	80a1084 <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0e28:	4a1e      	ldr	r2, [pc, #120]	; (80a0ea4 <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0e2a:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0e2e:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0e30:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0e34:	b29b      	uxth	r3, r3
 80a0e36:	2b00      	cmp	r3, #0
 80a0e38:	f43f ae2e 	beq.w	80a0a98 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0e3c:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0e3e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0e42:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a0e44:	3b03      	subs	r3, #3
 80a0e46:	b29b      	uxth	r3, r3
 80a0e48:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0e4c:	f89e 3000 	ldrb.w	r3, [lr]
 80a0e50:	f10e 0103 	add.w	r1, lr, #3
 80a0e54:	b2db      	uxtb	r3, r3
 80a0e56:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0e5a:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0e5e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0e62:	b2db      	uxtb	r3, r3
 80a0e64:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a0e68:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0e6c:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a0e70:	b2db      	uxtb	r3, r3
 80a0e72:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0e76:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a0e7a:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0e7e:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0e82:	021b      	lsls	r3, r3, #8
 80a0e84:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0e88:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0e8c:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a0e90:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0e94:	433b      	orrs	r3, r7
 80a0e96:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0e98:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a0e9c:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a0ea0:	e07d      	b.n	80a0f9e <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a0ea2:	bf00      	nop
 80a0ea4:	200000b8 	.word	0x200000b8
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a0ea8:	9b04      	ldr	r3, [sp, #16]
 80a0eaa:	085b      	lsrs	r3, r3, #1
 80a0eac:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0eae:	4600      	mov	r0, r0
 80a0eb0:	bf00      	nop
 80a0eb2:	bf00      	nop
 80a0eb4:	bf00      	nop
 80a0eb6:	bf00      	nop
 80a0eb8:	bf00      	nop
 80a0eba:	bf00      	nop
 80a0ebc:	bf00      	nop
 80a0ebe:	bf00      	nop
 80a0ec0:	bf00      	nop
 80a0ec2:	bf00      	nop
 80a0ec4:	bf00      	nop
 80a0ec6:	bf00      	nop
 80a0ec8:	bf00      	nop
 80a0eca:	bf00      	nop
 80a0ecc:	bf00      	nop
 80a0ece:	bf00      	nop
 80a0ed0:	bf00      	nop
 80a0ed2:	bf00      	nop
 80a0ed4:	bf00      	nop
 80a0ed6:	bf00      	nop
 80a0ed8:	bf00      	nop
 80a0eda:	bf00      	nop
 80a0edc:	bf00      	nop
 80a0ede:	bf00      	nop
 80a0ee0:	bf00      	nop
 80a0ee2:	bf00      	nop
 80a0ee4:	bf00      	nop
 80a0ee6:	bf00      	nop
 80a0ee8:	bf00      	nop
 80a0eea:	bf00      	nop
 80a0eec:	bf00      	nop
 80a0eee:	bf00      	nop
 80a0ef0:	bf00      	nop
 80a0ef2:	bf00      	nop
 80a0ef4:	bf00      	nop
 80a0ef6:	bf00      	nop
 80a0ef8:	bf00      	nop
 80a0efa:	bf00      	nop
 80a0efc:	bf00      	nop
 80a0efe:	bf00      	nop
 80a0f00:	bf00      	nop
 80a0f02:	bf00      	nop
 80a0f04:	bf00      	nop
 80a0f06:	bf00      	nop
 80a0f08:	bf00      	nop
 80a0f0a:	bf00      	nop
 80a0f0c:	bf00      	nop
 80a0f0e:	bf00      	nop
 80a0f10:	bf00      	nop
 80a0f12:	bf00      	nop
 80a0f14:	bf00      	nop
 80a0f16:	bf00      	nop
 80a0f18:	bf00      	nop
 80a0f1a:	bf00      	nop
 80a0f1c:	bf00      	nop
 80a0f1e:	bf00      	nop
 80a0f20:	bf00      	nop
 80a0f22:	bf00      	nop
 80a0f24:	bf00      	nop
 80a0f26:	bf00      	nop
 80a0f28:	bf00      	nop
 80a0f2a:	bf00      	nop
 80a0f2c:	bf00      	nop
 80a0f2e:	bf00      	nop
 80a0f30:	bf00      	nop
 80a0f32:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a0f34:	79e0      	ldrb	r0, [r4, #7]
 80a0f36:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a0f38:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a0f3c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a0f40:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a0f44:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0f48:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a0f4c:	3301      	adds	r3, #1
 80a0f4e:	b2db      	uxtb	r3, r3
 80a0f50:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a0f54:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0f58:	4600      	mov	r0, r0
 80a0f5a:	bf00      	nop
 80a0f5c:	bf00      	nop
 80a0f5e:	bf00      	nop
 80a0f60:	bf00      	nop
 80a0f62:	bf00      	nop
 80a0f64:	bf00      	nop
 80a0f66:	bf00      	nop
 80a0f68:	bf00      	nop
 80a0f6a:	bf00      	nop
 80a0f6c:	bf00      	nop
 80a0f6e:	bf00      	nop
 80a0f70:	bf00      	nop
 80a0f72:	bf00      	nop
 80a0f74:	bf00      	nop
 80a0f76:	bf00      	nop
 80a0f78:	bf00      	nop
 80a0f7a:	bf00      	nop
 80a0f7c:	bf00      	nop
 80a0f7e:	bf00      	nop
 80a0f80:	bf00      	nop
          if(j==24) break;
 80a0f82:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0f86:	2b18      	cmp	r3, #24
 80a0f88:	d07a      	beq.n	80a1080 <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a0f8a:	79e3      	ldrb	r3, [r4, #7]
 80a0f8c:	6810      	ldr	r0, [r2, #0]
 80a0f8e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0f92:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0f96:	88bf      	ldrh	r7, [r7, #4]
 80a0f98:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0f9c:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a0f9e:	9803      	ldr	r0, [sp, #12]
 80a0fa0:	9b04      	ldr	r3, [sp, #16]
 80a0fa2:	4218      	tst	r0, r3
 80a0fa4:	d180      	bne.n	80a0ea8 <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a0fa6:	4600      	mov	r0, r0
 80a0fa8:	bf00      	nop
 80a0faa:	bf00      	nop
 80a0fac:	bf00      	nop
 80a0fae:	bf00      	nop
 80a0fb0:	bf00      	nop
 80a0fb2:	bf00      	nop
 80a0fb4:	bf00      	nop
 80a0fb6:	bf00      	nop
 80a0fb8:	bf00      	nop
 80a0fba:	bf00      	nop
 80a0fbc:	bf00      	nop
 80a0fbe:	bf00      	nop
 80a0fc0:	bf00      	nop
 80a0fc2:	bf00      	nop
 80a0fc4:	bf00      	nop
 80a0fc6:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a0fc8:	79e3      	ldrb	r3, [r4, #7]
 80a0fca:	6810      	ldr	r0, [r2, #0]
 80a0fcc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0fd0:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0fd4:	88bf      	ldrh	r7, [r7, #4]
 80a0fd6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0fda:	831f      	strh	r7, [r3, #24]
          j++;
 80a0fdc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0fe0:	3301      	adds	r3, #1
 80a0fe2:	b2db      	uxtb	r3, r3
 80a0fe4:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a0fe8:	9b04      	ldr	r3, [sp, #16]
 80a0fea:	085b      	lsrs	r3, r3, #1
 80a0fec:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0fee:	4600      	mov	r0, r0
 80a0ff0:	bf00      	nop
 80a0ff2:	bf00      	nop
 80a0ff4:	bf00      	nop
 80a0ff6:	bf00      	nop
 80a0ff8:	bf00      	nop
 80a0ffa:	bf00      	nop
 80a0ffc:	bf00      	nop
 80a0ffe:	bf00      	nop
 80a1000:	bf00      	nop
 80a1002:	bf00      	nop
 80a1004:	bf00      	nop
 80a1006:	bf00      	nop
 80a1008:	bf00      	nop
 80a100a:	bf00      	nop
 80a100c:	bf00      	nop
 80a100e:	bf00      	nop
 80a1010:	bf00      	nop
 80a1012:	bf00      	nop
 80a1014:	bf00      	nop
 80a1016:	bf00      	nop
 80a1018:	bf00      	nop
 80a101a:	bf00      	nop
 80a101c:	bf00      	nop
 80a101e:	bf00      	nop
 80a1020:	bf00      	nop
 80a1022:	bf00      	nop
 80a1024:	bf00      	nop
 80a1026:	bf00      	nop
 80a1028:	bf00      	nop
 80a102a:	bf00      	nop
 80a102c:	bf00      	nop
 80a102e:	bf00      	nop
 80a1030:	bf00      	nop
 80a1032:	bf00      	nop
 80a1034:	bf00      	nop
 80a1036:	bf00      	nop
 80a1038:	bf00      	nop
 80a103a:	bf00      	nop
 80a103c:	bf00      	nop
 80a103e:	bf00      	nop
 80a1040:	bf00      	nop
 80a1042:	bf00      	nop
 80a1044:	bf00      	nop
 80a1046:	bf00      	nop
 80a1048:	bf00      	nop
 80a104a:	bf00      	nop
 80a104c:	bf00      	nop
 80a104e:	bf00      	nop
 80a1050:	bf00      	nop
 80a1052:	bf00      	nop
 80a1054:	bf00      	nop
 80a1056:	bf00      	nop
 80a1058:	bf00      	nop
 80a105a:	bf00      	nop
 80a105c:	bf00      	nop
 80a105e:	bf00      	nop
 80a1060:	bf00      	nop
 80a1062:	bf00      	nop
 80a1064:	bf00      	nop
 80a1066:	bf00      	nop
 80a1068:	bf00      	nop
 80a106a:	bf00      	nop
 80a106c:	bf00      	nop
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
 80a1072:	bf00      	nop
 80a1074:	bf00      	nop
 80a1076:	bf00      	nop
          if(j==24) break;
 80a1078:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a107c:	2b18      	cmp	r3, #24
 80a107e:	d184      	bne.n	80a0f8a <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1080:	468e      	mov	lr, r1
 80a1082:	e6d5      	b.n	80a0e30 <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a1084:	4a17      	ldr	r2, [pc, #92]	; (80a10e4 <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a1086:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a108a:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a108c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1090:	b29b      	uxth	r3, r3
 80a1092:	2b00      	cmp	r3, #0
 80a1094:	f43f ad00 	beq.w	80a0a98 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1098:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a109a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a109e:	f10e 0103 	add.w	r1, lr, #3
 80a10a2:	3b03      	subs	r3, #3
 80a10a4:	b29b      	uxth	r3, r3
 80a10a6:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a10aa:	f89e 3000 	ldrb.w	r3, [lr]
 80a10ae:	b2db      	uxtb	r3, r3
 80a10b0:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a10b4:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a10b8:	b2db      	uxtb	r3, r3
 80a10ba:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a10be:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a10c2:	b2db      	uxtb	r3, r3
 80a10c4:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a10c8:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a10cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a10d0:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a10d4:	021b      	lsls	r3, r3, #8
 80a10d6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a10da:	4303      	orrs	r3, r0
 80a10dc:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a10de:	f88d 6005 	strb.w	r6, [sp, #5]
 80a10e2:	e0e0      	b.n	80a12a6 <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a10e4:	200000b8 	.word	0x200000b8
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a10e8:	4600      	mov	r0, r0
 80a10ea:	bf00      	nop
 80a10ec:	bf00      	nop
 80a10ee:	bf00      	nop
 80a10f0:	bf00      	nop
 80a10f2:	bf00      	nop
 80a10f4:	bf00      	nop
 80a10f6:	bf00      	nop
 80a10f8:	bf00      	nop
 80a10fa:	bf00      	nop
 80a10fc:	bf00      	nop
 80a10fe:	bf00      	nop
 80a1100:	bf00      	nop
 80a1102:	bf00      	nop
 80a1104:	bf00      	nop
 80a1106:	bf00      	nop
 80a1108:	bf00      	nop
 80a110a:	bf00      	nop
 80a110c:	bf00      	nop
 80a110e:	bf00      	nop
 80a1110:	bf00      	nop
 80a1112:	bf00      	nop
 80a1114:	bf00      	nop
 80a1116:	bf00      	nop
 80a1118:	bf00      	nop
 80a111a:	bf00      	nop
 80a111c:	bf00      	nop
 80a111e:	bf00      	nop
 80a1120:	bf00      	nop
 80a1122:	bf00      	nop
 80a1124:	bf00      	nop
 80a1126:	bf00      	nop
 80a1128:	bf00      	nop
 80a112a:	bf00      	nop
 80a112c:	bf00      	nop
 80a112e:	bf00      	nop
 80a1130:	bf00      	nop
 80a1132:	bf00      	nop
 80a1134:	bf00      	nop
 80a1136:	bf00      	nop
 80a1138:	bf00      	nop
 80a113a:	bf00      	nop
 80a113c:	bf00      	nop
 80a113e:	bf00      	nop
 80a1140:	bf00      	nop
 80a1142:	bf00      	nop
 80a1144:	bf00      	nop
 80a1146:	bf00      	nop
 80a1148:	bf00      	nop
 80a114a:	bf00      	nop
 80a114c:	bf00      	nop
 80a114e:	bf00      	nop
 80a1150:	bf00      	nop
 80a1152:	bf00      	nop
 80a1154:	bf00      	nop
 80a1156:	bf00      	nop
 80a1158:	bf00      	nop
 80a115a:	bf00      	nop
 80a115c:	bf00      	nop
 80a115e:	bf00      	nop
 80a1160:	bf00      	nop
 80a1162:	bf00      	nop
 80a1164:	bf00      	nop
 80a1166:	bf00      	nop
 80a1168:	bf00      	nop
 80a116a:	bf00      	nop
 80a116c:	bf00      	nop
 80a116e:	bf00      	nop
 80a1170:	bf00      	nop
 80a1172:	bf00      	nop
 80a1174:	bf00      	nop
 80a1176:	bf00      	nop
 80a1178:	bf00      	nop
 80a117a:	bf00      	nop
 80a117c:	bf00      	nop
 80a117e:	bf00      	nop
 80a1180:	bf00      	nop
 80a1182:	bf00      	nop
 80a1184:	bf00      	nop
 80a1186:	bf00      	nop
 80a1188:	bf00      	nop
 80a118a:	bf00      	nop
 80a118c:	bf00      	nop
 80a118e:	bf00      	nop
 80a1190:	bf00      	nop
 80a1192:	bf00      	nop
 80a1194:	bf00      	nop
 80a1196:	bf00      	nop
 80a1198:	bf00      	nop
 80a119a:	bf00      	nop
 80a119c:	bf00      	nop
 80a119e:	bf00      	nop
 80a11a0:	bf00      	nop
 80a11a2:	bf00      	nop
 80a11a4:	bf00      	nop
 80a11a6:	bf00      	nop
 80a11a8:	bf00      	nop
 80a11aa:	bf00      	nop
 80a11ac:	bf00      	nop
 80a11ae:	bf00      	nop
 80a11b0:	bf00      	nop
 80a11b2:	bf00      	nop
 80a11b4:	bf00      	nop
 80a11b6:	bf00      	nop
 80a11b8:	bf00      	nop
 80a11ba:	bf00      	nop
 80a11bc:	bf00      	nop
 80a11be:	bf00      	nop
 80a11c0:	bf00      	nop
 80a11c2:	bf00      	nop
 80a11c4:	bf00      	nop
 80a11c6:	bf00      	nop
 80a11c8:	bf00      	nop
 80a11ca:	bf00      	nop
 80a11cc:	bf00      	nop
 80a11ce:	bf00      	nop
 80a11d0:	bf00      	nop
 80a11d2:	bf00      	nop
 80a11d4:	bf00      	nop
 80a11d6:	bf00      	nop
 80a11d8:	bf00      	nop
 80a11da:	bf00      	nop
 80a11dc:	bf00      	nop
 80a11de:	bf00      	nop
 80a11e0:	bf00      	nop
 80a11e2:	bf00      	nop
 80a11e4:	bf00      	nop
 80a11e6:	bf00      	nop
 80a11e8:	bf00      	nop
 80a11ea:	bf00      	nop
 80a11ec:	bf00      	nop
 80a11ee:	bf00      	nop
 80a11f0:	bf00      	nop
 80a11f2:	bf00      	nop
 80a11f4:	bf00      	nop
 80a11f6:	bf00      	nop
 80a11f8:	bf00      	nop
 80a11fa:	bf00      	nop
 80a11fc:	bf00      	nop
 80a11fe:	bf00      	nop
 80a1200:	bf00      	nop
 80a1202:	bf00      	nop
 80a1204:	bf00      	nop
 80a1206:	bf00      	nop
 80a1208:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a120a:	79e3      	ldrb	r3, [r4, #7]
 80a120c:	6810      	ldr	r0, [r2, #0]
 80a120e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1212:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1216:	88bf      	ldrh	r7, [r7, #4]
 80a1218:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a121c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a121e:	4600      	mov	r0, r0
 80a1220:	bf00      	nop
 80a1222:	bf00      	nop
 80a1224:	bf00      	nop
 80a1226:	bf00      	nop
 80a1228:	bf00      	nop
 80a122a:	bf00      	nop
 80a122c:	bf00      	nop
 80a122e:	bf00      	nop
 80a1230:	bf00      	nop
 80a1232:	bf00      	nop
 80a1234:	bf00      	nop
 80a1236:	bf00      	nop
 80a1238:	bf00      	nop
 80a123a:	bf00      	nop
 80a123c:	bf00      	nop
 80a123e:	bf00      	nop
 80a1240:	bf00      	nop
 80a1242:	bf00      	nop
 80a1244:	bf00      	nop
 80a1246:	bf00      	nop
 80a1248:	bf00      	nop
 80a124a:	bf00      	nop
 80a124c:	bf00      	nop
 80a124e:	bf00      	nop
 80a1250:	bf00      	nop
 80a1252:	bf00      	nop
 80a1254:	bf00      	nop
 80a1256:	bf00      	nop
 80a1258:	bf00      	nop
 80a125a:	bf00      	nop
 80a125c:	bf00      	nop
 80a125e:	bf00      	nop
 80a1260:	bf00      	nop
 80a1262:	bf00      	nop
 80a1264:	bf00      	nop
 80a1266:	bf00      	nop
 80a1268:	bf00      	nop
 80a126a:	bf00      	nop
 80a126c:	bf00      	nop
 80a126e:	bf00      	nop
 80a1270:	bf00      	nop
 80a1272:	bf00      	nop
 80a1274:	bf00      	nop
 80a1276:	bf00      	nop
 80a1278:	bf00      	nop
 80a127a:	bf00      	nop
 80a127c:	bf00      	nop
 80a127e:	bf00      	nop
 80a1280:	bf00      	nop
 80a1282:	bf00      	nop
 80a1284:	bf00      	nop
 80a1286:	bf00      	nop
 80a1288:	bf00      	nop
 80a128a:	bf00      	nop
 80a128c:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a128e:	9b04      	ldr	r3, [sp, #16]
 80a1290:	085b      	lsrs	r3, r3, #1
 80a1292:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1294:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1298:	3301      	adds	r3, #1
 80a129a:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a129c:	2b17      	cmp	r3, #23
 80a129e:	f88d 3005 	strb.w	r3, [sp, #5]
 80a12a2:	f200 80e3 	bhi.w	80a146c <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a12a6:	79e3      	ldrb	r3, [r4, #7]
 80a12a8:	6810      	ldr	r0, [r2, #0]
 80a12aa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a12ae:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a12b2:	88bf      	ldrh	r7, [r7, #4]
 80a12b4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a12b8:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a12ba:	9803      	ldr	r0, [sp, #12]
 80a12bc:	9b04      	ldr	r3, [sp, #16]
 80a12be:	4218      	tst	r0, r3
 80a12c0:	f47f af12 	bne.w	80a10e8 <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a12c4:	4600      	mov	r0, r0
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
 80a12cc:	bf00      	nop
 80a12ce:	bf00      	nop
 80a12d0:	bf00      	nop
 80a12d2:	bf00      	nop
 80a12d4:	bf00      	nop
 80a12d6:	bf00      	nop
 80a12d8:	bf00      	nop
 80a12da:	bf00      	nop
 80a12dc:	bf00      	nop
 80a12de:	bf00      	nop
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
 80a12fa:	bf00      	nop
 80a12fc:	bf00      	nop
 80a12fe:	bf00      	nop
 80a1300:	bf00      	nop
 80a1302:	bf00      	nop
 80a1304:	bf00      	nop
 80a1306:	bf00      	nop
 80a1308:	bf00      	nop
 80a130a:	bf00      	nop
 80a130c:	bf00      	nop
 80a130e:	bf00      	nop
 80a1310:	bf00      	nop
 80a1312:	bf00      	nop
 80a1314:	bf00      	nop
 80a1316:	bf00      	nop
 80a1318:	bf00      	nop
 80a131a:	bf00      	nop
 80a131c:	bf00      	nop
 80a131e:	bf00      	nop
 80a1320:	bf00      	nop
 80a1322:	bf00      	nop
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
 80a1328:	bf00      	nop
 80a132a:	bf00      	nop
 80a132c:	bf00      	nop
 80a132e:	bf00      	nop
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
 80a1338:	bf00      	nop
 80a133a:	bf00      	nop
 80a133c:	bf00      	nop
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	bf00      	nop
 80a1344:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a1346:	79e3      	ldrb	r3, [r4, #7]
 80a1348:	6810      	ldr	r0, [r2, #0]
 80a134a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a134e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1352:	88bf      	ldrh	r7, [r7, #4]
 80a1354:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1358:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a135a:	4600      	mov	r0, r0
 80a135c:	bf00      	nop
 80a135e:	bf00      	nop
 80a1360:	bf00      	nop
 80a1362:	bf00      	nop
 80a1364:	bf00      	nop
 80a1366:	bf00      	nop
 80a1368:	bf00      	nop
 80a136a:	bf00      	nop
 80a136c:	bf00      	nop
 80a136e:	bf00      	nop
 80a1370:	bf00      	nop
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
 80a1376:	bf00      	nop
 80a1378:	bf00      	nop
 80a137a:	bf00      	nop
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
 80a1382:	bf00      	nop
 80a1384:	bf00      	nop
 80a1386:	bf00      	nop
 80a1388:	bf00      	nop
 80a138a:	bf00      	nop
 80a138c:	bf00      	nop
 80a138e:	bf00      	nop
 80a1390:	bf00      	nop
 80a1392:	bf00      	nop
 80a1394:	bf00      	nop
 80a1396:	bf00      	nop
 80a1398:	bf00      	nop
 80a139a:	bf00      	nop
 80a139c:	bf00      	nop
 80a139e:	bf00      	nop
 80a13a0:	bf00      	nop
 80a13a2:	bf00      	nop
 80a13a4:	bf00      	nop
 80a13a6:	bf00      	nop
 80a13a8:	bf00      	nop
 80a13aa:	bf00      	nop
 80a13ac:	bf00      	nop
 80a13ae:	bf00      	nop
 80a13b0:	bf00      	nop
 80a13b2:	bf00      	nop
 80a13b4:	bf00      	nop
 80a13b6:	bf00      	nop
 80a13b8:	bf00      	nop
 80a13ba:	bf00      	nop
 80a13bc:	bf00      	nop
 80a13be:	bf00      	nop
 80a13c0:	bf00      	nop
 80a13c2:	bf00      	nop
 80a13c4:	bf00      	nop
 80a13c6:	bf00      	nop
 80a13c8:	bf00      	nop
 80a13ca:	bf00      	nop
 80a13cc:	bf00      	nop
 80a13ce:	bf00      	nop
 80a13d0:	bf00      	nop
 80a13d2:	bf00      	nop
 80a13d4:	bf00      	nop
 80a13d6:	bf00      	nop
 80a13d8:	bf00      	nop
 80a13da:	bf00      	nop
 80a13dc:	bf00      	nop
 80a13de:	bf00      	nop
 80a13e0:	bf00      	nop
 80a13e2:	bf00      	nop
 80a13e4:	bf00      	nop
 80a13e6:	bf00      	nop
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	bf00      	nop
 80a13f0:	bf00      	nop
 80a13f2:	bf00      	nop
 80a13f4:	bf00      	nop
 80a13f6:	bf00      	nop
 80a13f8:	bf00      	nop
 80a13fa:	bf00      	nop
 80a13fc:	bf00      	nop
 80a13fe:	bf00      	nop
 80a1400:	bf00      	nop
 80a1402:	bf00      	nop
 80a1404:	bf00      	nop
 80a1406:	bf00      	nop
 80a1408:	bf00      	nop
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	bf00      	nop
 80a1436:	bf00      	nop
 80a1438:	bf00      	nop
 80a143a:	bf00      	nop
 80a143c:	bf00      	nop
 80a143e:	bf00      	nop
 80a1440:	bf00      	nop
 80a1442:	bf00      	nop
 80a1444:	bf00      	nop
 80a1446:	bf00      	nop
 80a1448:	bf00      	nop
 80a144a:	bf00      	nop
 80a144c:	bf00      	nop
 80a144e:	bf00      	nop
 80a1450:	bf00      	nop
 80a1452:	bf00      	nop
 80a1454:	bf00      	nop
 80a1456:	bf00      	nop
 80a1458:	bf00      	nop
 80a145a:	bf00      	nop
 80a145c:	bf00      	nop
 80a145e:	bf00      	nop
 80a1460:	bf00      	nop
 80a1462:	bf00      	nop
 80a1464:	bf00      	nop
 80a1466:	bf00      	nop
 80a1468:	bf00      	nop
 80a146a:	e710      	b.n	80a128e <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a146c:	468e      	mov	lr, r1
 80a146e:	e60d      	b.n	80a108c <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a1470 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a1470:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a1472:	8844      	ldrh	r4, [r0, #2]
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a1474:	f89d 5014 	ldrb.w	r5, [sp, #20]
  if(n < numLEDs) {
 80a1478:	428c      	cmp	r4, r1
 80a147a:	d927      	bls.n	80a14cc <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x5c>
    if(brightness) { // See notes in setBrightness()
 80a147c:	7a04      	ldrb	r4, [r0, #8]
 80a147e:	b144      	cbz	r4, 80a1492 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x22>
      r = (r * brightness) >> 8;
 80a1480:	4362      	muls	r2, r4
      g = (g * brightness) >> 8;
 80a1482:	4363      	muls	r3, r4
      b = (b * brightness) >> 8;
 80a1484:	436c      	muls	r4, r5
// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a1486:	f3c2 2207 	ubfx	r2, r2, #8, #8
      g = (g * brightness) >> 8;
 80a148a:	f3c3 2307 	ubfx	r3, r3, #8, #8
      b = (b * brightness) >> 8;
 80a148e:	f3c4 2507 	ubfx	r5, r4, #8, #8
    }
    uint8_t *p = &pixels[n * 3];
    switch(type) {
 80a1492:	7987      	ldrb	r7, [r0, #6]
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p = &pixels[n * 3];
 80a1494:	68c6      	ldr	r6, [r0, #12]
 80a1496:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a149a:	2f08      	cmp	r7, #8
 80a149c:	eb06 0401 	add.w	r4, r6, r1
 80a14a0:	d811      	bhi.n	80a14c6 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
 80a14a2:	2001      	movs	r0, #1
 80a14a4:	40b8      	lsls	r0, r7
 80a14a6:	f410 7fd2 	tst.w	r0, #420	; 0x1a4
 80a14aa:	d108      	bne.n	80a14be <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x4e>
 80a14ac:	06c0      	lsls	r0, r0, #27
 80a14ae:	d50a      	bpl.n	80a14c6 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a14b0:	2aff      	cmp	r2, #255	; 0xff
 80a14b2:	bf08      	it	eq
 80a14b4:	22fe      	moveq	r2, #254	; 0xfe
          *p++ = r;
 80a14b6:	5472      	strb	r2, [r6, r1]
          *p++ = b;
 80a14b8:	7065      	strb	r5, [r4, #1]
          *p = g;
 80a14ba:	70a3      	strb	r3, [r4, #2]
 80a14bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a14be:	5473      	strb	r3, [r6, r1]
          *p++ = r;
 80a14c0:	7062      	strb	r2, [r4, #1]
          *p = b;
 80a14c2:	70a5      	strb	r5, [r4, #2]
 80a14c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p = g;
        } break;
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a14c6:	5472      	strb	r2, [r6, r1]
          *p++ = g;
 80a14c8:	7063      	strb	r3, [r4, #1]
          *p = b;
 80a14ca:	70a5      	strb	r5, [r4, #2]
 80a14cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a14ce <_ZNK17Adafruit_NeoPixel9numPixelsEv>:
 80a14ce:	8840      	ldrh	r0, [r0, #2]
 80a14d0:	4770      	bx	lr
	...

080a14d4 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a14d4:	b508      	push	{r3, lr}
 80a14d6:	f000 f9b9 	bl	80a184c <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a14da:	f000 f9b7 	bl	80a184c <HAL_Pin_Map>
 80a14de:	4b01      	ldr	r3, [pc, #4]	; (80a14e4 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a14e0:	6018      	str	r0, [r3, #0]
 80a14e2:	bd08      	pop	{r3, pc}
 80a14e4:	200000b8 	.word	0x200000b8

080a14e8 <_Z8ReadAxisii>:

//
// Read "sampleSize" samples and report the average
//
int ReadAxis(int axisPin, int sampleSize)
{
 80a14e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    long reading = 0;
    analogRead(axisPin);
 80a14ea:	b287      	uxth	r7, r0
 80a14ec:	4638      	mov	r0, r7

//
// Read "sampleSize" samples and report the average
//
int ReadAxis(int axisPin, int sampleSize)
{
 80a14ee:	460e      	mov	r6, r1
    long reading = 0;
    analogRead(axisPin);
    delay(1);
    for (int i = 0; i < sampleSize; i++)
 80a14f0:	2400      	movs	r4, #0
// Read "sampleSize" samples and report the average
//
int ReadAxis(int axisPin, int sampleSize)
{
    long reading = 0;
    analogRead(axisPin);
 80a14f2:	f001 f891 	bl	80a2618 <analogRead>
    delay(1);
 80a14f6:	2001      	movs	r0, #1
 80a14f8:	f000 fb3a 	bl	80a1b70 <delay>
//
// Read "sampleSize" samples and report the average
//
int ReadAxis(int axisPin, int sampleSize)
{
    long reading = 0;
 80a14fc:	4625      	mov	r5, r4
    analogRead(axisPin);
    delay(1);
    for (int i = 0; i < sampleSize; i++)
 80a14fe:	42b4      	cmp	r4, r6
 80a1500:	da05      	bge.n	80a150e <_Z8ReadAxisii+0x26>
    {
        reading += analogRead(axisPin);
 80a1502:	4638      	mov	r0, r7
 80a1504:	f001 f888 	bl	80a2618 <analogRead>
int ReadAxis(int axisPin, int sampleSize)
{
    long reading = 0;
    analogRead(axisPin);
    delay(1);
    for (int i = 0; i < sampleSize; i++)
 80a1508:	3401      	adds	r4, #1
    {
        reading += analogRead(axisPin);
 80a150a:	4405      	add	r5, r0
int ReadAxis(int axisPin, int sampleSize)
{
    long reading = 0;
    analogRead(axisPin);
    delay(1);
    for (int i = 0; i < sampleSize; i++)
 80a150c:	e7f7      	b.n	80a14fe <_Z8ReadAxisii+0x16>
    {
        reading += analogRead(axisPin);
    }
    return reading / sampleSize;
}
 80a150e:	fb95 f0f6 	sdiv	r0, r5, r6
 80a1512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1514 <_Z13AutoCalibratev>:

//
// Find the extreme raw readings from each axis
//
void AutoCalibrate()
{
 80a1514:	b538      	push	{r3, r4, r5, lr}
    Serial.println("Calibrate");
 80a1516:	f000 febf 	bl	80a2298 <_Z16_fetch_usbserialv>
 80a151a:	4918      	ldr	r1, [pc, #96]	; (80a157c <_Z13AutoCalibratev+0x68>)
 80a151c:	f000 fc81 	bl	80a1e22 <_ZN5Print7printlnEPKc>
    int xRaw = ReadAxis(xInput, 1);
 80a1520:	2101      	movs	r1, #1
 80a1522:	200d      	movs	r0, #13
 80a1524:	f7ff ffe0 	bl	80a14e8 <_Z8ReadAxisii>
    int yRaw = ReadAxis(yInput, 1);
 80a1528:	2101      	movs	r1, #1
// Find the extreme raw readings from each axis
//
void AutoCalibrate()
{
    Serial.println("Calibrate");
    int xRaw = ReadAxis(xInput, 1);
 80a152a:	4605      	mov	r5, r0
    int yRaw = ReadAxis(yInput, 1);
 80a152c:	200e      	movs	r0, #14
 80a152e:	f7ff ffdb 	bl	80a14e8 <_Z8ReadAxisii>
 80a1532:	4604      	mov	r4, r0
    int zRaw = ReadAxis(zInput, 1);
 80a1534:	2101      	movs	r1, #1
 80a1536:	200f      	movs	r0, #15
 80a1538:	f7ff ffd6 	bl	80a14e8 <_Z8ReadAxisii>

    if (xRaw < xRawMin)
 80a153c:	4b10      	ldr	r3, [pc, #64]	; (80a1580 <_Z13AutoCalibratev+0x6c>)
 80a153e:	681a      	ldr	r2, [r3, #0]
 80a1540:	4295      	cmp	r5, r2
    {
        xRawMin = xRaw;
 80a1542:	bfb8      	it	lt
 80a1544:	601d      	strlt	r5, [r3, #0]
    }
    if (xRaw > xRawMax)
 80a1546:	4b0f      	ldr	r3, [pc, #60]	; (80a1584 <_Z13AutoCalibratev+0x70>)
 80a1548:	681a      	ldr	r2, [r3, #0]
 80a154a:	4295      	cmp	r5, r2
    {
        xRawMax = xRaw;
 80a154c:	bfc8      	it	gt
 80a154e:	601d      	strgt	r5, [r3, #0]
    }

    if (yRaw < yRawMin)
 80a1550:	4b0d      	ldr	r3, [pc, #52]	; (80a1588 <_Z13AutoCalibratev+0x74>)
 80a1552:	681a      	ldr	r2, [r3, #0]
 80a1554:	4294      	cmp	r4, r2
    {
        yRawMin = yRaw;
 80a1556:	bfb8      	it	lt
 80a1558:	601c      	strlt	r4, [r3, #0]
    }
    if (yRaw > yRawMax)
 80a155a:	4b0c      	ldr	r3, [pc, #48]	; (80a158c <_Z13AutoCalibratev+0x78>)
 80a155c:	681a      	ldr	r2, [r3, #0]
 80a155e:	4294      	cmp	r4, r2
    {
        yRawMax = yRaw;
 80a1560:	bfc8      	it	gt
 80a1562:	601c      	strgt	r4, [r3, #0]
    }

    if (zRaw < zRawMin)
 80a1564:	4b0a      	ldr	r3, [pc, #40]	; (80a1590 <_Z13AutoCalibratev+0x7c>)
 80a1566:	681a      	ldr	r2, [r3, #0]
 80a1568:	4290      	cmp	r0, r2
    {
        zRawMin = zRaw;
 80a156a:	bfb8      	it	lt
 80a156c:	6018      	strlt	r0, [r3, #0]
    }
    if (zRaw > zRawMax)
 80a156e:	4b09      	ldr	r3, [pc, #36]	; (80a1594 <_Z13AutoCalibratev+0x80>)
 80a1570:	681a      	ldr	r2, [r3, #0]
 80a1572:	4290      	cmp	r0, r2
    {
        zRawMax = zRaw;
 80a1574:	bfc8      	it	gt
 80a1576:	6018      	strgt	r0, [r3, #0]
 80a1578:	bd38      	pop	{r3, r4, r5, pc}
 80a157a:	bf00      	nop
 80a157c:	080a384c 	.word	0x080a384c
 80a1580:	20000020 	.word	0x20000020
 80a1584:	20000024 	.word	0x20000024
 80a1588:	20000010 	.word	0x20000010
 80a158c:	20000014 	.word	0x20000014
 80a1590:	20000018 	.word	0x20000018
 80a1594:	2000001c 	.word	0x2000001c

080a1598 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
 80a1598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a159c:	4607      	mov	r7, r0
 80a159e:	460c      	mov	r4, r1
{
    if (base == 0) {
 80a15a0:	4615      	mov	r5, r2
 80a15a2:	b92a      	cbnz	r2, 80a15b0 <_ZN5Print5printIiLi0EEEjT_i+0x18>
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
 80a15a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
 80a15a8:	6803      	ldr	r3, [r0, #0]
 80a15aa:	b2c9      	uxtb	r1, r1
 80a15ac:	689b      	ldr	r3, [r3, #8]
 80a15ae:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 80a15b0:	2900      	cmp	r1, #0
 80a15b2:	da07      	bge.n	80a15c4 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
 80a15b4:	2a0a      	cmp	r2, #10
 80a15b6:	d105      	bne.n	80a15c4 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
 80a15b8:	212d      	movs	r1, #45	; 0x2d
 80a15ba:	f000 fc23 	bl	80a1e04 <_ZN5Print5printEc>
            val = -n;
 80a15be:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
 80a15c0:	4606      	mov	r6, r0
            val = -n;
 80a15c2:	e001      	b.n	80a15c8 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
 80a15c4:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
 80a15c6:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a15c8:	b2ea      	uxtb	r2, r5
 80a15ca:	4638      	mov	r0, r7
 80a15cc:	f000 fc33 	bl	80a1e36 <_ZN5Print11printNumberEmh>
    }
}
 80a15d0:	4430      	add	r0, r6
 80a15d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a15d8 <_Z6setXYZPf>:

// Take multiple samples to reduce noise
const int sampleSize = 20;

void setXYZ(float xyz[])
{
 80a15d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a15dc:	4604      	mov	r4, r0
    int xRaw = ReadAxis(xInput, sampleSize);
 80a15de:	2114      	movs	r1, #20
 80a15e0:	200d      	movs	r0, #13
 80a15e2:	f7ff ff81 	bl	80a14e8 <_Z8ReadAxisii>
    int yRaw = ReadAxis(yInput, sampleSize);
 80a15e6:	2114      	movs	r1, #20
// Take multiple samples to reduce noise
const int sampleSize = 20;

void setXYZ(float xyz[])
{
    int xRaw = ReadAxis(xInput, sampleSize);
 80a15e8:	4681      	mov	r9, r0
    int yRaw = ReadAxis(yInput, sampleSize);
 80a15ea:	200e      	movs	r0, #14
 80a15ec:	f7ff ff7c 	bl	80a14e8 <_Z8ReadAxisii>
    int zRaw = ReadAxis(zInput, sampleSize);
 80a15f0:	2114      	movs	r1, #20
const int sampleSize = 20;

void setXYZ(float xyz[])
{
    int xRaw = ReadAxis(xInput, sampleSize);
    int yRaw = ReadAxis(yInput, sampleSize);
 80a15f2:	4680      	mov	r8, r0
    int zRaw = ReadAxis(zInput, sampleSize);
 80a15f4:	200f      	movs	r0, #15
 80a15f6:	f7ff ff77 	bl	80a14e8 <_Z8ReadAxisii>
 80a15fa:	4607      	mov	r7, r0

    Serial.print("Raw Ranges: X: ");
    Serial.print(xRawMin);
 80a15fc:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 80a17e8 <_Z6setXYZPf+0x210>
{
    int xRaw = ReadAxis(xInput, sampleSize);
    int yRaw = ReadAxis(yInput, sampleSize);
    int zRaw = ReadAxis(zInput, sampleSize);

    Serial.print("Raw Ranges: X: ");
 80a1600:	f000 fe4a 	bl	80a2298 <_Z16_fetch_usbserialv>
    Serial.print(xRawMin);
    Serial.print("-");
 80a1604:	4d6b      	ldr	r5, [pc, #428]	; (80a17b4 <_Z6setXYZPf+0x1dc>)
{
    int xRaw = ReadAxis(xInput, sampleSize);
    int yRaw = ReadAxis(yInput, sampleSize);
    int zRaw = ReadAxis(zInput, sampleSize);

    Serial.print("Raw Ranges: X: ");
 80a1606:	496c      	ldr	r1, [pc, #432]	; (80a17b8 <_Z6setXYZPf+0x1e0>)
 80a1608:	f000 fbf8 	bl	80a1dfc <_ZN5Print5printEPKc>
    Serial.print(xRawMin);
    Serial.print("-");
    Serial.print(xRawMax);
 80a160c:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 80a17ec <_Z6setXYZPf+0x214>
    int xRaw = ReadAxis(xInput, sampleSize);
    int yRaw = ReadAxis(yInput, sampleSize);
    int zRaw = ReadAxis(zInput, sampleSize);

    Serial.print("Raw Ranges: X: ");
    Serial.print(xRawMin);
 80a1610:	f000 fe42 	bl	80a2298 <_Z16_fetch_usbserialv>
 80a1614:	220a      	movs	r2, #10
 80a1616:	f8da 1000 	ldr.w	r1, [sl]
 80a161a:	f7ff ffbd 	bl	80a1598 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.print("-");
 80a161e:	f000 fe3b 	bl	80a2298 <_Z16_fetch_usbserialv>
 80a1622:	4629      	mov	r1, r5
 80a1624:	f000 fbea 	bl	80a1dfc <_ZN5Print5printEPKc>
    Serial.print(xRawMax);
 80a1628:	f000 fe36 	bl	80a2298 <_Z16_fetch_usbserialv>
 80a162c:	220a      	movs	r2, #10
 80a162e:	f8db 1000 	ldr.w	r1, [fp]
 80a1632:	f7ff ffb1 	bl	80a1598 <_ZN5Print5printIiLi0EEEjT_i>

    Serial.print(", Y: ");
 80a1636:	f000 fe2f 	bl	80a2298 <_Z16_fetch_usbserialv>
 80a163a:	4960      	ldr	r1, [pc, #384]	; (80a17bc <_Z6setXYZPf+0x1e4>)
 80a163c:	f000 fbde 	bl	80a1dfc <_ZN5Print5printEPKc>
    Serial.print(yRawMin);
 80a1640:	f000 fe2a 	bl	80a2298 <_Z16_fetch_usbserialv>
 80a1644:	4b5e      	ldr	r3, [pc, #376]	; (80a17c0 <_Z6setXYZPf+0x1e8>)
 80a1646:	220a      	movs	r2, #10
 80a1648:	6819      	ldr	r1, [r3, #0]
 80a164a:	f7ff ffa5 	bl	80a1598 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.print("-");
 80a164e:	f000 fe23 	bl	80a2298 <_Z16_fetch_usbserialv>
 80a1652:	4629      	mov	r1, r5
 80a1654:	f000 fbd2 	bl	80a1dfc <_ZN5Print5printEPKc>
    Serial.print(yRawMax);
 80a1658:	f000 fe1e 	bl	80a2298 <_Z16_fetch_usbserialv>
 80a165c:	4b59      	ldr	r3, [pc, #356]	; (80a17c4 <_Z6setXYZPf+0x1ec>)
 80a165e:	220a      	movs	r2, #10
 80a1660:	6819      	ldr	r1, [r3, #0]
 80a1662:	f7ff ff99 	bl	80a1598 <_ZN5Print5printIiLi0EEEjT_i>

    Serial.print(", Z: ");
 80a1666:	f000 fe17 	bl	80a2298 <_Z16_fetch_usbserialv>
 80a166a:	4957      	ldr	r1, [pc, #348]	; (80a17c8 <_Z6setXYZPf+0x1f0>)
 80a166c:	f000 fbc6 	bl	80a1dfc <_ZN5Print5printEPKc>
    Serial.print(zRawMin);
 80a1670:	f000 fe12 	bl	80a2298 <_Z16_fetch_usbserialv>
 80a1674:	4b55      	ldr	r3, [pc, #340]	; (80a17cc <_Z6setXYZPf+0x1f4>)
 80a1676:	220a      	movs	r2, #10
 80a1678:	6819      	ldr	r1, [r3, #0]
 80a167a:	f7ff ff8d 	bl	80a1598 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.print("-");
 80a167e:	f000 fe0b 	bl	80a2298 <_Z16_fetch_usbserialv>
 80a1682:	4629      	mov	r1, r5
 80a1684:	f000 fbba 	bl	80a1dfc <_ZN5Print5printEPKc>
    Serial.print(zRawMax);
 80a1688:	f000 fe06 	bl	80a2298 <_Z16_fetch_usbserialv>
 80a168c:	4b50      	ldr	r3, [pc, #320]	; (80a17d0 <_Z6setXYZPf+0x1f8>)
 80a168e:	220a      	movs	r2, #10
 80a1690:	6819      	ldr	r1, [r3, #0]
 80a1692:	f7ff ff81 	bl	80a1598 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println();
    Serial.print(xRaw);
    Serial.print(", ");
 80a1696:	4d4f      	ldr	r5, [pc, #316]	; (80a17d4 <_Z6setXYZPf+0x1fc>)

    Serial.print(", Z: ");
    Serial.print(zRawMin);
    Serial.print("-");
    Serial.print(zRawMax);
    Serial.println();
 80a1698:	f000 fdfe 	bl	80a2298 <_Z16_fetch_usbserialv>
 80a169c:	f000 fbb5 	bl	80a1e0a <_ZN5Print7printlnEv>
    Serial.print(xRaw);
 80a16a0:	f000 fdfa 	bl	80a2298 <_Z16_fetch_usbserialv>
 80a16a4:	220a      	movs	r2, #10
 80a16a6:	4649      	mov	r1, r9
 80a16a8:	f7ff ff76 	bl	80a1598 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.print(", ");
 80a16ac:	f000 fdf4 	bl	80a2298 <_Z16_fetch_usbserialv>
 80a16b0:	4629      	mov	r1, r5
 80a16b2:	f000 fba3 	bl	80a1dfc <_ZN5Print5printEPKc>
    Serial.print(yRaw);
 80a16b6:	f000 fdef 	bl	80a2298 <_Z16_fetch_usbserialv>
 80a16ba:	220a      	movs	r2, #10
 80a16bc:	4641      	mov	r1, r8
 80a16be:	f7ff ff6b 	bl	80a1598 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.print(", ");
 80a16c2:	f000 fde9 	bl	80a2298 <_Z16_fetch_usbserialv>
 80a16c6:	4629      	mov	r1, r5
    Serial.print(zRaw);

    // Convert raw values to 'milli-Gs"
    long xScaled = map(xRaw, xRawMin, xRawMax, -1000, 1000);
 80a16c8:	4d43      	ldr	r5, [pc, #268]	; (80a17d8 <_Z6setXYZPf+0x200>)
    Serial.print(zRawMax);
    Serial.println();
    Serial.print(xRaw);
    Serial.print(", ");
    Serial.print(yRaw);
    Serial.print(", ");
 80a16ca:	f000 fb97 	bl	80a1dfc <_ZN5Print5printEPKc>
    Serial.print(zRaw);

    // Convert raw values to 'milli-Gs"
    long xScaled = map(xRaw, xRawMin, xRawMax, -1000, 1000);
 80a16ce:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    Serial.println();
    Serial.print(xRaw);
    Serial.print(", ");
    Serial.print(yRaw);
    Serial.print(", ");
    Serial.print(zRaw);
 80a16d2:	f000 fde1 	bl	80a2298 <_Z16_fetch_usbserialv>
 80a16d6:	4639      	mov	r1, r7
 80a16d8:	220a      	movs	r2, #10
 80a16da:	f7ff ff5d 	bl	80a1598 <_ZN5Print5printIiLi0EEEjT_i>

    // Convert raw values to 'milli-Gs"
    long xScaled = map(xRaw, xRawMin, xRawMax, -1000, 1000);
 80a16de:	9600      	str	r6, [sp, #0]
 80a16e0:	462b      	mov	r3, r5
 80a16e2:	f8db 2000 	ldr.w	r2, [fp]
 80a16e6:	f8da 1000 	ldr.w	r1, [sl]
 80a16ea:	4648      	mov	r0, r9
 80a16ec:	f000 fa34 	bl	80a1b58 <_Z3mapiiiii>
    long yScaled = map(yRaw, yRawMin, yRawMax, -1000, 1000);
 80a16f0:	4a34      	ldr	r2, [pc, #208]	; (80a17c4 <_Z6setXYZPf+0x1ec>)
 80a16f2:	4933      	ldr	r1, [pc, #204]	; (80a17c0 <_Z6setXYZPf+0x1e8>)
 80a16f4:	9600      	str	r6, [sp, #0]
    Serial.print(yRaw);
    Serial.print(", ");
    Serial.print(zRaw);

    // Convert raw values to 'milli-Gs"
    long xScaled = map(xRaw, xRawMin, xRawMax, -1000, 1000);
 80a16f6:	4681      	mov	r9, r0
    long yScaled = map(yRaw, yRawMin, yRawMax, -1000, 1000);
 80a16f8:	462b      	mov	r3, r5
 80a16fa:	6812      	ldr	r2, [r2, #0]
 80a16fc:	6809      	ldr	r1, [r1, #0]
 80a16fe:	4640      	mov	r0, r8
 80a1700:	f000 fa2a 	bl	80a1b58 <_Z3mapiiiii>
    long zScaled = map(zRaw, zRawMin, zRawMax, -1000, 1000);
 80a1704:	4a32      	ldr	r2, [pc, #200]	; (80a17d0 <_Z6setXYZPf+0x1f8>)
 80a1706:	4931      	ldr	r1, [pc, #196]	; (80a17cc <_Z6setXYZPf+0x1f4>)
 80a1708:	9600      	str	r6, [sp, #0]
 80a170a:	462b      	mov	r3, r5
    Serial.print(", ");
    Serial.print(zRaw);

    // Convert raw values to 'milli-Gs"
    long xScaled = map(xRaw, xRawMin, xRawMax, -1000, 1000);
    long yScaled = map(yRaw, yRawMin, yRawMax, -1000, 1000);
 80a170c:	4680      	mov	r8, r0
    long zScaled = map(zRaw, zRawMin, zRawMax, -1000, 1000);
 80a170e:	6812      	ldr	r2, [r2, #0]
 80a1710:	6809      	ldr	r1, [r1, #0]
 80a1712:	4638      	mov	r0, r7
 80a1714:	f000 fa20 	bl	80a1b58 <_Z3mapiiiii>
 80a1718:	4605      	mov	r5, r0

    // re-scale to fractional Gs
    float xAccel = xScaled / 1000.0;
 80a171a:	4648      	mov	r0, r9
 80a171c:	f001 fb32 	bl	80a2d84 <__aeabi_i2d>
 80a1720:	2200      	movs	r2, #0
 80a1722:	4b2e      	ldr	r3, [pc, #184]	; (80a17dc <_Z6setXYZPf+0x204>)
 80a1724:	f001 fcbe 	bl	80a30a4 <__aeabi_ddiv>
 80a1728:	f001 fe8a 	bl	80a3440 <__aeabi_d2f>
 80a172c:	4607      	mov	r7, r0
    float yAccel = yScaled / 1000.0;
 80a172e:	4640      	mov	r0, r8
 80a1730:	f001 fb28 	bl	80a2d84 <__aeabi_i2d>
 80a1734:	2200      	movs	r2, #0
 80a1736:	4b29      	ldr	r3, [pc, #164]	; (80a17dc <_Z6setXYZPf+0x204>)
 80a1738:	f001 fcb4 	bl	80a30a4 <__aeabi_ddiv>
 80a173c:	f001 fe80 	bl	80a3440 <__aeabi_d2f>
 80a1740:	4606      	mov	r6, r0
    float zAccel = zScaled / 1000.0;
 80a1742:	4628      	mov	r0, r5
 80a1744:	f001 fb1e 	bl	80a2d84 <__aeabi_i2d>
 80a1748:	4b24      	ldr	r3, [pc, #144]	; (80a17dc <_Z6setXYZPf+0x204>)
 80a174a:	2200      	movs	r2, #0
 80a174c:	f001 fcaa 	bl	80a30a4 <__aeabi_ddiv>
 80a1750:	f001 fe76 	bl	80a3440 <__aeabi_d2f>
 80a1754:	4605      	mov	r5, r0

    Serial.print(" :: ");
    Serial.print(xAccel);
    Serial.print("G, ");
 80a1756:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80a17f0 <_Z6setXYZPf+0x218>
    // re-scale to fractional Gs
    float xAccel = xScaled / 1000.0;
    float yAccel = yScaled / 1000.0;
    float zAccel = zScaled / 1000.0;

    Serial.print(" :: ");
 80a175a:	f000 fd9d 	bl	80a2298 <_Z16_fetch_usbserialv>
 80a175e:	4920      	ldr	r1, [pc, #128]	; (80a17e0 <_Z6setXYZPf+0x208>)
 80a1760:	f000 fb4c 	bl	80a1dfc <_ZN5Print5printEPKc>
    Serial.print(xAccel);
 80a1764:	f000 fd98 	bl	80a2298 <_Z16_fetch_usbserialv>
 80a1768:	2202      	movs	r2, #2
 80a176a:	4639      	mov	r1, r7
 80a176c:	f000 fc3c 	bl	80a1fe8 <_ZN5Print5printEfi>
    Serial.print("G, ");
 80a1770:	f000 fd92 	bl	80a2298 <_Z16_fetch_usbserialv>
 80a1774:	4641      	mov	r1, r8
 80a1776:	f000 fb41 	bl	80a1dfc <_ZN5Print5printEPKc>
    Serial.print(yAccel);
 80a177a:	f000 fd8d 	bl	80a2298 <_Z16_fetch_usbserialv>
 80a177e:	2202      	movs	r2, #2
 80a1780:	4631      	mov	r1, r6
 80a1782:	f000 fc31 	bl	80a1fe8 <_ZN5Print5printEfi>
    Serial.print("G, ");
 80a1786:	f000 fd87 	bl	80a2298 <_Z16_fetch_usbserialv>
 80a178a:	4641      	mov	r1, r8
 80a178c:	f000 fb36 	bl	80a1dfc <_ZN5Print5printEPKc>
    Serial.print(zAccel);
 80a1790:	f000 fd82 	bl	80a2298 <_Z16_fetch_usbserialv>
 80a1794:	2202      	movs	r2, #2
 80a1796:	4629      	mov	r1, r5
 80a1798:	f000 fc26 	bl	80a1fe8 <_ZN5Print5printEfi>
    Serial.println("G");
 80a179c:	f000 fd7c 	bl	80a2298 <_Z16_fetch_usbserialv>
 80a17a0:	4910      	ldr	r1, [pc, #64]	; (80a17e4 <_Z6setXYZPf+0x20c>)
 80a17a2:	f000 fb3e 	bl	80a1e22 <_ZN5Print7printlnEPKc>

    xyz[0] = xAccel;
 80a17a6:	6027      	str	r7, [r4, #0]
    xyz[1] = yAccel;
 80a17a8:	6066      	str	r6, [r4, #4]
    xyz[2] = zAccel;
 80a17aa:	60a5      	str	r5, [r4, #8]
}
 80a17ac:	b003      	add	sp, #12
 80a17ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a17b2:	bf00      	nop
 80a17b4:	080a3866 	.word	0x080a3866
 80a17b8:	080a3856 	.word	0x080a3856
 80a17bc:	080a3868 	.word	0x080a3868
 80a17c0:	20000010 	.word	0x20000010
 80a17c4:	20000014 	.word	0x20000014
 80a17c8:	080a386e 	.word	0x080a386e
 80a17cc:	20000018 	.word	0x20000018
 80a17d0:	2000001c 	.word	0x2000001c
 80a17d4:	080a387a 	.word	0x080a387a
 80a17d8:	fffffc18 	.word	0xfffffc18
 80a17dc:	408f4000 	.word	0x408f4000
 80a17e0:	080a3874 	.word	0x080a3874
 80a17e4:	080a387d 	.word	0x080a387d
 80a17e8:	20000020 	.word	0x20000020
 80a17ec:	20000024 	.word	0x20000024
 80a17f0:	080a3879 	.word	0x080a3879

080a17f4 <_GLOBAL__sub_I_xRawMin>:
 80a17f4:	f000 b82a 	b.w	80a184c <HAL_Pin_Map>

080a17f8 <_GLOBAL__sub_I__Z7rainbow17Adafruit_NeoPixelh>:
 80a17f8:	f000 b828 	b.w	80a184c <HAL_Pin_Map>

080a17fc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a17fc:	b508      	push	{r3, lr}
 80a17fe:	4b02      	ldr	r3, [pc, #8]	; (80a1808 <os_mutex_recursive_create+0xc>)
 80a1800:	681b      	ldr	r3, [r3, #0]
 80a1802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1804:	9301      	str	r3, [sp, #4]
 80a1806:	bd08      	pop	{r3, pc}
 80a1808:	080601d0 	.word	0x080601d0

080a180c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a180c:	b508      	push	{r3, lr}
 80a180e:	4b02      	ldr	r3, [pc, #8]	; (80a1818 <os_mutex_recursive_destroy+0xc>)
 80a1810:	681b      	ldr	r3, [r3, #0]
 80a1812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1814:	9301      	str	r3, [sp, #4]
 80a1816:	bd08      	pop	{r3, pc}
 80a1818:	080601d0 	.word	0x080601d0

080a181c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a181c:	b508      	push	{r3, lr}
 80a181e:	4b02      	ldr	r3, [pc, #8]	; (80a1828 <HAL_RNG_GetRandomNumber+0xc>)
 80a1820:	681b      	ldr	r3, [r3, #0]
 80a1822:	685b      	ldr	r3, [r3, #4]
 80a1824:	9301      	str	r3, [sp, #4]
 80a1826:	bd08      	pop	{r3, pc}
 80a1828:	0806019c 	.word	0x0806019c

080a182c <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a182c:	b508      	push	{r3, lr}
 80a182e:	4b02      	ldr	r3, [pc, #8]	; (80a1838 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a1830:	681b      	ldr	r3, [r3, #0]
 80a1832:	691b      	ldr	r3, [r3, #16]
 80a1834:	9301      	str	r3, [sp, #4]
 80a1836:	bd08      	pop	{r3, pc}
 80a1838:	0806019c 	.word	0x0806019c

080a183c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a183c:	b508      	push	{r3, lr}
 80a183e:	4b02      	ldr	r3, [pc, #8]	; (80a1848 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1840:	681b      	ldr	r3, [r3, #0]
 80a1842:	695b      	ldr	r3, [r3, #20]
 80a1844:	9301      	str	r3, [sp, #4]
 80a1846:	bd08      	pop	{r3, pc}
 80a1848:	0806019c 	.word	0x0806019c

080a184c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a184c:	b508      	push	{r3, lr}
 80a184e:	4b02      	ldr	r3, [pc, #8]	; (80a1858 <HAL_Pin_Map+0xc>)
 80a1850:	681b      	ldr	r3, [r3, #0]
 80a1852:	681b      	ldr	r3, [r3, #0]
 80a1854:	9301      	str	r3, [sp, #4]
 80a1856:	bd08      	pop	{r3, pc}
 80a1858:	080601b0 	.word	0x080601b0

080a185c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a185c:	b508      	push	{r3, lr}
 80a185e:	4b02      	ldr	r3, [pc, #8]	; (80a1868 <HAL_Validate_Pin_Function+0xc>)
 80a1860:	681b      	ldr	r3, [r3, #0]
 80a1862:	685b      	ldr	r3, [r3, #4]
 80a1864:	9301      	str	r3, [sp, #4]
 80a1866:	bd08      	pop	{r3, pc}
 80a1868:	080601b0 	.word	0x080601b0

080a186c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a186c:	b508      	push	{r3, lr}
 80a186e:	4b02      	ldr	r3, [pc, #8]	; (80a1878 <HAL_Pin_Mode+0xc>)
 80a1870:	681b      	ldr	r3, [r3, #0]
 80a1872:	689b      	ldr	r3, [r3, #8]
 80a1874:	9301      	str	r3, [sp, #4]
 80a1876:	bd08      	pop	{r3, pc}
 80a1878:	080601b0 	.word	0x080601b0

080a187c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a187c:	b508      	push	{r3, lr}
 80a187e:	4b02      	ldr	r3, [pc, #8]	; (80a1888 <HAL_Get_Pin_Mode+0xc>)
 80a1880:	681b      	ldr	r3, [r3, #0]
 80a1882:	68db      	ldr	r3, [r3, #12]
 80a1884:	9301      	str	r3, [sp, #4]
 80a1886:	bd08      	pop	{r3, pc}
 80a1888:	080601b0 	.word	0x080601b0

080a188c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a188c:	b508      	push	{r3, lr}
 80a188e:	4b02      	ldr	r3, [pc, #8]	; (80a1898 <HAL_GPIO_Write+0xc>)
 80a1890:	681b      	ldr	r3, [r3, #0]
 80a1892:	691b      	ldr	r3, [r3, #16]
 80a1894:	9301      	str	r3, [sp, #4]
 80a1896:	bd08      	pop	{r3, pc}
 80a1898:	080601b0 	.word	0x080601b0

080a189c <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a189c:	b508      	push	{r3, lr}
 80a189e:	4b02      	ldr	r3, [pc, #8]	; (80a18a8 <HAL_ADC_Read+0xc>)
 80a18a0:	681b      	ldr	r3, [r3, #0]
 80a18a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a18a4:	9301      	str	r3, [sp, #4]
 80a18a6:	bd08      	pop	{r3, pc}
 80a18a8:	080601b0 	.word	0x080601b0

080a18ac <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a18ac:	b508      	push	{r3, lr}
 80a18ae:	4b02      	ldr	r3, [pc, #8]	; (80a18b8 <HAL_I2C_Write_Data+0xc>)
 80a18b0:	681b      	ldr	r3, [r3, #0]
 80a18b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a18b4:	9301      	str	r3, [sp, #4]
 80a18b6:	bd08      	pop	{r3, pc}
 80a18b8:	080601ac 	.word	0x080601ac

080a18bc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a18bc:	b508      	push	{r3, lr}
 80a18be:	4b02      	ldr	r3, [pc, #8]	; (80a18c8 <HAL_I2C_Available_Data+0xc>)
 80a18c0:	681b      	ldr	r3, [r3, #0]
 80a18c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a18c4:	9301      	str	r3, [sp, #4]
 80a18c6:	bd08      	pop	{r3, pc}
 80a18c8:	080601ac 	.word	0x080601ac

080a18cc <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a18cc:	b508      	push	{r3, lr}
 80a18ce:	4b02      	ldr	r3, [pc, #8]	; (80a18d8 <HAL_I2C_Read_Data+0xc>)
 80a18d0:	681b      	ldr	r3, [r3, #0]
 80a18d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a18d4:	9301      	str	r3, [sp, #4]
 80a18d6:	bd08      	pop	{r3, pc}
 80a18d8:	080601ac 	.word	0x080601ac

080a18dc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a18dc:	b508      	push	{r3, lr}
 80a18de:	4b02      	ldr	r3, [pc, #8]	; (80a18e8 <HAL_I2C_Peek_Data+0xc>)
 80a18e0:	681b      	ldr	r3, [r3, #0]
 80a18e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a18e4:	9301      	str	r3, [sp, #4]
 80a18e6:	bd08      	pop	{r3, pc}
 80a18e8:	080601ac 	.word	0x080601ac

080a18ec <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a18ec:	b508      	push	{r3, lr}
 80a18ee:	4b02      	ldr	r3, [pc, #8]	; (80a18f8 <HAL_I2C_Flush_Data+0xc>)
 80a18f0:	681b      	ldr	r3, [r3, #0]
 80a18f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a18f4:	9301      	str	r3, [sp, #4]
 80a18f6:	bd08      	pop	{r3, pc}
 80a18f8:	080601ac 	.word	0x080601ac

080a18fc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a18fc:	b508      	push	{r3, lr}
 80a18fe:	4b02      	ldr	r3, [pc, #8]	; (80a1908 <HAL_I2C_Is_Enabled+0xc>)
 80a1900:	681b      	ldr	r3, [r3, #0]
 80a1902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1904:	9301      	str	r3, [sp, #4]
 80a1906:	bd08      	pop	{r3, pc}
 80a1908:	080601ac 	.word	0x080601ac

080a190c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a190c:	b508      	push	{r3, lr}
 80a190e:	4b03      	ldr	r3, [pc, #12]	; (80a191c <HAL_I2C_Init+0x10>)
 80a1910:	681b      	ldr	r3, [r3, #0]
 80a1912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1916:	9301      	str	r3, [sp, #4]
 80a1918:	bd08      	pop	{r3, pc}
 80a191a:	0000      	.short	0x0000
 80a191c:	080601ac 	.word	0x080601ac

080a1920 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1920:	b508      	push	{r3, lr}
 80a1922:	4b02      	ldr	r3, [pc, #8]	; (80a192c <HAL_SPI_Init+0xc>)
 80a1924:	681b      	ldr	r3, [r3, #0]
 80a1926:	69db      	ldr	r3, [r3, #28]
 80a1928:	9301      	str	r3, [sp, #4]
 80a192a:	bd08      	pop	{r3, pc}
 80a192c:	080601b4 	.word	0x080601b4

080a1930 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1930:	b508      	push	{r3, lr}
 80a1932:	4b02      	ldr	r3, [pc, #8]	; (80a193c <HAL_SPI_Is_Enabled+0xc>)
 80a1934:	681b      	ldr	r3, [r3, #0]
 80a1936:	6a1b      	ldr	r3, [r3, #32]
 80a1938:	9301      	str	r3, [sp, #4]
 80a193a:	bd08      	pop	{r3, pc}
 80a193c:	080601b4 	.word	0x080601b4

080a1940 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1940:	b508      	push	{r3, lr}
 80a1942:	4b02      	ldr	r3, [pc, #8]	; (80a194c <HAL_USART_Init+0xc>)
 80a1944:	681b      	ldr	r3, [r3, #0]
 80a1946:	699b      	ldr	r3, [r3, #24]
 80a1948:	9301      	str	r3, [sp, #4]
 80a194a:	bd08      	pop	{r3, pc}
 80a194c:	080601c4 	.word	0x080601c4

080a1950 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1950:	b508      	push	{r3, lr}
 80a1952:	4b02      	ldr	r3, [pc, #8]	; (80a195c <HAL_USART_Write_Data+0xc>)
 80a1954:	681b      	ldr	r3, [r3, #0]
 80a1956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1958:	9301      	str	r3, [sp, #4]
 80a195a:	bd08      	pop	{r3, pc}
 80a195c:	080601c4 	.word	0x080601c4

080a1960 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1960:	b508      	push	{r3, lr}
 80a1962:	4b02      	ldr	r3, [pc, #8]	; (80a196c <HAL_USART_Available_Data+0xc>)
 80a1964:	681b      	ldr	r3, [r3, #0]
 80a1966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1968:	9301      	str	r3, [sp, #4]
 80a196a:	bd08      	pop	{r3, pc}
 80a196c:	080601c4 	.word	0x080601c4

080a1970 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1970:	b508      	push	{r3, lr}
 80a1972:	4b02      	ldr	r3, [pc, #8]	; (80a197c <HAL_USART_Read_Data+0xc>)
 80a1974:	681b      	ldr	r3, [r3, #0]
 80a1976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1978:	9301      	str	r3, [sp, #4]
 80a197a:	bd08      	pop	{r3, pc}
 80a197c:	080601c4 	.word	0x080601c4

080a1980 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1980:	b508      	push	{r3, lr}
 80a1982:	4b02      	ldr	r3, [pc, #8]	; (80a198c <HAL_USART_Peek_Data+0xc>)
 80a1984:	681b      	ldr	r3, [r3, #0]
 80a1986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1988:	9301      	str	r3, [sp, #4]
 80a198a:	bd08      	pop	{r3, pc}
 80a198c:	080601c4 	.word	0x080601c4

080a1990 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1990:	b508      	push	{r3, lr}
 80a1992:	4b02      	ldr	r3, [pc, #8]	; (80a199c <HAL_USART_Flush_Data+0xc>)
 80a1994:	681b      	ldr	r3, [r3, #0]
 80a1996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1998:	9301      	str	r3, [sp, #4]
 80a199a:	bd08      	pop	{r3, pc}
 80a199c:	080601c4 	.word	0x080601c4

080a19a0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a19a0:	b508      	push	{r3, lr}
 80a19a2:	4b02      	ldr	r3, [pc, #8]	; (80a19ac <HAL_USART_Is_Enabled+0xc>)
 80a19a4:	681b      	ldr	r3, [r3, #0]
 80a19a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a19a8:	9301      	str	r3, [sp, #4]
 80a19aa:	bd08      	pop	{r3, pc}
 80a19ac:	080601c4 	.word	0x080601c4

080a19b0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a19b0:	b508      	push	{r3, lr}
 80a19b2:	4b02      	ldr	r3, [pc, #8]	; (80a19bc <HAL_USART_Available_Data_For_Write+0xc>)
 80a19b4:	681b      	ldr	r3, [r3, #0]
 80a19b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a19b8:	9301      	str	r3, [sp, #4]
 80a19ba:	bd08      	pop	{r3, pc}
 80a19bc:	080601c4 	.word	0x080601c4

080a19c0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a19c0:	b508      	push	{r3, lr}
 80a19c2:	4b02      	ldr	r3, [pc, #8]	; (80a19cc <HAL_USB_USART_Init+0xc>)
 80a19c4:	681b      	ldr	r3, [r3, #0]
 80a19c6:	681b      	ldr	r3, [r3, #0]
 80a19c8:	9301      	str	r3, [sp, #4]
 80a19ca:	bd08      	pop	{r3, pc}
 80a19cc:	080601d8 	.word	0x080601d8

080a19d0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a19d0:	b508      	push	{r3, lr}
 80a19d2:	4b02      	ldr	r3, [pc, #8]	; (80a19dc <HAL_USB_USART_Begin+0xc>)
 80a19d4:	681b      	ldr	r3, [r3, #0]
 80a19d6:	685b      	ldr	r3, [r3, #4]
 80a19d8:	9301      	str	r3, [sp, #4]
 80a19da:	bd08      	pop	{r3, pc}
 80a19dc:	080601d8 	.word	0x080601d8

080a19e0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a19e0:	b508      	push	{r3, lr}
 80a19e2:	4b02      	ldr	r3, [pc, #8]	; (80a19ec <HAL_USB_USART_Available_Data+0xc>)
 80a19e4:	681b      	ldr	r3, [r3, #0]
 80a19e6:	691b      	ldr	r3, [r3, #16]
 80a19e8:	9301      	str	r3, [sp, #4]
 80a19ea:	bd08      	pop	{r3, pc}
 80a19ec:	080601d8 	.word	0x080601d8

080a19f0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a19f0:	b508      	push	{r3, lr}
 80a19f2:	4b02      	ldr	r3, [pc, #8]	; (80a19fc <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a19f4:	681b      	ldr	r3, [r3, #0]
 80a19f6:	695b      	ldr	r3, [r3, #20]
 80a19f8:	9301      	str	r3, [sp, #4]
 80a19fa:	bd08      	pop	{r3, pc}
 80a19fc:	080601d8 	.word	0x080601d8

080a1a00 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1a00:	b508      	push	{r3, lr}
 80a1a02:	4b02      	ldr	r3, [pc, #8]	; (80a1a0c <HAL_USB_USART_Receive_Data+0xc>)
 80a1a04:	681b      	ldr	r3, [r3, #0]
 80a1a06:	699b      	ldr	r3, [r3, #24]
 80a1a08:	9301      	str	r3, [sp, #4]
 80a1a0a:	bd08      	pop	{r3, pc}
 80a1a0c:	080601d8 	.word	0x080601d8

080a1a10 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1a10:	b508      	push	{r3, lr}
 80a1a12:	4b02      	ldr	r3, [pc, #8]	; (80a1a1c <HAL_USB_USART_Send_Data+0xc>)
 80a1a14:	681b      	ldr	r3, [r3, #0]
 80a1a16:	69db      	ldr	r3, [r3, #28]
 80a1a18:	9301      	str	r3, [sp, #4]
 80a1a1a:	bd08      	pop	{r3, pc}
 80a1a1c:	080601d8 	.word	0x080601d8

080a1a20 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1a20:	b508      	push	{r3, lr}
 80a1a22:	4b02      	ldr	r3, [pc, #8]	; (80a1a2c <HAL_USB_USART_Flush_Data+0xc>)
 80a1a24:	681b      	ldr	r3, [r3, #0]
 80a1a26:	6a1b      	ldr	r3, [r3, #32]
 80a1a28:	9301      	str	r3, [sp, #4]
 80a1a2a:	bd08      	pop	{r3, pc}
 80a1a2c:	080601d8 	.word	0x080601d8

080a1a30 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1a30:	b508      	push	{r3, lr}
 80a1a32:	4b02      	ldr	r3, [pc, #8]	; (80a1a3c <inet_gethostbyname+0xc>)
 80a1a34:	681b      	ldr	r3, [r3, #0]
 80a1a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1a38:	9301      	str	r3, [sp, #4]
 80a1a3a:	bd08      	pop	{r3, pc}
 80a1a3c:	080601c0 	.word	0x080601c0

080a1a40 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1a40:	b508      	push	{r3, lr}
 80a1a42:	4b02      	ldr	r3, [pc, #8]	; (80a1a4c <set_system_mode+0xc>)
 80a1a44:	681b      	ldr	r3, [r3, #0]
 80a1a46:	685b      	ldr	r3, [r3, #4]
 80a1a48:	9301      	str	r3, [sp, #4]
 80a1a4a:	bd08      	pop	{r3, pc}
 80a1a4c:	080601a4 	.word	0x080601a4

080a1a50 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1a50:	b508      	push	{r3, lr}
 80a1a52:	4b02      	ldr	r3, [pc, #8]	; (80a1a5c <system_delay_ms+0xc>)
 80a1a54:	681b      	ldr	r3, [r3, #0]
 80a1a56:	695b      	ldr	r3, [r3, #20]
 80a1a58:	9301      	str	r3, [sp, #4]
 80a1a5a:	bd08      	pop	{r3, pc}
 80a1a5c:	080601a4 	.word	0x080601a4

080a1a60 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1a60:	b508      	push	{r3, lr}
 80a1a62:	4b03      	ldr	r3, [pc, #12]	; (80a1a70 <system_ctrl_set_app_request_handler+0x10>)
 80a1a64:	681b      	ldr	r3, [r3, #0]
 80a1a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1a6a:	9301      	str	r3, [sp, #4]
 80a1a6c:	bd08      	pop	{r3, pc}
 80a1a6e:	0000      	.short	0x0000
 80a1a70:	080601a4 	.word	0x080601a4

080a1a74 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1a74:	b508      	push	{r3, lr}
 80a1a76:	4b03      	ldr	r3, [pc, #12]	; (80a1a84 <system_ctrl_set_result+0x10>)
 80a1a78:	681b      	ldr	r3, [r3, #0]
 80a1a7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1a7e:	9301      	str	r3, [sp, #4]
 80a1a80:	bd08      	pop	{r3, pc}
 80a1a82:	0000      	.short	0x0000
 80a1a84:	080601a4 	.word	0x080601a4

080a1a88 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1a88:	b508      	push	{r3, lr}
 80a1a8a:	4b02      	ldr	r3, [pc, #8]	; (80a1a94 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1a8c:	681b      	ldr	r3, [r3, #0]
 80a1a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1a90:	9301      	str	r3, [sp, #4]
 80a1a92:	bd08      	pop	{r3, pc}
 80a1a94:	080601cc 	.word	0x080601cc

080a1a98 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1a98:	b508      	push	{r3, lr}
 80a1a9a:	4b02      	ldr	r3, [pc, #8]	; (80a1aa4 <network_connect+0xc>)
 80a1a9c:	681b      	ldr	r3, [r3, #0]
 80a1a9e:	685b      	ldr	r3, [r3, #4]
 80a1aa0:	9301      	str	r3, [sp, #4]
 80a1aa2:	bd08      	pop	{r3, pc}
 80a1aa4:	080601c8 	.word	0x080601c8

080a1aa8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1aa8:	b508      	push	{r3, lr}
 80a1aaa:	4b02      	ldr	r3, [pc, #8]	; (80a1ab4 <network_connecting+0xc>)
 80a1aac:	681b      	ldr	r3, [r3, #0]
 80a1aae:	689b      	ldr	r3, [r3, #8]
 80a1ab0:	9301      	str	r3, [sp, #4]
 80a1ab2:	bd08      	pop	{r3, pc}
 80a1ab4:	080601c8 	.word	0x080601c8

080a1ab8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1ab8:	b508      	push	{r3, lr}
 80a1aba:	4b02      	ldr	r3, [pc, #8]	; (80a1ac4 <network_disconnect+0xc>)
 80a1abc:	681b      	ldr	r3, [r3, #0]
 80a1abe:	68db      	ldr	r3, [r3, #12]
 80a1ac0:	9301      	str	r3, [sp, #4]
 80a1ac2:	bd08      	pop	{r3, pc}
 80a1ac4:	080601c8 	.word	0x080601c8

080a1ac8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1ac8:	b508      	push	{r3, lr}
 80a1aca:	4b02      	ldr	r3, [pc, #8]	; (80a1ad4 <network_ready+0xc>)
 80a1acc:	681b      	ldr	r3, [r3, #0]
 80a1ace:	691b      	ldr	r3, [r3, #16]
 80a1ad0:	9301      	str	r3, [sp, #4]
 80a1ad2:	bd08      	pop	{r3, pc}
 80a1ad4:	080601c8 	.word	0x080601c8

080a1ad8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1ad8:	b508      	push	{r3, lr}
 80a1ada:	4b02      	ldr	r3, [pc, #8]	; (80a1ae4 <network_on+0xc>)
 80a1adc:	681b      	ldr	r3, [r3, #0]
 80a1ade:	695b      	ldr	r3, [r3, #20]
 80a1ae0:	9301      	str	r3, [sp, #4]
 80a1ae2:	bd08      	pop	{r3, pc}
 80a1ae4:	080601c8 	.word	0x080601c8

080a1ae8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1ae8:	b508      	push	{r3, lr}
 80a1aea:	4b02      	ldr	r3, [pc, #8]	; (80a1af4 <network_off+0xc>)
 80a1aec:	681b      	ldr	r3, [r3, #0]
 80a1aee:	699b      	ldr	r3, [r3, #24]
 80a1af0:	9301      	str	r3, [sp, #4]
 80a1af2:	bd08      	pop	{r3, pc}
 80a1af4:	080601c8 	.word	0x080601c8

080a1af8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1af8:	b508      	push	{r3, lr}
 80a1afa:	4b02      	ldr	r3, [pc, #8]	; (80a1b04 <network_listen+0xc>)
 80a1afc:	681b      	ldr	r3, [r3, #0]
 80a1afe:	69db      	ldr	r3, [r3, #28]
 80a1b00:	9301      	str	r3, [sp, #4]
 80a1b02:	bd08      	pop	{r3, pc}
 80a1b04:	080601c8 	.word	0x080601c8

080a1b08 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1b08:	b508      	push	{r3, lr}
 80a1b0a:	4b02      	ldr	r3, [pc, #8]	; (80a1b14 <network_listening+0xc>)
 80a1b0c:	681b      	ldr	r3, [r3, #0]
 80a1b0e:	6a1b      	ldr	r3, [r3, #32]
 80a1b10:	9301      	str	r3, [sp, #4]
 80a1b12:	bd08      	pop	{r3, pc}
 80a1b14:	080601c8 	.word	0x080601c8

080a1b18 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1b18:	b508      	push	{r3, lr}
 80a1b1a:	4b02      	ldr	r3, [pc, #8]	; (80a1b24 <network_set_listen_timeout+0xc>)
 80a1b1c:	681b      	ldr	r3, [r3, #0]
 80a1b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1b20:	9301      	str	r3, [sp, #4]
 80a1b22:	bd08      	pop	{r3, pc}
 80a1b24:	080601c8 	.word	0x080601c8

080a1b28 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1b28:	b508      	push	{r3, lr}
 80a1b2a:	4b02      	ldr	r3, [pc, #8]	; (80a1b34 <network_get_listen_timeout+0xc>)
 80a1b2c:	681b      	ldr	r3, [r3, #0]
 80a1b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1b30:	9301      	str	r3, [sp, #4]
 80a1b32:	bd08      	pop	{r3, pc}
 80a1b34:	080601c8 	.word	0x080601c8

080a1b38 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1b38:	b508      	push	{r3, lr}
 80a1b3a:	4b02      	ldr	r3, [pc, #8]	; (80a1b44 <malloc+0xc>)
 80a1b3c:	681b      	ldr	r3, [r3, #0]
 80a1b3e:	681b      	ldr	r3, [r3, #0]
 80a1b40:	9301      	str	r3, [sp, #4]
 80a1b42:	bd08      	pop	{r3, pc}
 80a1b44:	080601a0 	.word	0x080601a0

080a1b48 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1b48:	b508      	push	{r3, lr}
 80a1b4a:	4b02      	ldr	r3, [pc, #8]	; (80a1b54 <free+0xc>)
 80a1b4c:	681b      	ldr	r3, [r3, #0]
 80a1b4e:	685b      	ldr	r3, [r3, #4]
 80a1b50:	9301      	str	r3, [sp, #4]
 80a1b52:	bd08      	pop	{r3, pc}
 80a1b54:	080601a0 	.word	0x080601a0

080a1b58 <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
 80a1b58:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
 80a1b5a:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
 80a1b5c:	d007      	beq.n	80a1b6e <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
 80a1b5e:	9d03      	ldr	r5, [sp, #12]
 80a1b60:	1a44      	subs	r4, r0, r1
 80a1b62:	1aed      	subs	r5, r5, r3
 80a1b64:	436c      	muls	r4, r5
 80a1b66:	1a52      	subs	r2, r2, r1
 80a1b68:	fb94 f4f2 	sdiv	r4, r4, r2
 80a1b6c:	18e0      	adds	r0, r4, r3
}
 80a1b6e:	bd30      	pop	{r4, r5, pc}

080a1b70 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1b70:	2100      	movs	r1, #0
 80a1b72:	f7ff bf6d 	b.w	80a1a50 <system_delay_ms>

080a1b76 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1b76:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1b78:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1b7a:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a1b7c:	b113      	cbz	r3, 80a1b84 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1b7e:	2203      	movs	r2, #3
 80a1b80:	4601      	mov	r1, r0
 80a1b82:	4798      	blx	r3
    }
 80a1b84:	4620      	mov	r0, r4
 80a1b86:	bd10      	pop	{r4, pc}

080a1b88 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a1b88:	4770      	bx	lr

080a1b8a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1b8c:	4606      	mov	r6, r0
 80a1b8e:	4615      	mov	r5, r2
 80a1b90:	460c      	mov	r4, r1
 80a1b92:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1b94:	42bc      	cmp	r4, r7
 80a1b96:	d006      	beq.n	80a1ba6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1b98:	6833      	ldr	r3, [r6, #0]
 80a1b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1b9e:	689b      	ldr	r3, [r3, #8]
 80a1ba0:	4630      	mov	r0, r6
 80a1ba2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1ba4:	e7f6      	b.n	80a1b94 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1ba6:	4628      	mov	r0, r5
 80a1ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1baa <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1baa:	2200      	movs	r2, #0
 80a1bac:	7c00      	ldrb	r0, [r0, #16]
 80a1bae:	f7ff be7d 	b.w	80a18ac <HAL_I2C_Write_Data>

080a1bb2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1bb2:	2100      	movs	r1, #0
 80a1bb4:	7c00      	ldrb	r0, [r0, #16]
 80a1bb6:	f7ff be81 	b.w	80a18bc <HAL_I2C_Available_Data>

080a1bba <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1bba:	2100      	movs	r1, #0
 80a1bbc:	7c00      	ldrb	r0, [r0, #16]
 80a1bbe:	f7ff be85 	b.w	80a18cc <HAL_I2C_Read_Data>

080a1bc2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1bc2:	2100      	movs	r1, #0
 80a1bc4:	7c00      	ldrb	r0, [r0, #16]
 80a1bc6:	f7ff be89 	b.w	80a18dc <HAL_I2C_Peek_Data>

080a1bca <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1bca:	2100      	movs	r1, #0
 80a1bcc:	7c00      	ldrb	r0, [r0, #16]
 80a1bce:	f7ff be8d 	b.w	80a18ec <HAL_I2C_Flush_Data>

080a1bd2 <_ZN7TwoWireD0Ev>:
 80a1bd2:	b510      	push	{r4, lr}
 80a1bd4:	4604      	mov	r4, r0
 80a1bd6:	2114      	movs	r1, #20
 80a1bd8:	f000 fd93 	bl	80a2702 <_ZdlPvj>
 80a1bdc:	4620      	mov	r0, r4
 80a1bde:	bd10      	pop	{r4, pc}

080a1be0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a1be0:	b510      	push	{r4, lr}
 80a1be2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1be4:	2300      	movs	r3, #0
 80a1be6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1be8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1bec:	60a3      	str	r3, [r4, #8]
 80a1bee:	4b04      	ldr	r3, [pc, #16]	; (80a1c00 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a1bf0:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a1bf2:	4608      	mov	r0, r1
 80a1bf4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a1bf6:	4611      	mov	r1, r2
 80a1bf8:	f7ff fe88 	bl	80a190c <HAL_I2C_Init>
}
 80a1bfc:	4620      	mov	r0, r4
 80a1bfe:	bd10      	pop	{r4, pc}
 80a1c00:	080a3888 	.word	0x080a3888

080a1c04 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1c04:	2100      	movs	r1, #0
 80a1c06:	7c00      	ldrb	r0, [r0, #16]
 80a1c08:	f7ff be78 	b.w	80a18fc <HAL_I2C_Is_Enabled>

080a1c0c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1c0c:	4770      	bx	lr

080a1c0e <_ZN9IPAddressD0Ev>:
 80a1c0e:	b510      	push	{r4, lr}
 80a1c10:	4604      	mov	r4, r0
 80a1c12:	2118      	movs	r1, #24
 80a1c14:	f000 fd75 	bl	80a2702 <_ZdlPvj>
 80a1c18:	4620      	mov	r0, r4
 80a1c1a:	bd10      	pop	{r4, pc}

080a1c1c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1c1e:	460f      	mov	r7, r1
 80a1c20:	f100 0608 	add.w	r6, r0, #8
 80a1c24:	1d05      	adds	r5, r0, #4
 80a1c26:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a1c28:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1c2c:	220a      	movs	r2, #10
 80a1c2e:	4638      	mov	r0, r7
 80a1c30:	f000 f901 	bl	80a1e36 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1c34:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1c36:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1c38:	d007      	beq.n	80a1c4a <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1c3a:	2c00      	cmp	r4, #0
 80a1c3c:	d0f4      	beq.n	80a1c28 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1c3e:	212e      	movs	r1, #46	; 0x2e
 80a1c40:	4638      	mov	r0, r7
 80a1c42:	f000 f8df 	bl	80a1e04 <_ZN5Print5printEc>
 80a1c46:	4404      	add	r4, r0
 80a1c48:	e7ee      	b.n	80a1c28 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1c4a:	4620      	mov	r0, r4
 80a1c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1c50 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1c50:	b510      	push	{r4, lr}
 80a1c52:	4604      	mov	r4, r0
 80a1c54:	4b04      	ldr	r3, [pc, #16]	; (80a1c68 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1c56:	2211      	movs	r2, #17
 80a1c58:	f840 3b04 	str.w	r3, [r0], #4
 80a1c5c:	2100      	movs	r1, #0
 80a1c5e:	f001 fda8 	bl	80a37b2 <memset>
{
    clear();
}
 80a1c62:	4620      	mov	r0, r4
 80a1c64:	bd10      	pop	{r4, pc}
 80a1c66:	bf00      	nop
 80a1c68:	080a38b0 	.word	0x080a38b0

080a1c6c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1c6c:	4603      	mov	r3, r0
 80a1c6e:	4a07      	ldr	r2, [pc, #28]	; (80a1c8c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1c70:	b510      	push	{r4, lr}
 80a1c72:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1c76:	f101 0210 	add.w	r2, r1, #16
 80a1c7a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1c7e:	4291      	cmp	r1, r2
 80a1c80:	f843 4b04 	str.w	r4, [r3], #4
 80a1c84:	d1f9      	bne.n	80a1c7a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1c86:	780a      	ldrb	r2, [r1, #0]
 80a1c88:	701a      	strb	r2, [r3, #0]
}
 80a1c8a:	bd10      	pop	{r4, pc}
 80a1c8c:	080a38b0 	.word	0x080a38b0

080a1c90 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1c90:	4a02      	ldr	r2, [pc, #8]	; (80a1c9c <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a1c92:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1c94:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1c96:	2204      	movs	r2, #4
 80a1c98:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a1c9a:	4770      	bx	lr
 80a1c9c:	080a38b0 	.word	0x080a38b0

080a1ca0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1ca0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1ca2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1ca6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1caa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1cae:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a1cb2:	2304      	movs	r3, #4
 80a1cb4:	6041      	str	r1, [r0, #4]
 80a1cb6:	7503      	strb	r3, [r0, #20]
 80a1cb8:	bd10      	pop	{r4, pc}
	...

080a1cbc <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1cbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1cbe:	4d04      	ldr	r5, [pc, #16]	; (80a1cd0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1cc0:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1cc2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1cc6:	9500      	str	r5, [sp, #0]
 80a1cc8:	f7ff ffea 	bl	80a1ca0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1ccc:	b003      	add	sp, #12
 80a1cce:	bd30      	pop	{r4, r5, pc}
 80a1cd0:	080a38b0 	.word	0x080a38b0

080a1cd4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1cd4:	4a01      	ldr	r2, [pc, #4]	; (80a1cdc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1cd6:	4b02      	ldr	r3, [pc, #8]	; (80a1ce0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1cd8:	601a      	str	r2, [r3, #0]
 80a1cda:	4770      	bx	lr
 80a1cdc:	080a3932 	.word	0x080a3932
 80a1ce0:	200000bc 	.word	0x200000bc

080a1ce4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1ce4:	2300      	movs	r3, #0
 80a1ce6:	461a      	mov	r2, r3
 80a1ce8:	6840      	ldr	r0, [r0, #4]
 80a1cea:	f7ff bed5 	b.w	80a1a98 <network_connect>

080a1cee <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1cee:	2200      	movs	r2, #0
 80a1cf0:	2102      	movs	r1, #2
 80a1cf2:	6840      	ldr	r0, [r0, #4]
 80a1cf4:	f7ff bee0 	b.w	80a1ab8 <network_disconnect>

080a1cf8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1cf8:	2200      	movs	r2, #0
 80a1cfa:	4611      	mov	r1, r2
 80a1cfc:	6840      	ldr	r0, [r0, #4]
 80a1cfe:	f7ff bed3 	b.w	80a1aa8 <network_connecting>

080a1d02 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1d02:	2200      	movs	r2, #0
 80a1d04:	4611      	mov	r1, r2
 80a1d06:	6840      	ldr	r0, [r0, #4]
 80a1d08:	f7ff bede 	b.w	80a1ac8 <network_ready>

080a1d0c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1d0c:	2300      	movs	r3, #0
 80a1d0e:	461a      	mov	r2, r3
 80a1d10:	4619      	mov	r1, r3
 80a1d12:	6840      	ldr	r0, [r0, #4]
 80a1d14:	f7ff bee0 	b.w	80a1ad8 <network_on>

080a1d18 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1d18:	2300      	movs	r3, #0
 80a1d1a:	461a      	mov	r2, r3
 80a1d1c:	4619      	mov	r1, r3
 80a1d1e:	6840      	ldr	r0, [r0, #4]
 80a1d20:	f7ff bee2 	b.w	80a1ae8 <network_off>

080a1d24 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1d24:	2200      	movs	r2, #0
 80a1d26:	f081 0101 	eor.w	r1, r1, #1
 80a1d2a:	6840      	ldr	r0, [r0, #4]
 80a1d2c:	f7ff bee4 	b.w	80a1af8 <network_listen>

080a1d30 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1d30:	2200      	movs	r2, #0
 80a1d32:	6840      	ldr	r0, [r0, #4]
 80a1d34:	f7ff bef0 	b.w	80a1b18 <network_set_listen_timeout>

080a1d38 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1d38:	2200      	movs	r2, #0
 80a1d3a:	4611      	mov	r1, r2
 80a1d3c:	6840      	ldr	r0, [r0, #4]
 80a1d3e:	f7ff bef3 	b.w	80a1b28 <network_get_listen_timeout>

080a1d42 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1d42:	2200      	movs	r2, #0
 80a1d44:	4611      	mov	r1, r2
 80a1d46:	6840      	ldr	r0, [r0, #4]
 80a1d48:	f7ff bede 	b.w	80a1b08 <network_listening>

080a1d4c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1d4c:	b570      	push	{r4, r5, r6, lr}
 80a1d4e:	4616      	mov	r6, r2
 80a1d50:	b08e      	sub	sp, #56	; 0x38
 80a1d52:	4604      	mov	r4, r0
    IPAddress addr;
 80a1d54:	a808      	add	r0, sp, #32
 80a1d56:	f7ff ff7b 	bl	80a1c50 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1d5a:	2211      	movs	r2, #17
 80a1d5c:	2100      	movs	r1, #0
 80a1d5e:	a803      	add	r0, sp, #12
 80a1d60:	f001 fd27 	bl	80a37b2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1d64:	4630      	mov	r0, r6
 80a1d66:	f001 fd55 	bl	80a3814 <strlen>
 80a1d6a:	2500      	movs	r5, #0
 80a1d6c:	4b0a      	ldr	r3, [pc, #40]	; (80a1d98 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1d6e:	9500      	str	r5, [sp, #0]
 80a1d70:	b281      	uxth	r1, r0
 80a1d72:	685b      	ldr	r3, [r3, #4]
 80a1d74:	aa03      	add	r2, sp, #12
 80a1d76:	4630      	mov	r0, r6
 80a1d78:	f7ff fe5a 	bl	80a1a30 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1d7c:	b120      	cbz	r0, 80a1d88 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a1d7e:	4629      	mov	r1, r5
 80a1d80:	4620      	mov	r0, r4
 80a1d82:	f7ff ff85 	bl	80a1c90 <_ZN9IPAddressC1Em>
 80a1d86:	e003      	b.n	80a1d90 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1d88:	a903      	add	r1, sp, #12
 80a1d8a:	4620      	mov	r0, r4
 80a1d8c:	f7ff ff6e 	bl	80a1c6c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1d90:	4620      	mov	r0, r4
 80a1d92:	b00e      	add	sp, #56	; 0x38
 80a1d94:	bd70      	pop	{r4, r5, r6, pc}
 80a1d96:	bf00      	nop
 80a1d98:	20000138 	.word	0x20000138

080a1d9c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1d9c:	4b02      	ldr	r3, [pc, #8]	; (80a1da8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1d9e:	4a03      	ldr	r2, [pc, #12]	; (80a1dac <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1da0:	601a      	str	r2, [r3, #0]
 80a1da2:	2200      	movs	r2, #0
 80a1da4:	605a      	str	r2, [r3, #4]
 80a1da6:	4770      	bx	lr
 80a1da8:	200000c0 	.word	0x200000c0
 80a1dac:	080a39a4 	.word	0x080a39a4

080a1db0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1db2:	4606      	mov	r6, r0
 80a1db4:	460d      	mov	r5, r1
 80a1db6:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1db8:	2400      	movs	r4, #0
  while (size--) {
 80a1dba:	42bd      	cmp	r5, r7
 80a1dbc:	d00c      	beq.n	80a1dd8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1dbe:	6833      	ldr	r3, [r6, #0]
 80a1dc0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1dc4:	689b      	ldr	r3, [r3, #8]
 80a1dc6:	4630      	mov	r0, r6
 80a1dc8:	4798      	blx	r3
     if (chunk>=0)
 80a1dca:	2800      	cmp	r0, #0
 80a1dcc:	db01      	blt.n	80a1dd2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1dce:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1dd0:	e7f3      	b.n	80a1dba <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1dd2:	2c00      	cmp	r4, #0
 80a1dd4:	bf08      	it	eq
 80a1dd6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1dd8:	4620      	mov	r0, r4
 80a1dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1ddc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1ddc:	b570      	push	{r4, r5, r6, lr}
 80a1dde:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1de0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1de2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1de4:	b149      	cbz	r1, 80a1dfa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1de6:	f001 fd15 	bl	80a3814 <strlen>
 80a1dea:	682b      	ldr	r3, [r5, #0]
 80a1dec:	4602      	mov	r2, r0
 80a1dee:	4621      	mov	r1, r4
 80a1df0:	4628      	mov	r0, r5
    }
 80a1df2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1df6:	68db      	ldr	r3, [r3, #12]
 80a1df8:	4718      	bx	r3
    }
 80a1dfa:	bd70      	pop	{r4, r5, r6, pc}

080a1dfc <_ZN5Print5printEPKc>:
 80a1dfc:	b508      	push	{r3, lr}
 80a1dfe:	f7ff ffed 	bl	80a1ddc <_ZN5Print5writeEPKc>
 80a1e02:	bd08      	pop	{r3, pc}

080a1e04 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1e04:	6803      	ldr	r3, [r0, #0]
 80a1e06:	689b      	ldr	r3, [r3, #8]
 80a1e08:	4718      	bx	r3

080a1e0a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1e0a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1e0c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1e0e:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1e10:	f7ff fff8 	bl	80a1e04 <_ZN5Print5printEc>
  n += print('\n');
 80a1e14:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1e16:	4604      	mov	r4, r0
  n += print('\n');
 80a1e18:	4628      	mov	r0, r5
 80a1e1a:	f7ff fff3 	bl	80a1e04 <_ZN5Print5printEc>
  return n;
}
 80a1e1e:	4420      	add	r0, r4
 80a1e20:	bd38      	pop	{r3, r4, r5, pc}

080a1e22 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1e22:	b538      	push	{r3, r4, r5, lr}
 80a1e24:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1e26:	f7ff ffd9 	bl	80a1ddc <_ZN5Print5writeEPKc>
 80a1e2a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1e2c:	4628      	mov	r0, r5
 80a1e2e:	f7ff ffec 	bl	80a1e0a <_ZN5Print7printlnEv>
  return n;
}
 80a1e32:	4420      	add	r0, r4
 80a1e34:	bd38      	pop	{r3, r4, r5, pc}

080a1e36 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1e36:	2a01      	cmp	r2, #1
 80a1e38:	bf98      	it	ls
 80a1e3a:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1e3c:	b530      	push	{r4, r5, lr}
 80a1e3e:	460b      	mov	r3, r1
 80a1e40:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1e42:	2100      	movs	r1, #0
 80a1e44:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1e48:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a1e4c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a1e50:	fb05 3312 	mls	r3, r5, r2, r3
 80a1e54:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1e56:	2b09      	cmp	r3, #9
 80a1e58:	bf94      	ite	ls
 80a1e5a:	3330      	addls	r3, #48	; 0x30
 80a1e5c:	3337      	addhi	r3, #55	; 0x37
 80a1e5e:	b2db      	uxtb	r3, r3
 80a1e60:	4621      	mov	r1, r4
 80a1e62:	f804 3901 	strb.w	r3, [r4], #-1
 80a1e66:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1e68:	2d00      	cmp	r5, #0
 80a1e6a:	d1ef      	bne.n	80a1e4c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1e6c:	f7ff ffb6 	bl	80a1ddc <_ZN5Print5writeEPKc>
}
 80a1e70:	b00b      	add	sp, #44	; 0x2c
 80a1e72:	bd30      	pop	{r4, r5, pc}

080a1e74 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1e78:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1e7a:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1e7c:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1e7e:	4617      	mov	r7, r2
 80a1e80:	461e      	mov	r6, r3
 80a1e82:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1e86:	f001 fa7d 	bl	80a3384 <__aeabi_dcmpun>
 80a1e8a:	b108      	cbz	r0, 80a1e90 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1e8c:	494d      	ldr	r1, [pc, #308]	; (80a1fc4 <_ZN5Print10printFloatEdh+0x150>)
 80a1e8e:	e012      	b.n	80a1eb6 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a1e90:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a1e94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a1e98:	4b4b      	ldr	r3, [pc, #300]	; (80a1fc8 <_ZN5Print10printFloatEdh+0x154>)
 80a1e9a:	4638      	mov	r0, r7
 80a1e9c:	4621      	mov	r1, r4
 80a1e9e:	f001 fa71 	bl	80a3384 <__aeabi_dcmpun>
 80a1ea2:	b968      	cbnz	r0, 80a1ec0 <_ZN5Print10printFloatEdh+0x4c>
 80a1ea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a1ea8:	4b47      	ldr	r3, [pc, #284]	; (80a1fc8 <_ZN5Print10printFloatEdh+0x154>)
 80a1eaa:	4638      	mov	r0, r7
 80a1eac:	4621      	mov	r1, r4
 80a1eae:	f001 fa4b 	bl	80a3348 <__aeabi_dcmple>
 80a1eb2:	b928      	cbnz	r0, 80a1ec0 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1eb4:	4945      	ldr	r1, [pc, #276]	; (80a1fcc <_ZN5Print10printFloatEdh+0x158>)
 80a1eb6:	4640      	mov	r0, r8
 80a1eb8:	f7ff ff90 	bl	80a1ddc <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a1ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a1ec0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a1ec4:	4b42      	ldr	r3, [pc, #264]	; (80a1fd0 <_ZN5Print10printFloatEdh+0x15c>)
 80a1ec6:	4638      	mov	r0, r7
 80a1ec8:	4631      	mov	r1, r6
 80a1eca:	f001 fa51 	bl	80a3370 <__aeabi_dcmpgt>
 80a1ece:	b108      	cbz	r0, 80a1ed4 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1ed0:	4940      	ldr	r1, [pc, #256]	; (80a1fd4 <_ZN5Print10printFloatEdh+0x160>)
 80a1ed2:	e7f0      	b.n	80a1eb6 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a1ed4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a1ed8:	4b3f      	ldr	r3, [pc, #252]	; (80a1fd8 <_ZN5Print10printFloatEdh+0x164>)
 80a1eda:	4638      	mov	r0, r7
 80a1edc:	4631      	mov	r1, r6
 80a1ede:	f001 fa29 	bl	80a3334 <__aeabi_dcmplt>
 80a1ee2:	2800      	cmp	r0, #0
 80a1ee4:	d1f4      	bne.n	80a1ed0 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a1ee6:	2200      	movs	r2, #0
 80a1ee8:	2300      	movs	r3, #0
 80a1eea:	4638      	mov	r0, r7
 80a1eec:	4631      	mov	r1, r6
 80a1eee:	f001 fa21 	bl	80a3334 <__aeabi_dcmplt>
 80a1ef2:	b138      	cbz	r0, 80a1f04 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a1ef4:	212d      	movs	r1, #45	; 0x2d
 80a1ef6:	4640      	mov	r0, r8
 80a1ef8:	f7ff ff84 	bl	80a1e04 <_ZN5Print5printEc>
     number = -number;
 80a1efc:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a1f00:	4604      	mov	r4, r0
 80a1f02:	e000      	b.n	80a1f06 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a1f04:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a1f06:	4935      	ldr	r1, [pc, #212]	; (80a1fdc <_ZN5Print10printFloatEdh+0x168>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a1f08:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a1f0c:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a1f0e:	fa5f f389 	uxtb.w	r3, r9
 80a1f12:	429d      	cmp	r5, r3
 80a1f14:	d906      	bls.n	80a1f24 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a1f16:	2200      	movs	r2, #0
 80a1f18:	4b31      	ldr	r3, [pc, #196]	; (80a1fe0 <_ZN5Print10printFloatEdh+0x16c>)
 80a1f1a:	f001 f8c3 	bl	80a30a4 <__aeabi_ddiv>
 80a1f1e:	f109 0901 	add.w	r9, r9, #1
 80a1f22:	e7f4      	b.n	80a1f0e <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a1f24:	463a      	mov	r2, r7
 80a1f26:	4633      	mov	r3, r6
 80a1f28:	f000 fde0 	bl	80a2aec <__adddf3>
 80a1f2c:	460f      	mov	r7, r1
 80a1f2e:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a1f30:	f001 fa66 	bl	80a3400 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a1f34:	220a      	movs	r2, #10
 80a1f36:	4601      	mov	r1, r0
 80a1f38:	4681      	mov	r9, r0
 80a1f3a:	4640      	mov	r0, r8
 80a1f3c:	f7ff ff7b 	bl	80a1e36 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a1f40:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a1f42:	b3e5      	cbz	r5, 80a1fbe <_ZN5Print10printFloatEdh+0x14a>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a1f44:	4648      	mov	r0, r9
 80a1f46:	f000 ff0d 	bl	80a2d64 <__aeabi_ui2d>
 80a1f4a:	4602      	mov	r2, r0
 80a1f4c:	460b      	mov	r3, r1
 80a1f4e:	4630      	mov	r0, r6
 80a1f50:	4639      	mov	r1, r7
 80a1f52:	f000 fdc9 	bl	80a2ae8 <__aeabi_dsub>
 80a1f56:	4606      	mov	r6, r0
 80a1f58:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1f5a:	4640      	mov	r0, r8
 80a1f5c:	4921      	ldr	r1, [pc, #132]	; (80a1fe4 <_ZN5Print10printFloatEdh+0x170>)
 80a1f5e:	f7ff ff3d 	bl	80a1ddc <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a1f62:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a1f64:	2200      	movs	r2, #0
 80a1f66:	4b1e      	ldr	r3, [pc, #120]	; (80a1fe0 <_ZN5Print10printFloatEdh+0x16c>)
 80a1f68:	4630      	mov	r0, r6
 80a1f6a:	4639      	mov	r1, r7
 80a1f6c:	f000 ff70 	bl	80a2e50 <__aeabi_dmul>
 80a1f70:	4606      	mov	r6, r0
 80a1f72:	460f      	mov	r7, r1
    int toPrint = int(remainder);
 80a1f74:	f001 fa1c 	bl	80a33b0 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 80a1f78:	f1b0 0a00 	subs.w	sl, r0, #0
 80a1f7c:	da07      	bge.n	80a1f8e <_ZN5Print10printFloatEdh+0x11a>
            t = print('-');
 80a1f7e:	212d      	movs	r1, #45	; 0x2d
 80a1f80:	4640      	mov	r0, r8
 80a1f82:	f7ff ff3f 	bl	80a1e04 <_ZN5Print5printEc>
            val = -n;
 80a1f86:	f1ca 0100 	rsb	r1, sl, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
 80a1f8a:	4681      	mov	r9, r0
 80a1f8c:	e002      	b.n	80a1f94 <_ZN5Print10printFloatEdh+0x120>
            val = -n;
        } else {
            val = n;
 80a1f8e:	4651      	mov	r1, sl
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
 80a1f90:	f04f 0900 	mov.w	r9, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a1f94:	220a      	movs	r2, #10
 80a1f96:	4640      	mov	r0, r8
 80a1f98:	f7ff ff4d 	bl	80a1e36 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
 80a1f9c:	4448      	add	r0, r9
 80a1f9e:	4404      	add	r4, r0
    remainder -= toPrint;
 80a1fa0:	4650      	mov	r0, sl
 80a1fa2:	f000 feef 	bl	80a2d84 <__aeabi_i2d>
 80a1fa6:	4602      	mov	r2, r0
 80a1fa8:	460b      	mov	r3, r1
 80a1faa:	4630      	mov	r0, r6
 80a1fac:	4639      	mov	r1, r7
 80a1fae:	f000 fd9b 	bl	80a2ae8 <__aeabi_dsub>
 80a1fb2:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a1fb4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a1fb8:	4606      	mov	r6, r0
 80a1fba:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a1fbc:	d1d2      	bne.n	80a1f64 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a1fbe:	4620      	mov	r0, r4
 80a1fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1fc4:	080a39d0 	.word	0x080a39d0
 80a1fc8:	7fefffff 	.word	0x7fefffff
 80a1fcc:	080a39da 	.word	0x080a39da
 80a1fd0:	41efffff 	.word	0x41efffff
 80a1fd4:	080a39d4 	.word	0x080a39d4
 80a1fd8:	c1efffff 	.word	0xc1efffff
 80a1fdc:	3fe00000 	.word	0x3fe00000
 80a1fe0:	40240000 	.word	0x40240000
 80a1fe4:	080a39d8 	.word	0x080a39d8

080a1fe8 <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
 80a1fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1fea:	4605      	mov	r5, r0
 80a1fec:	4614      	mov	r4, r2
  return printFloat((double)n, digits);
 80a1fee:	4608      	mov	r0, r1
 80a1ff0:	f000 feda 	bl	80a2da8 <__aeabi_f2d>
 80a1ff4:	b2e4      	uxtb	r4, r4
 80a1ff6:	4602      	mov	r2, r0
 80a1ff8:	9400      	str	r4, [sp, #0]
 80a1ffa:	460b      	mov	r3, r1
 80a1ffc:	4628      	mov	r0, r5
 80a1ffe:	f7ff ff39 	bl	80a1e74 <_ZN5Print10printFloatEdh>
}
 80a2002:	b003      	add	sp, #12
 80a2004:	bd30      	pop	{r4, r5, pc}

080a2006 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2006:	b510      	push	{r4, lr}
 80a2008:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a200a:	f7ff fdb4 	bl	80a1b76 <_ZNSt14_Function_baseD1Ev>
 80a200e:	4620      	mov	r0, r4
 80a2010:	bd10      	pop	{r4, pc}
	...

080a2014 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2014:	4803      	ldr	r0, [pc, #12]	; (80a2024 <_GLOBAL__sub_I_RGB+0x10>)
 80a2016:	2300      	movs	r3, #0
 80a2018:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a201a:	4a03      	ldr	r2, [pc, #12]	; (80a2028 <_GLOBAL__sub_I_RGB+0x14>)
 80a201c:	4903      	ldr	r1, [pc, #12]	; (80a202c <_GLOBAL__sub_I_RGB+0x18>)
 80a201e:	f000 bb6b 	b.w	80a26f8 <__aeabi_atexit>
 80a2022:	bf00      	nop
 80a2024:	200000c8 	.word	0x200000c8
 80a2028:	20000090 	.word	0x20000090
 80a202c:	080a2007 	.word	0x080a2007

080a2030 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a2030:	b570      	push	{r4, r5, r6, lr}
 80a2032:	4604      	mov	r4, r0
 80a2034:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a2036:	2500      	movs	r5, #0
 80a2038:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a203c:	f7ff fbde 	bl	80a17fc <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a2040:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a2042:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a2044:	f7ff fc6c 	bl	80a1920 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a2048:	6065      	str	r5, [r4, #4]
}
 80a204a:	4620      	mov	r0, r4
 80a204c:	bd70      	pop	{r4, r5, r6, pc}

080a204e <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a204e:	7800      	ldrb	r0, [r0, #0]
 80a2050:	f7ff bc6e 	b.w	80a1930 <HAL_SPI_Is_Enabled>

080a2054 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a2054:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a2058:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a205a:	4c08      	ldr	r4, [pc, #32]	; (80a207c <_GLOBAL__sub_I_System+0x28>)
 80a205c:	2000      	movs	r0, #0
 80a205e:	6020      	str	r0, [r4, #0]
 80a2060:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a2062:	71a0      	strb	r0, [r4, #6]
 80a2064:	8120      	strh	r0, [r4, #8]
 80a2066:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2068:	f7ff fcea 	bl	80a1a40 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a206c:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a206e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a2072:	4a03      	ldr	r2, [pc, #12]	; (80a2080 <_GLOBAL__sub_I_System+0x2c>)
 80a2074:	4903      	ldr	r1, [pc, #12]	; (80a2084 <_GLOBAL__sub_I_System+0x30>)
 80a2076:	f000 bb3f 	b.w	80a26f8 <__aeabi_atexit>
 80a207a:	bf00      	nop
 80a207c:	200000d8 	.word	0x200000d8
 80a2080:	20000090 	.word	0x20000090
 80a2084:	080a00b7 	.word	0x080a00b7

080a2088 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2088:	4b02      	ldr	r3, [pc, #8]	; (80a2094 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a208a:	681a      	ldr	r2, [r3, #0]
 80a208c:	4b02      	ldr	r3, [pc, #8]	; (80a2098 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a208e:	601a      	str	r2, [r3, #0]
 80a2090:	4770      	bx	lr
 80a2092:	bf00      	nop
 80a2094:	20000028 	.word	0x20000028
 80a2098:	200000e4 	.word	0x200000e4

080a209c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a209c:	4770      	bx	lr

080a209e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a209e:	7441      	strb	r1, [r0, #17]
 80a20a0:	4770      	bx	lr

080a20a2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a20a2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a20a4:	7c00      	ldrb	r0, [r0, #16]
 80a20a6:	f7ff fc83 	bl	80a19b0 <HAL_USART_Available_Data_For_Write>
}
 80a20aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a20ae:	bd08      	pop	{r3, pc}

080a20b0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a20b0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a20b2:	7c00      	ldrb	r0, [r0, #16]
 80a20b4:	f7ff fc54 	bl	80a1960 <HAL_USART_Available_Data>
}
 80a20b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a20bc:	bd08      	pop	{r3, pc}

080a20be <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a20be:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a20c0:	7c00      	ldrb	r0, [r0, #16]
 80a20c2:	f7ff fc5d 	bl	80a1980 <HAL_USART_Peek_Data>
}
 80a20c6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a20ca:	bf28      	it	cs
 80a20cc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a20d0:	bd08      	pop	{r3, pc}

080a20d2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a20d2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a20d4:	7c00      	ldrb	r0, [r0, #16]
 80a20d6:	f7ff fc4b 	bl	80a1970 <HAL_USART_Read_Data>
}
 80a20da:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a20de:	bf28      	it	cs
 80a20e0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a20e4:	bd08      	pop	{r3, pc}

080a20e6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a20e6:	7c00      	ldrb	r0, [r0, #16]
 80a20e8:	f7ff bc52 	b.w	80a1990 <HAL_USART_Flush_Data>

080a20ec <_ZN11USARTSerialD0Ev>:
 80a20ec:	b510      	push	{r4, lr}
 80a20ee:	4604      	mov	r4, r0
 80a20f0:	2114      	movs	r1, #20
 80a20f2:	f000 fb06 	bl	80a2702 <_ZdlPvj>
 80a20f6:	4620      	mov	r0, r4
 80a20f8:	bd10      	pop	{r4, pc}

080a20fa <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a20fa:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a20fc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a20fe:	4604      	mov	r4, r0
 80a2100:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2102:	b925      	cbnz	r5, 80a210e <_ZN11USARTSerial5writeEh+0x14>
 80a2104:	7c00      	ldrb	r0, [r0, #16]
 80a2106:	f7ff fc53 	bl	80a19b0 <HAL_USART_Available_Data_For_Write>
 80a210a:	2800      	cmp	r0, #0
 80a210c:	dd05      	ble.n	80a211a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a210e:	4631      	mov	r1, r6
 80a2110:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2116:	f7ff bc1b 	b.w	80a1950 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a211a:	4628      	mov	r0, r5
 80a211c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2120 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2120:	b510      	push	{r4, lr}
 80a2122:	4604      	mov	r4, r0
 80a2124:	4608      	mov	r0, r1
 80a2126:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2128:	2200      	movs	r2, #0
 80a212a:	6062      	str	r2, [r4, #4]
 80a212c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2130:	60a2      	str	r2, [r4, #8]
 80a2132:	4a05      	ldr	r2, [pc, #20]	; (80a2148 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2134:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2136:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2138:	2201      	movs	r2, #1
 80a213a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a213c:	461a      	mov	r2, r3
 80a213e:	f7ff fbff 	bl	80a1940 <HAL_USART_Init>
}
 80a2142:	4620      	mov	r0, r4
 80a2144:	bd10      	pop	{r4, pc}
 80a2146:	bf00      	nop
 80a2148:	080a3a10 	.word	0x080a3a10

080a214c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a214c:	7c00      	ldrb	r0, [r0, #16]
 80a214e:	f7ff bc27 	b.w	80a19a0 <HAL_USART_Is_Enabled>
	...

080a2154 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a2156:	4c19      	ldr	r4, [pc, #100]	; (80a21bc <_Z22__fetch_global_Serial1v+0x68>)
 80a2158:	6825      	ldr	r5, [r4, #0]
 80a215a:	b94d      	cbnz	r5, 80a2170 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a215c:	2084      	movs	r0, #132	; 0x84
 80a215e:	f7fd ff9e 	bl	80a009e <_Znwj>
 80a2162:	4606      	mov	r6, r0
 80a2164:	b118      	cbz	r0, 80a216e <_Z22__fetch_global_Serial1v+0x1a>
 80a2166:	2284      	movs	r2, #132	; 0x84
 80a2168:	4629      	mov	r1, r5
 80a216a:	f001 fb22 	bl	80a37b2 <memset>
 80a216e:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a2170:	4d13      	ldr	r5, [pc, #76]	; (80a21c0 <_Z22__fetch_global_Serial1v+0x6c>)
 80a2172:	682e      	ldr	r6, [r5, #0]
 80a2174:	b94e      	cbnz	r6, 80a218a <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a2176:	2084      	movs	r0, #132	; 0x84
 80a2178:	f7fd ff91 	bl	80a009e <_Znwj>
 80a217c:	4607      	mov	r7, r0
 80a217e:	b118      	cbz	r0, 80a2188 <_Z22__fetch_global_Serial1v+0x34>
 80a2180:	2284      	movs	r2, #132	; 0x84
 80a2182:	4631      	mov	r1, r6
 80a2184:	f001 fb15 	bl	80a37b2 <memset>
 80a2188:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a218a:	4f0e      	ldr	r7, [pc, #56]	; (80a21c4 <_Z22__fetch_global_Serial1v+0x70>)
 80a218c:	6839      	ldr	r1, [r7, #0]
 80a218e:	f011 0601 	ands.w	r6, r1, #1
 80a2192:	d111      	bne.n	80a21b8 <_Z22__fetch_global_Serial1v+0x64>
 80a2194:	4638      	mov	r0, r7
 80a2196:	f7fd ff86 	bl	80a00a6 <__cxa_guard_acquire>
 80a219a:	b168      	cbz	r0, 80a21b8 <_Z22__fetch_global_Serial1v+0x64>
 80a219c:	6822      	ldr	r2, [r4, #0]
 80a219e:	4631      	mov	r1, r6
 80a21a0:	682b      	ldr	r3, [r5, #0]
 80a21a2:	4809      	ldr	r0, [pc, #36]	; (80a21c8 <_Z22__fetch_global_Serial1v+0x74>)
 80a21a4:	f7ff ffbc 	bl	80a2120 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a21a8:	4638      	mov	r0, r7
 80a21aa:	f7fd ff81 	bl	80a00b0 <__cxa_guard_release>
 80a21ae:	4a07      	ldr	r2, [pc, #28]	; (80a21cc <_Z22__fetch_global_Serial1v+0x78>)
 80a21b0:	4907      	ldr	r1, [pc, #28]	; (80a21d0 <_Z22__fetch_global_Serial1v+0x7c>)
 80a21b2:	4805      	ldr	r0, [pc, #20]	; (80a21c8 <_Z22__fetch_global_Serial1v+0x74>)
 80a21b4:	f000 faa0 	bl	80a26f8 <__aeabi_atexit>
#endif
	return serial1;
}
 80a21b8:	4803      	ldr	r0, [pc, #12]	; (80a21c8 <_Z22__fetch_global_Serial1v+0x74>)
 80a21ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a21bc:	20000104 	.word	0x20000104
 80a21c0:	200000fc 	.word	0x200000fc
 80a21c4:	20000100 	.word	0x20000100
 80a21c8:	200000e8 	.word	0x200000e8
 80a21cc:	20000090 	.word	0x20000090
 80a21d0:	080a209d 	.word	0x080a209d

080a21d4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a21d4:	7441      	strb	r1, [r0, #17]
 80a21d6:	4770      	bx	lr

080a21d8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a21d8:	4770      	bx	lr

080a21da <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a21da:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a21dc:	2100      	movs	r1, #0
 80a21de:	7c00      	ldrb	r0, [r0, #16]
 80a21e0:	f7ff fc0e 	bl	80a1a00 <HAL_USB_USART_Receive_Data>
}
 80a21e4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a21e8:	bf28      	it	cs
 80a21ea:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a21ee:	bd08      	pop	{r3, pc}

080a21f0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a21f0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a21f2:	2101      	movs	r1, #1
 80a21f4:	7c00      	ldrb	r0, [r0, #16]
 80a21f6:	f7ff fc03 	bl	80a1a00 <HAL_USB_USART_Receive_Data>
}
 80a21fa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a21fe:	bf28      	it	cs
 80a2200:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a2204:	bd08      	pop	{r3, pc}

080a2206 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a2206:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2208:	7c00      	ldrb	r0, [r0, #16]
 80a220a:	f7ff fbf1 	bl	80a19f0 <HAL_USB_USART_Available_Data_For_Write>
}
 80a220e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2212:	bd08      	pop	{r3, pc}

080a2214 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a2214:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2216:	7c00      	ldrb	r0, [r0, #16]
 80a2218:	f7ff fbe2 	bl	80a19e0 <HAL_USB_USART_Available_Data>
}
 80a221c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2220:	bd08      	pop	{r3, pc}

080a2222 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a2222:	7c00      	ldrb	r0, [r0, #16]
 80a2224:	f7ff bbfc 	b.w	80a1a20 <HAL_USB_USART_Flush_Data>

080a2228 <_ZN9USBSerialD0Ev>:
 80a2228:	b510      	push	{r4, lr}
 80a222a:	4604      	mov	r4, r0
 80a222c:	2114      	movs	r1, #20
 80a222e:	f000 fa68 	bl	80a2702 <_ZdlPvj>
 80a2232:	4620      	mov	r0, r4
 80a2234:	bd10      	pop	{r4, pc}

080a2236 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2236:	b538      	push	{r3, r4, r5, lr}
 80a2238:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a223a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a223c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a223e:	f7ff fbd7 	bl	80a19f0 <HAL_USB_USART_Available_Data_For_Write>
 80a2242:	2800      	cmp	r0, #0
 80a2244:	dc01      	bgt.n	80a224a <_ZN9USBSerial5writeEh+0x14>
 80a2246:	7c60      	ldrb	r0, [r4, #17]
 80a2248:	b128      	cbz	r0, 80a2256 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a224a:	4629      	mov	r1, r5
 80a224c:	7c20      	ldrb	r0, [r4, #16]
 80a224e:	f7ff fbdf 	bl	80a1a10 <HAL_USB_USART_Send_Data>
 80a2252:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a2256:	bd38      	pop	{r3, r4, r5, pc}

080a2258 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2258:	b510      	push	{r4, lr}
 80a225a:	4604      	mov	r4, r0
 80a225c:	2300      	movs	r3, #0
 80a225e:	6063      	str	r3, [r4, #4]
 80a2260:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2264:	60a3      	str	r3, [r4, #8]
 80a2266:	4b05      	ldr	r3, [pc, #20]	; (80a227c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2268:	4608      	mov	r0, r1
 80a226a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a226c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a226e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2270:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a2272:	4611      	mov	r1, r2
 80a2274:	f7ff fba4 	bl	80a19c0 <HAL_USB_USART_Init>
}
 80a2278:	4620      	mov	r0, r4
 80a227a:	bd10      	pop	{r4, pc}
 80a227c:	080a3a40 	.word	0x080a3a40

080a2280 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2280:	2200      	movs	r2, #0
 80a2282:	7c00      	ldrb	r0, [r0, #16]
 80a2284:	f7ff bba4 	b.w	80a19d0 <HAL_USB_USART_Begin>

080a2288 <_Z19acquireSerialBufferv>:
 80a2288:	b510      	push	{r4, lr}
 80a228a:	4604      	mov	r4, r0
 80a228c:	2214      	movs	r2, #20
 80a228e:	2100      	movs	r1, #0
 80a2290:	f001 fa8f 	bl	80a37b2 <memset>
 80a2294:	4620      	mov	r0, r4
 80a2296:	bd10      	pop	{r4, pc}

080a2298 <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2298:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a229a:	4d0e      	ldr	r5, [pc, #56]	; (80a22d4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a229c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a229e:	a801      	add	r0, sp, #4
 80a22a0:	f7ff fff2 	bl	80a2288 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a22a4:	6829      	ldr	r1, [r5, #0]
 80a22a6:	f011 0401 	ands.w	r4, r1, #1
 80a22aa:	d110      	bne.n	80a22ce <_Z16_fetch_usbserialv+0x36>
 80a22ac:	4628      	mov	r0, r5
 80a22ae:	f7fd fefa 	bl	80a00a6 <__cxa_guard_acquire>
 80a22b2:	b160      	cbz	r0, 80a22ce <_Z16_fetch_usbserialv+0x36>
 80a22b4:	aa01      	add	r2, sp, #4
 80a22b6:	4621      	mov	r1, r4
 80a22b8:	4807      	ldr	r0, [pc, #28]	; (80a22d8 <_Z16_fetch_usbserialv+0x40>)
 80a22ba:	f7ff ffcd 	bl	80a2258 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a22be:	4628      	mov	r0, r5
 80a22c0:	f7fd fef6 	bl	80a00b0 <__cxa_guard_release>
 80a22c4:	4a05      	ldr	r2, [pc, #20]	; (80a22dc <_Z16_fetch_usbserialv+0x44>)
 80a22c6:	4906      	ldr	r1, [pc, #24]	; (80a22e0 <_Z16_fetch_usbserialv+0x48>)
 80a22c8:	4803      	ldr	r0, [pc, #12]	; (80a22d8 <_Z16_fetch_usbserialv+0x40>)
 80a22ca:	f000 fa15 	bl	80a26f8 <__aeabi_atexit>
	return _usbserial;
}
 80a22ce:	4802      	ldr	r0, [pc, #8]	; (80a22d8 <_Z16_fetch_usbserialv+0x40>)
 80a22d0:	b007      	add	sp, #28
 80a22d2:	bd30      	pop	{r4, r5, pc}
 80a22d4:	20000108 	.word	0x20000108
 80a22d8:	20000110 	.word	0x20000110
 80a22dc:	20000090 	.word	0x20000090
 80a22e0:	080a21d9 	.word	0x080a21d9

080a22e4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a22e4:	b510      	push	{r4, lr}
 80a22e6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a22e8:	2214      	movs	r2, #20
 80a22ea:	2100      	movs	r1, #0
 80a22ec:	f001 fa61 	bl	80a37b2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a22f0:	4620      	mov	r0, r4
 80a22f2:	bd10      	pop	{r4, pc}

080a22f4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a22f4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a22f6:	4c0e      	ldr	r4, [pc, #56]	; (80a2330 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a22f8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a22fa:	a801      	add	r0, sp, #4
 80a22fc:	f7ff fff2 	bl	80a22e4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2300:	6823      	ldr	r3, [r4, #0]
 80a2302:	07db      	lsls	r3, r3, #31
 80a2304:	d410      	bmi.n	80a2328 <_Z17_fetch_usbserial1v+0x34>
 80a2306:	4620      	mov	r0, r4
 80a2308:	f7fd fecd 	bl	80a00a6 <__cxa_guard_acquire>
 80a230c:	b160      	cbz	r0, 80a2328 <_Z17_fetch_usbserial1v+0x34>
 80a230e:	aa01      	add	r2, sp, #4
 80a2310:	2101      	movs	r1, #1
 80a2312:	4808      	ldr	r0, [pc, #32]	; (80a2334 <_Z17_fetch_usbserial1v+0x40>)
 80a2314:	f7ff ffa0 	bl	80a2258 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2318:	4620      	mov	r0, r4
 80a231a:	f7fd fec9 	bl	80a00b0 <__cxa_guard_release>
 80a231e:	4a06      	ldr	r2, [pc, #24]	; (80a2338 <_Z17_fetch_usbserial1v+0x44>)
 80a2320:	4906      	ldr	r1, [pc, #24]	; (80a233c <_Z17_fetch_usbserial1v+0x48>)
 80a2322:	4804      	ldr	r0, [pc, #16]	; (80a2334 <_Z17_fetch_usbserial1v+0x40>)
 80a2324:	f000 f9e8 	bl	80a26f8 <__aeabi_atexit>
  return _usbserial1;
}
 80a2328:	4802      	ldr	r0, [pc, #8]	; (80a2334 <_Z17_fetch_usbserial1v+0x40>)
 80a232a:	b006      	add	sp, #24
 80a232c:	bd10      	pop	{r4, pc}
 80a232e:	bf00      	nop
 80a2330:	2000010c 	.word	0x2000010c
 80a2334:	20000124 	.word	0x20000124
 80a2338:	20000090 	.word	0x20000090
 80a233c:	080a21d9 	.word	0x080a21d9

080a2340 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2340:	2200      	movs	r2, #0
 80a2342:	4611      	mov	r1, r2
 80a2344:	6840      	ldr	r0, [r0, #4]
 80a2346:	f7ff bbbf 	b.w	80a1ac8 <network_ready>

080a234a <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a234a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a234c:	4616      	mov	r6, r2
 80a234e:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2350:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2352:	460f      	mov	r7, r1
 80a2354:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a2356:	2100      	movs	r1, #0
 80a2358:	a803      	add	r0, sp, #12
 80a235a:	f001 fa2a 	bl	80a37b2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a235e:	4630      	mov	r0, r6
 80a2360:	f001 fa58 	bl	80a3814 <strlen>
 80a2364:	2500      	movs	r5, #0
 80a2366:	9500      	str	r5, [sp, #0]
 80a2368:	b281      	uxth	r1, r0
 80a236a:	687b      	ldr	r3, [r7, #4]
 80a236c:	aa03      	add	r2, sp, #12
 80a236e:	4630      	mov	r0, r6
 80a2370:	f7ff fb5e 	bl	80a1a30 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2374:	b120      	cbz	r0, 80a2380 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a2376:	4629      	mov	r1, r5
 80a2378:	4620      	mov	r0, r4
 80a237a:	f7ff fc89 	bl	80a1c90 <_ZN9IPAddressC1Em>
 80a237e:	e003      	b.n	80a2388 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a2380:	a903      	add	r1, sp, #12
 80a2382:	4620      	mov	r0, r4
 80a2384:	f7ff fc72 	bl	80a1c6c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a2388:	4620      	mov	r0, r4
 80a238a:	b009      	add	sp, #36	; 0x24
 80a238c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a238e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a238e:	2200      	movs	r2, #0
 80a2390:	4611      	mov	r1, r2
 80a2392:	6840      	ldr	r0, [r0, #4]
 80a2394:	f7ff bbb8 	b.w	80a1b08 <network_listening>

080a2398 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a2398:	2200      	movs	r2, #0
 80a239a:	4611      	mov	r1, r2
 80a239c:	6840      	ldr	r0, [r0, #4]
 80a239e:	f7ff bbc3 	b.w	80a1b28 <network_get_listen_timeout>

080a23a2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a23a2:	2200      	movs	r2, #0
 80a23a4:	6840      	ldr	r0, [r0, #4]
 80a23a6:	f7ff bbb7 	b.w	80a1b18 <network_set_listen_timeout>

080a23aa <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a23aa:	2200      	movs	r2, #0
 80a23ac:	f081 0101 	eor.w	r1, r1, #1
 80a23b0:	6840      	ldr	r0, [r0, #4]
 80a23b2:	f7ff bba1 	b.w	80a1af8 <network_listen>

080a23b6 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a23b6:	2300      	movs	r3, #0
 80a23b8:	461a      	mov	r2, r3
 80a23ba:	4619      	mov	r1, r3
 80a23bc:	6840      	ldr	r0, [r0, #4]
 80a23be:	f7ff bb93 	b.w	80a1ae8 <network_off>

080a23c2 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a23c2:	2300      	movs	r3, #0
 80a23c4:	461a      	mov	r2, r3
 80a23c6:	4619      	mov	r1, r3
 80a23c8:	6840      	ldr	r0, [r0, #4]
 80a23ca:	f7ff bb85 	b.w	80a1ad8 <network_on>

080a23ce <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a23ce:	2200      	movs	r2, #0
 80a23d0:	4611      	mov	r1, r2
 80a23d2:	6840      	ldr	r0, [r0, #4]
 80a23d4:	f7ff bb68 	b.w	80a1aa8 <network_connecting>

080a23d8 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a23d8:	2200      	movs	r2, #0
 80a23da:	2102      	movs	r1, #2
 80a23dc:	6840      	ldr	r0, [r0, #4]
 80a23de:	f7ff bb6b 	b.w	80a1ab8 <network_disconnect>

080a23e2 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a23e2:	2300      	movs	r3, #0
 80a23e4:	461a      	mov	r2, r3
 80a23e6:	6840      	ldr	r0, [r0, #4]
 80a23e8:	f7ff bb56 	b.w	80a1a98 <network_connect>

080a23ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a23ec:	4b02      	ldr	r3, [pc, #8]	; (80a23f8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a23ee:	2204      	movs	r2, #4
 80a23f0:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a23f2:	4a02      	ldr	r2, [pc, #8]	; (80a23fc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a23f4:	601a      	str	r2, [r3, #0]
 80a23f6:	4770      	bx	lr
 80a23f8:	20000138 	.word	0x20000138
 80a23fc:	080a3a70 	.word	0x080a3a70

080a2400 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2400:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2402:	4b14      	ldr	r3, [pc, #80]	; (80a2454 <serialEventRun+0x54>)
 80a2404:	b133      	cbz	r3, 80a2414 <serialEventRun+0x14>
 80a2406:	f7ff ff47 	bl	80a2298 <_Z16_fetch_usbserialv>
 80a240a:	6803      	ldr	r3, [r0, #0]
 80a240c:	691b      	ldr	r3, [r3, #16]
 80a240e:	4798      	blx	r3
 80a2410:	2800      	cmp	r0, #0
 80a2412:	dc16      	bgt.n	80a2442 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2414:	4b10      	ldr	r3, [pc, #64]	; (80a2458 <serialEventRun+0x58>)
 80a2416:	b133      	cbz	r3, 80a2426 <serialEventRun+0x26>
 80a2418:	f7ff fe9c 	bl	80a2154 <_Z22__fetch_global_Serial1v>
 80a241c:	6803      	ldr	r3, [r0, #0]
 80a241e:	691b      	ldr	r3, [r3, #16]
 80a2420:	4798      	blx	r3
 80a2422:	2800      	cmp	r0, #0
 80a2424:	dc10      	bgt.n	80a2448 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a2426:	4b0d      	ldr	r3, [pc, #52]	; (80a245c <serialEventRun+0x5c>)
 80a2428:	b10b      	cbz	r3, 80a242e <serialEventRun+0x2e>
 80a242a:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a242e:	4b0c      	ldr	r3, [pc, #48]	; (80a2460 <serialEventRun+0x60>)
 80a2430:	b17b      	cbz	r3, 80a2452 <serialEventRun+0x52>
 80a2432:	f7ff ff5f 	bl	80a22f4 <_Z17_fetch_usbserial1v>
 80a2436:	6803      	ldr	r3, [r0, #0]
 80a2438:	691b      	ldr	r3, [r3, #16]
 80a243a:	4798      	blx	r3
 80a243c:	2800      	cmp	r0, #0
 80a243e:	dc06      	bgt.n	80a244e <serialEventRun+0x4e>
 80a2440:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2442:	f3af 8000 	nop.w
 80a2446:	e7e5      	b.n	80a2414 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2448:	f3af 8000 	nop.w
 80a244c:	e7eb      	b.n	80a2426 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a244e:	f3af 8000 	nop.w
 80a2452:	bd08      	pop	{r3, pc}
	...

080a2464 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2464:	b508      	push	{r3, lr}
	serialEventRun();
 80a2466:	f7ff ffcb 	bl	80a2400 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a246a:	f7ff f9e7 	bl	80a183c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a246e:	4b01      	ldr	r3, [pc, #4]	; (80a2474 <_post_loop+0x10>)
 80a2470:	6018      	str	r0, [r3, #0]
 80a2472:	bd08      	pop	{r3, pc}
 80a2474:	20000158 	.word	0x20000158

080a2478 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2478:	4802      	ldr	r0, [pc, #8]	; (80a2484 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a247a:	4a03      	ldr	r2, [pc, #12]	; (80a2488 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a247c:	4903      	ldr	r1, [pc, #12]	; (80a248c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a247e:	1a12      	subs	r2, r2, r0
 80a2480:	f001 b98c 	b.w	80a379c <memcpy>
 80a2484:	40024000 	.word	0x40024000
 80a2488:	40024004 	.word	0x40024004
 80a248c:	080a3b40 	.word	0x080a3b40

080a2490 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2490:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2492:	2300      	movs	r3, #0
 80a2494:	9300      	str	r3, [sp, #0]
 80a2496:	461a      	mov	r2, r3
 80a2498:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a249c:	f7ff faea 	bl	80a1a74 <system_ctrl_set_result>
}
 80a24a0:	b003      	add	sp, #12
 80a24a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a24a8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a24a8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a24aa:	8843      	ldrh	r3, [r0, #2]
 80a24ac:	2b0a      	cmp	r3, #10
 80a24ae:	d008      	beq.n	80a24c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a24b0:	2b50      	cmp	r3, #80	; 0x50
 80a24b2:	d109      	bne.n	80a24c8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a24b4:	4b09      	ldr	r3, [pc, #36]	; (80a24dc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a24b6:	681b      	ldr	r3, [r3, #0]
 80a24b8:	b13b      	cbz	r3, 80a24ca <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a24ba:	b003      	add	sp, #12
 80a24bc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a24c0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a24c2:	f7ff ffe5 	bl	80a2490 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a24c6:	e006      	b.n	80a24d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a24c8:	2300      	movs	r3, #0
 80a24ca:	9300      	str	r3, [sp, #0]
 80a24cc:	461a      	mov	r2, r3
 80a24ce:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a24d2:	f7ff facf 	bl	80a1a74 <system_ctrl_set_result>
        break;
    }
}
 80a24d6:	b003      	add	sp, #12
 80a24d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80a24dc:	20000140 	.word	0x20000140

080a24e0 <module_user_init_hook>:

void module_user_init_hook()
{
 80a24e0:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a24e2:	4c10      	ldr	r4, [pc, #64]	; (80a2524 <module_user_init_hook+0x44>)
 80a24e4:	4d10      	ldr	r5, [pc, #64]	; (80a2528 <module_user_init_hook+0x48>)
 80a24e6:	6823      	ldr	r3, [r4, #0]
 80a24e8:	42ab      	cmp	r3, r5
 80a24ea:	4b10      	ldr	r3, [pc, #64]	; (80a252c <module_user_init_hook+0x4c>)
 80a24ec:	bf0c      	ite	eq
 80a24ee:	2201      	moveq	r2, #1
 80a24f0:	2200      	movne	r2, #0
 80a24f2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a24f4:	d002      	beq.n	80a24fc <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a24f6:	f7ff ffbf 	bl	80a2478 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a24fa:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a24fc:	f7ff f98e 	bl	80a181c <HAL_RNG_GetRandomNumber>
 80a2500:	4604      	mov	r4, r0
    srand(seed);
 80a2502:	f001 f95f 	bl	80a37c4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2506:	4b0a      	ldr	r3, [pc, #40]	; (80a2530 <module_user_init_hook+0x50>)
 80a2508:	b113      	cbz	r3, 80a2510 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a250a:	4620      	mov	r0, r4
 80a250c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2510:	2100      	movs	r1, #0
 80a2512:	4807      	ldr	r0, [pc, #28]	; (80a2530 <module_user_init_hook+0x50>)
 80a2514:	f7ff fab8 	bl	80a1a88 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a251c:	2100      	movs	r1, #0
 80a251e:	4805      	ldr	r0, [pc, #20]	; (80a2534 <module_user_init_hook+0x54>)
 80a2520:	f7ff ba9e 	b.w	80a1a60 <system_ctrl_set_app_request_handler>
 80a2524:	40024000 	.word	0x40024000
 80a2528:	9a271c1e 	.word	0x9a271c1e
 80a252c:	20000144 	.word	0x20000144
 80a2530:	00000000 	.word	0x00000000
 80a2534:	080a24a9 	.word	0x080a24a9

080a2538 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a2538:	b510      	push	{r4, lr}
 80a253a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a253c:	6880      	ldr	r0, [r0, #8]
 80a253e:	b108      	cbz	r0, 80a2544 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a2540:	f7ff f964 	bl	80a180c <os_mutex_recursive_destroy>
 80a2544:	4620      	mov	r0, r4
 80a2546:	bd10      	pop	{r4, pc}

080a2548 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2548:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a254a:	4e1a      	ldr	r6, [pc, #104]	; (80a25b4 <pinAvailable+0x6c>)
 80a254c:	4604      	mov	r4, r0
 80a254e:	6831      	ldr	r1, [r6, #0]
 80a2550:	f011 0501 	ands.w	r5, r1, #1
 80a2554:	d10f      	bne.n	80a2576 <pinAvailable+0x2e>
 80a2556:	4630      	mov	r0, r6
 80a2558:	f7fd fda5 	bl	80a00a6 <__cxa_guard_acquire>
 80a255c:	b158      	cbz	r0, 80a2576 <pinAvailable+0x2e>
 80a255e:	4629      	mov	r1, r5
 80a2560:	4815      	ldr	r0, [pc, #84]	; (80a25b8 <pinAvailable+0x70>)
 80a2562:	f7ff fd65 	bl	80a2030 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2566:	4630      	mov	r0, r6
 80a2568:	f7fd fda2 	bl	80a00b0 <__cxa_guard_release>
 80a256c:	4a13      	ldr	r2, [pc, #76]	; (80a25bc <pinAvailable+0x74>)
 80a256e:	4914      	ldr	r1, [pc, #80]	; (80a25c0 <pinAvailable+0x78>)
 80a2570:	4811      	ldr	r0, [pc, #68]	; (80a25b8 <pinAvailable+0x70>)
 80a2572:	f000 f8c1 	bl	80a26f8 <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a2576:	4810      	ldr	r0, [pc, #64]	; (80a25b8 <pinAvailable+0x70>)
 80a2578:	f7ff fd69 	bl	80a204e <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a257c:	b128      	cbz	r0, 80a258a <pinAvailable+0x42>
 80a257e:	f1a4 030d 	sub.w	r3, r4, #13
 80a2582:	2b02      	cmp	r3, #2
 80a2584:	d801      	bhi.n	80a258a <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a2586:	2000      	movs	r0, #0
 80a2588:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a258a:	f000 f877 	bl	80a267c <_Z19__fetch_global_Wirev>
 80a258e:	f7ff fb39 	bl	80a1c04 <_ZN7TwoWire9isEnabledEv>
 80a2592:	b108      	cbz	r0, 80a2598 <pinAvailable+0x50>
 80a2594:	2c01      	cmp	r4, #1
 80a2596:	d9f6      	bls.n	80a2586 <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a2598:	f7ff fddc 	bl	80a2154 <_Z22__fetch_global_Serial1v>
 80a259c:	f7ff fdd6 	bl	80a214c <_ZN11USARTSerial9isEnabledEv>
 80a25a0:	b118      	cbz	r0, 80a25aa <pinAvailable+0x62>
 80a25a2:	f1a4 0312 	sub.w	r3, r4, #18
 80a25a6:	2b01      	cmp	r3, #1
 80a25a8:	d9ed      	bls.n	80a2586 <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a25aa:	2c17      	cmp	r4, #23
 80a25ac:	bf8c      	ite	hi
 80a25ae:	2000      	movhi	r0, #0
 80a25b0:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a25b2:	bd70      	pop	{r4, r5, r6, pc}
 80a25b4:	20000148 	.word	0x20000148
 80a25b8:	2000014c 	.word	0x2000014c
 80a25bc:	20000090 	.word	0x20000090
 80a25c0:	080a2539 	.word	0x080a2539

080a25c4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a25c4:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a25c6:	b538      	push	{r3, r4, r5, lr}
 80a25c8:	4604      	mov	r4, r0
 80a25ca:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a25cc:	d80a      	bhi.n	80a25e4 <pinMode+0x20>
 80a25ce:	29ff      	cmp	r1, #255	; 0xff
 80a25d0:	d008      	beq.n	80a25e4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a25d2:	f7ff ffb9 	bl	80a2548 <pinAvailable>
 80a25d6:	b128      	cbz	r0, 80a25e4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a25d8:	4629      	mov	r1, r5
 80a25da:	4620      	mov	r0, r4
}
 80a25dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a25e0:	f7ff b944 	b.w	80a186c <HAL_Pin_Mode>
 80a25e4:	bd38      	pop	{r3, r4, r5, pc}

080a25e6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a25e6:	b538      	push	{r3, r4, r5, lr}
 80a25e8:	4604      	mov	r4, r0
 80a25ea:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a25ec:	f7ff f946 	bl	80a187c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a25f0:	28ff      	cmp	r0, #255	; 0xff
 80a25f2:	d010      	beq.n	80a2616 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a25f4:	2806      	cmp	r0, #6
 80a25f6:	d804      	bhi.n	80a2602 <digitalWrite+0x1c>
 80a25f8:	234d      	movs	r3, #77	; 0x4d
 80a25fa:	fa23 f000 	lsr.w	r0, r3, r0
 80a25fe:	07c3      	lsls	r3, r0, #31
 80a2600:	d409      	bmi.n	80a2616 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2602:	4620      	mov	r0, r4
 80a2604:	f7ff ffa0 	bl	80a2548 <pinAvailable>
 80a2608:	b128      	cbz	r0, 80a2616 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a260a:	4629      	mov	r1, r5
 80a260c:	4620      	mov	r0, r4
}
 80a260e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2612:	f7ff b93b 	b.w	80a188c <HAL_GPIO_Write>
 80a2616:	bd38      	pop	{r3, r4, r5, pc}

080a2618 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a2618:	b510      	push	{r4, lr}
 80a261a:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a261c:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a261e:	bf9c      	itt	ls
 80a2620:	340a      	addls	r4, #10
 80a2622:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2624:	4620      	mov	r0, r4
 80a2626:	f7ff ff8f 	bl	80a2548 <pinAvailable>
 80a262a:	b150      	cbz	r0, 80a2642 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a262c:	2103      	movs	r1, #3
 80a262e:	4620      	mov	r0, r4
 80a2630:	f7ff f914 	bl	80a185c <HAL_Validate_Pin_Function>
 80a2634:	2803      	cmp	r0, #3
 80a2636:	d104      	bne.n	80a2642 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a2638:	4620      	mov	r0, r4
}
 80a263a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a263e:	f7ff b92d 	b.w	80a189c <HAL_ADC_Read>
}
 80a2642:	2000      	movs	r0, #0
 80a2644:	bd10      	pop	{r4, pc}
	...

080a2648 <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a2648:	b570      	push	{r4, r5, r6, lr}
 80a264a:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a264c:	2514      	movs	r5, #20
 80a264e:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2650:	4e09      	ldr	r6, [pc, #36]	; (80a2678 <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2652:	2100      	movs	r1, #0
 80a2654:	f001 f8ad 	bl	80a37b2 <memset>
 80a2658:	8025      	strh	r5, [r4, #0]
 80a265a:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a265c:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a265e:	60a5      	str	r5, [r4, #8]
 80a2660:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2662:	4628      	mov	r0, r5
 80a2664:	f000 f867 	bl	80a2736 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2668:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a266a:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a266c:	4628      	mov	r0, r5
 80a266e:	f000 f862 	bl	80a2736 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2672:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a2674:	4620      	mov	r0, r4
 80a2676:	bd70      	pop	{r4, r5, r6, pc}
 80a2678:	080a3a9c 	.word	0x080a3a9c

080a267c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a267c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a267e:	4d0e      	ldr	r5, [pc, #56]	; (80a26b8 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a2680:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2682:	6829      	ldr	r1, [r5, #0]
 80a2684:	f011 0401 	ands.w	r4, r1, #1
 80a2688:	d113      	bne.n	80a26b2 <_Z19__fetch_global_Wirev+0x36>
 80a268a:	4628      	mov	r0, r5
 80a268c:	f7fd fd0b 	bl	80a00a6 <__cxa_guard_acquire>
 80a2690:	b178      	cbz	r0, 80a26b2 <_Z19__fetch_global_Wirev+0x36>
 80a2692:	a801      	add	r0, sp, #4
 80a2694:	f7ff ffd8 	bl	80a2648 <_Z17acquireWireBufferv>
 80a2698:	aa01      	add	r2, sp, #4
 80a269a:	4621      	mov	r1, r4
 80a269c:	4807      	ldr	r0, [pc, #28]	; (80a26bc <_Z19__fetch_global_Wirev+0x40>)
 80a269e:	f7ff fa9f 	bl	80a1be0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a26a2:	4628      	mov	r0, r5
 80a26a4:	f7fd fd04 	bl	80a00b0 <__cxa_guard_release>
 80a26a8:	4a05      	ldr	r2, [pc, #20]	; (80a26c0 <_Z19__fetch_global_Wirev+0x44>)
 80a26aa:	4906      	ldr	r1, [pc, #24]	; (80a26c4 <_Z19__fetch_global_Wirev+0x48>)
 80a26ac:	4803      	ldr	r0, [pc, #12]	; (80a26bc <_Z19__fetch_global_Wirev+0x40>)
 80a26ae:	f000 f823 	bl	80a26f8 <__aeabi_atexit>
	return wire;
}
 80a26b2:	4802      	ldr	r0, [pc, #8]	; (80a26bc <_Z19__fetch_global_Wirev+0x40>)
 80a26b4:	b007      	add	sp, #28
 80a26b6:	bd30      	pop	{r4, r5, pc}
 80a26b8:	2000015c 	.word	0x2000015c
 80a26bc:	20000160 	.word	0x20000160
 80a26c0:	20000090 	.word	0x20000090
 80a26c4:	080a1b89 	.word	0x080a1b89

080a26c8 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a26c8:	b513      	push	{r0, r1, r4, lr}
 80a26ca:	4c08      	ldr	r4, [pc, #32]	; (80a26ec <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a26cc:	2300      	movs	r3, #0
 80a26ce:	461a      	mov	r2, r3
 80a26d0:	4619      	mov	r1, r3
 80a26d2:	9300      	str	r3, [sp, #0]
 80a26d4:	4620      	mov	r0, r4
 80a26d6:	f7ff faf1 	bl	80a1cbc <_ZN9IPAddressC1Ehhhh>
 80a26da:	4620      	mov	r0, r4
 80a26dc:	4a04      	ldr	r2, [pc, #16]	; (80a26f0 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a26de:	4905      	ldr	r1, [pc, #20]	; (80a26f4 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a26e0:	b002      	add	sp, #8
 80a26e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a26e6:	f000 b807 	b.w	80a26f8 <__aeabi_atexit>
 80a26ea:	bf00      	nop
 80a26ec:	20000174 	.word	0x20000174
 80a26f0:	20000090 	.word	0x20000090
 80a26f4:	080a1c0d 	.word	0x080a1c0d

080a26f8 <__aeabi_atexit>:
 80a26f8:	460b      	mov	r3, r1
 80a26fa:	4601      	mov	r1, r0
 80a26fc:	4618      	mov	r0, r3
 80a26fe:	f001 b83f 	b.w	80a3780 <__cxa_atexit>

080a2702 <_ZdlPvj>:
 80a2702:	f7fd bcce 	b.w	80a00a2 <_ZdlPv>
	...

080a2708 <_ZSt15get_new_handlerv>:
 80a2708:	4b02      	ldr	r3, [pc, #8]	; (80a2714 <_ZSt15get_new_handlerv+0xc>)
 80a270a:	6818      	ldr	r0, [r3, #0]
 80a270c:	f3bf 8f5f 	dmb	sy
 80a2710:	4770      	bx	lr
 80a2712:	bf00      	nop
 80a2714:	2000018c 	.word	0x2000018c

080a2718 <_ZnwjRKSt9nothrow_t>:
 80a2718:	b510      	push	{r4, lr}
 80a271a:	2800      	cmp	r0, #0
 80a271c:	bf14      	ite	ne
 80a271e:	4604      	movne	r4, r0
 80a2720:	2401      	moveq	r4, #1
 80a2722:	4620      	mov	r0, r4
 80a2724:	f7ff fa08 	bl	80a1b38 <malloc>
 80a2728:	b920      	cbnz	r0, 80a2734 <_ZnwjRKSt9nothrow_t+0x1c>
 80a272a:	f7ff ffed 	bl	80a2708 <_ZSt15get_new_handlerv>
 80a272e:	b108      	cbz	r0, 80a2734 <_ZnwjRKSt9nothrow_t+0x1c>
 80a2730:	4780      	blx	r0
 80a2732:	e7f6      	b.n	80a2722 <_ZnwjRKSt9nothrow_t+0xa>
 80a2734:	bd10      	pop	{r4, pc}

080a2736 <_ZnajRKSt9nothrow_t>:
 80a2736:	f7ff bfef 	b.w	80a2718 <_ZnwjRKSt9nothrow_t>
	...

080a273c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a273c:	4b24      	ldr	r3, [pc, #144]	; (80a27d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a273e:	681a      	ldr	r2, [r3, #0]
 80a2740:	07d0      	lsls	r0, r2, #31
 80a2742:	bf5c      	itt	pl
 80a2744:	2201      	movpl	r2, #1
 80a2746:	601a      	strpl	r2, [r3, #0]
 80a2748:	4b22      	ldr	r3, [pc, #136]	; (80a27d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a274a:	681a      	ldr	r2, [r3, #0]
 80a274c:	07d1      	lsls	r1, r2, #31
 80a274e:	bf5c      	itt	pl
 80a2750:	2201      	movpl	r2, #1
 80a2752:	601a      	strpl	r2, [r3, #0]
 80a2754:	4b20      	ldr	r3, [pc, #128]	; (80a27d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2756:	681a      	ldr	r2, [r3, #0]
 80a2758:	07d2      	lsls	r2, r2, #31
 80a275a:	bf5c      	itt	pl
 80a275c:	2201      	movpl	r2, #1
 80a275e:	601a      	strpl	r2, [r3, #0]
 80a2760:	4b1e      	ldr	r3, [pc, #120]	; (80a27dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2762:	681a      	ldr	r2, [r3, #0]
 80a2764:	07d0      	lsls	r0, r2, #31
 80a2766:	bf5c      	itt	pl
 80a2768:	2201      	movpl	r2, #1
 80a276a:	601a      	strpl	r2, [r3, #0]
 80a276c:	4b1c      	ldr	r3, [pc, #112]	; (80a27e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a276e:	681a      	ldr	r2, [r3, #0]
 80a2770:	07d1      	lsls	r1, r2, #31
 80a2772:	bf5c      	itt	pl
 80a2774:	2201      	movpl	r2, #1
 80a2776:	601a      	strpl	r2, [r3, #0]
 80a2778:	4b1a      	ldr	r3, [pc, #104]	; (80a27e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a277a:	681a      	ldr	r2, [r3, #0]
 80a277c:	07d2      	lsls	r2, r2, #31
 80a277e:	bf5c      	itt	pl
 80a2780:	2201      	movpl	r2, #1
 80a2782:	601a      	strpl	r2, [r3, #0]
 80a2784:	4b18      	ldr	r3, [pc, #96]	; (80a27e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2786:	681a      	ldr	r2, [r3, #0]
 80a2788:	07d0      	lsls	r0, r2, #31
 80a278a:	bf5c      	itt	pl
 80a278c:	2201      	movpl	r2, #1
 80a278e:	601a      	strpl	r2, [r3, #0]
 80a2790:	4b16      	ldr	r3, [pc, #88]	; (80a27ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2792:	681a      	ldr	r2, [r3, #0]
 80a2794:	07d1      	lsls	r1, r2, #31
 80a2796:	bf5c      	itt	pl
 80a2798:	2201      	movpl	r2, #1
 80a279a:	601a      	strpl	r2, [r3, #0]
 80a279c:	4b14      	ldr	r3, [pc, #80]	; (80a27f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a279e:	681a      	ldr	r2, [r3, #0]
 80a27a0:	07d2      	lsls	r2, r2, #31
 80a27a2:	bf5c      	itt	pl
 80a27a4:	2201      	movpl	r2, #1
 80a27a6:	601a      	strpl	r2, [r3, #0]
 80a27a8:	4b12      	ldr	r3, [pc, #72]	; (80a27f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a27aa:	681a      	ldr	r2, [r3, #0]
 80a27ac:	07d0      	lsls	r0, r2, #31
 80a27ae:	bf5c      	itt	pl
 80a27b0:	2201      	movpl	r2, #1
 80a27b2:	601a      	strpl	r2, [r3, #0]
 80a27b4:	4b10      	ldr	r3, [pc, #64]	; (80a27f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a27b6:	681a      	ldr	r2, [r3, #0]
 80a27b8:	07d1      	lsls	r1, r2, #31
 80a27ba:	bf5c      	itt	pl
 80a27bc:	2201      	movpl	r2, #1
 80a27be:	601a      	strpl	r2, [r3, #0]
 80a27c0:	4b0e      	ldr	r3, [pc, #56]	; (80a27fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a27c2:	681a      	ldr	r2, [r3, #0]
 80a27c4:	07d2      	lsls	r2, r2, #31
 80a27c6:	bf5c      	itt	pl
 80a27c8:	2201      	movpl	r2, #1
 80a27ca:	601a      	strpl	r2, [r3, #0]
 80a27cc:	4770      	bx	lr
 80a27ce:	bf00      	nop
 80a27d0:	200001bc 	.word	0x200001bc
 80a27d4:	200001b8 	.word	0x200001b8
 80a27d8:	200001b4 	.word	0x200001b4
 80a27dc:	200001b0 	.word	0x200001b0
 80a27e0:	200001ac 	.word	0x200001ac
 80a27e4:	200001a8 	.word	0x200001a8
 80a27e8:	200001a4 	.word	0x200001a4
 80a27ec:	200001a0 	.word	0x200001a0
 80a27f0:	2000019c 	.word	0x2000019c
 80a27f4:	20000198 	.word	0x20000198
 80a27f8:	20000194 	.word	0x20000194
 80a27fc:	20000190 	.word	0x20000190

080a2800 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2800:	4b18      	ldr	r3, [pc, #96]	; (80a2864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2802:	681a      	ldr	r2, [r3, #0]
 80a2804:	07d1      	lsls	r1, r2, #31
 80a2806:	bf5c      	itt	pl
 80a2808:	2201      	movpl	r2, #1
 80a280a:	601a      	strpl	r2, [r3, #0]
 80a280c:	4b16      	ldr	r3, [pc, #88]	; (80a2868 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a280e:	681a      	ldr	r2, [r3, #0]
 80a2810:	07d2      	lsls	r2, r2, #31
 80a2812:	bf5c      	itt	pl
 80a2814:	2201      	movpl	r2, #1
 80a2816:	601a      	strpl	r2, [r3, #0]
 80a2818:	4b14      	ldr	r3, [pc, #80]	; (80a286c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a281a:	681a      	ldr	r2, [r3, #0]
 80a281c:	07d0      	lsls	r0, r2, #31
 80a281e:	bf5c      	itt	pl
 80a2820:	2201      	movpl	r2, #1
 80a2822:	601a      	strpl	r2, [r3, #0]
 80a2824:	4b12      	ldr	r3, [pc, #72]	; (80a2870 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2826:	681a      	ldr	r2, [r3, #0]
 80a2828:	07d1      	lsls	r1, r2, #31
 80a282a:	bf5c      	itt	pl
 80a282c:	2201      	movpl	r2, #1
 80a282e:	601a      	strpl	r2, [r3, #0]
 80a2830:	4b10      	ldr	r3, [pc, #64]	; (80a2874 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2832:	681a      	ldr	r2, [r3, #0]
 80a2834:	07d2      	lsls	r2, r2, #31
 80a2836:	bf5c      	itt	pl
 80a2838:	2201      	movpl	r2, #1
 80a283a:	601a      	strpl	r2, [r3, #0]
 80a283c:	4b0e      	ldr	r3, [pc, #56]	; (80a2878 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a283e:	681a      	ldr	r2, [r3, #0]
 80a2840:	07d0      	lsls	r0, r2, #31
 80a2842:	bf5c      	itt	pl
 80a2844:	2201      	movpl	r2, #1
 80a2846:	601a      	strpl	r2, [r3, #0]
 80a2848:	4b0c      	ldr	r3, [pc, #48]	; (80a287c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a284a:	681a      	ldr	r2, [r3, #0]
 80a284c:	07d1      	lsls	r1, r2, #31
 80a284e:	bf5c      	itt	pl
 80a2850:	2201      	movpl	r2, #1
 80a2852:	601a      	strpl	r2, [r3, #0]
 80a2854:	4b0a      	ldr	r3, [pc, #40]	; (80a2880 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2856:	681a      	ldr	r2, [r3, #0]
 80a2858:	07d2      	lsls	r2, r2, #31
 80a285a:	bf5c      	itt	pl
 80a285c:	2201      	movpl	r2, #1
 80a285e:	601a      	strpl	r2, [r3, #0]
 80a2860:	4770      	bx	lr
 80a2862:	bf00      	nop
 80a2864:	200001dc 	.word	0x200001dc
 80a2868:	200001d8 	.word	0x200001d8
 80a286c:	200001d4 	.word	0x200001d4
 80a2870:	200001d0 	.word	0x200001d0
 80a2874:	200001cc 	.word	0x200001cc
 80a2878:	200001c8 	.word	0x200001c8
 80a287c:	200001c4 	.word	0x200001c4
 80a2880:	200001c0 	.word	0x200001c0

080a2884 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2884:	4b18      	ldr	r3, [pc, #96]	; (80a28e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2886:	681a      	ldr	r2, [r3, #0]
 80a2888:	07d1      	lsls	r1, r2, #31
 80a288a:	bf5c      	itt	pl
 80a288c:	2201      	movpl	r2, #1
 80a288e:	601a      	strpl	r2, [r3, #0]
 80a2890:	4b16      	ldr	r3, [pc, #88]	; (80a28ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2892:	681a      	ldr	r2, [r3, #0]
 80a2894:	07d2      	lsls	r2, r2, #31
 80a2896:	bf5c      	itt	pl
 80a2898:	2201      	movpl	r2, #1
 80a289a:	601a      	strpl	r2, [r3, #0]
 80a289c:	4b14      	ldr	r3, [pc, #80]	; (80a28f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a289e:	681a      	ldr	r2, [r3, #0]
 80a28a0:	07d0      	lsls	r0, r2, #31
 80a28a2:	bf5c      	itt	pl
 80a28a4:	2201      	movpl	r2, #1
 80a28a6:	601a      	strpl	r2, [r3, #0]
 80a28a8:	4b12      	ldr	r3, [pc, #72]	; (80a28f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a28aa:	681a      	ldr	r2, [r3, #0]
 80a28ac:	07d1      	lsls	r1, r2, #31
 80a28ae:	bf5c      	itt	pl
 80a28b0:	2201      	movpl	r2, #1
 80a28b2:	601a      	strpl	r2, [r3, #0]
 80a28b4:	4b10      	ldr	r3, [pc, #64]	; (80a28f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a28b6:	681a      	ldr	r2, [r3, #0]
 80a28b8:	07d2      	lsls	r2, r2, #31
 80a28ba:	bf5c      	itt	pl
 80a28bc:	2201      	movpl	r2, #1
 80a28be:	601a      	strpl	r2, [r3, #0]
 80a28c0:	4b0e      	ldr	r3, [pc, #56]	; (80a28fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a28c2:	681a      	ldr	r2, [r3, #0]
 80a28c4:	07d0      	lsls	r0, r2, #31
 80a28c6:	bf5c      	itt	pl
 80a28c8:	2201      	movpl	r2, #1
 80a28ca:	601a      	strpl	r2, [r3, #0]
 80a28cc:	4b0c      	ldr	r3, [pc, #48]	; (80a2900 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a28ce:	681a      	ldr	r2, [r3, #0]
 80a28d0:	07d1      	lsls	r1, r2, #31
 80a28d2:	bf5c      	itt	pl
 80a28d4:	2201      	movpl	r2, #1
 80a28d6:	601a      	strpl	r2, [r3, #0]
 80a28d8:	4b0a      	ldr	r3, [pc, #40]	; (80a2904 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a28da:	681a      	ldr	r2, [r3, #0]
 80a28dc:	07d2      	lsls	r2, r2, #31
 80a28de:	bf5c      	itt	pl
 80a28e0:	2201      	movpl	r2, #1
 80a28e2:	601a      	strpl	r2, [r3, #0]
 80a28e4:	4770      	bx	lr
 80a28e6:	bf00      	nop
 80a28e8:	200001fc 	.word	0x200001fc
 80a28ec:	200001f8 	.word	0x200001f8
 80a28f0:	200001f4 	.word	0x200001f4
 80a28f4:	200001f0 	.word	0x200001f0
 80a28f8:	200001ec 	.word	0x200001ec
 80a28fc:	200001e8 	.word	0x200001e8
 80a2900:	200001e4 	.word	0x200001e4
 80a2904:	200001e0 	.word	0x200001e0

080a2908 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2908:	4b24      	ldr	r3, [pc, #144]	; (80a299c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a290a:	681a      	ldr	r2, [r3, #0]
 80a290c:	07d0      	lsls	r0, r2, #31
 80a290e:	bf5c      	itt	pl
 80a2910:	2201      	movpl	r2, #1
 80a2912:	601a      	strpl	r2, [r3, #0]
 80a2914:	4b22      	ldr	r3, [pc, #136]	; (80a29a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2916:	681a      	ldr	r2, [r3, #0]
 80a2918:	07d1      	lsls	r1, r2, #31
 80a291a:	bf5c      	itt	pl
 80a291c:	2201      	movpl	r2, #1
 80a291e:	601a      	strpl	r2, [r3, #0]
 80a2920:	4b20      	ldr	r3, [pc, #128]	; (80a29a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2922:	681a      	ldr	r2, [r3, #0]
 80a2924:	07d2      	lsls	r2, r2, #31
 80a2926:	bf5c      	itt	pl
 80a2928:	2201      	movpl	r2, #1
 80a292a:	601a      	strpl	r2, [r3, #0]
 80a292c:	4b1e      	ldr	r3, [pc, #120]	; (80a29a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a292e:	681a      	ldr	r2, [r3, #0]
 80a2930:	07d0      	lsls	r0, r2, #31
 80a2932:	bf5c      	itt	pl
 80a2934:	2201      	movpl	r2, #1
 80a2936:	601a      	strpl	r2, [r3, #0]
 80a2938:	4b1c      	ldr	r3, [pc, #112]	; (80a29ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a293a:	681a      	ldr	r2, [r3, #0]
 80a293c:	07d1      	lsls	r1, r2, #31
 80a293e:	bf5c      	itt	pl
 80a2940:	2201      	movpl	r2, #1
 80a2942:	601a      	strpl	r2, [r3, #0]
 80a2944:	4b1a      	ldr	r3, [pc, #104]	; (80a29b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2946:	681a      	ldr	r2, [r3, #0]
 80a2948:	07d2      	lsls	r2, r2, #31
 80a294a:	bf5c      	itt	pl
 80a294c:	2201      	movpl	r2, #1
 80a294e:	601a      	strpl	r2, [r3, #0]
 80a2950:	4b18      	ldr	r3, [pc, #96]	; (80a29b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2952:	681a      	ldr	r2, [r3, #0]
 80a2954:	07d0      	lsls	r0, r2, #31
 80a2956:	bf5c      	itt	pl
 80a2958:	2201      	movpl	r2, #1
 80a295a:	601a      	strpl	r2, [r3, #0]
 80a295c:	4b16      	ldr	r3, [pc, #88]	; (80a29b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a295e:	681a      	ldr	r2, [r3, #0]
 80a2960:	07d1      	lsls	r1, r2, #31
 80a2962:	bf5c      	itt	pl
 80a2964:	2201      	movpl	r2, #1
 80a2966:	601a      	strpl	r2, [r3, #0]
 80a2968:	4b14      	ldr	r3, [pc, #80]	; (80a29bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a296a:	681a      	ldr	r2, [r3, #0]
 80a296c:	07d2      	lsls	r2, r2, #31
 80a296e:	bf5c      	itt	pl
 80a2970:	2201      	movpl	r2, #1
 80a2972:	601a      	strpl	r2, [r3, #0]
 80a2974:	4b12      	ldr	r3, [pc, #72]	; (80a29c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2976:	681a      	ldr	r2, [r3, #0]
 80a2978:	07d0      	lsls	r0, r2, #31
 80a297a:	bf5c      	itt	pl
 80a297c:	2201      	movpl	r2, #1
 80a297e:	601a      	strpl	r2, [r3, #0]
 80a2980:	4b10      	ldr	r3, [pc, #64]	; (80a29c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2982:	681a      	ldr	r2, [r3, #0]
 80a2984:	07d1      	lsls	r1, r2, #31
 80a2986:	bf5c      	itt	pl
 80a2988:	2201      	movpl	r2, #1
 80a298a:	601a      	strpl	r2, [r3, #0]
 80a298c:	4b0e      	ldr	r3, [pc, #56]	; (80a29c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a298e:	681a      	ldr	r2, [r3, #0]
 80a2990:	07d2      	lsls	r2, r2, #31
 80a2992:	bf5c      	itt	pl
 80a2994:	2201      	movpl	r2, #1
 80a2996:	601a      	strpl	r2, [r3, #0]
 80a2998:	4770      	bx	lr
 80a299a:	bf00      	nop
 80a299c:	2000022c 	.word	0x2000022c
 80a29a0:	20000228 	.word	0x20000228
 80a29a4:	20000224 	.word	0x20000224
 80a29a8:	20000220 	.word	0x20000220
 80a29ac:	2000021c 	.word	0x2000021c
 80a29b0:	20000218 	.word	0x20000218
 80a29b4:	20000214 	.word	0x20000214
 80a29b8:	20000210 	.word	0x20000210
 80a29bc:	2000020c 	.word	0x2000020c
 80a29c0:	20000208 	.word	0x20000208
 80a29c4:	20000204 	.word	0x20000204
 80a29c8:	20000200 	.word	0x20000200
 80a29cc:	00000000 	.word	0x00000000

080a29d0 <floor>:
 80a29d0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80a29d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a29d8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80a29dc:	2e13      	cmp	r6, #19
 80a29de:	460b      	mov	r3, r1
 80a29e0:	4604      	mov	r4, r0
 80a29e2:	460d      	mov	r5, r1
 80a29e4:	4688      	mov	r8, r1
 80a29e6:	4607      	mov	r7, r0
 80a29e8:	dc1c      	bgt.n	80a2a24 <floor+0x54>
 80a29ea:	2e00      	cmp	r6, #0
 80a29ec:	db3f      	blt.n	80a2a6e <floor+0x9e>
 80a29ee:	4a3a      	ldr	r2, [pc, #232]	; (80a2ad8 <floor+0x108>)
 80a29f0:	4686      	mov	lr, r0
 80a29f2:	fa42 f906 	asr.w	r9, r2, r6
 80a29f6:	ea01 0209 	and.w	r2, r1, r9
 80a29fa:	4302      	orrs	r2, r0
 80a29fc:	d017      	beq.n	80a2a2e <floor+0x5e>
 80a29fe:	a334      	add	r3, pc, #208	; (adr r3, 80a2ad0 <floor+0x100>)
 80a2a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2a04:	f000 f872 	bl	80a2aec <__adddf3>
 80a2a08:	2200      	movs	r2, #0
 80a2a0a:	2300      	movs	r3, #0
 80a2a0c:	f000 fcb0 	bl	80a3370 <__aeabi_dcmpgt>
 80a2a10:	b120      	cbz	r0, 80a2a1c <floor+0x4c>
 80a2a12:	2d00      	cmp	r5, #0
 80a2a14:	db40      	blt.n	80a2a98 <floor+0xc8>
 80a2a16:	ea28 0509 	bic.w	r5, r8, r9
 80a2a1a:	2700      	movs	r7, #0
 80a2a1c:	4638      	mov	r0, r7
 80a2a1e:	4629      	mov	r1, r5
 80a2a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a2a24:	2e33      	cmp	r6, #51	; 0x33
 80a2a26:	dd06      	ble.n	80a2a36 <floor+0x66>
 80a2a28:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a2a2c:	d02f      	beq.n	80a2a8e <floor+0xbe>
 80a2a2e:	4620      	mov	r0, r4
 80a2a30:	4619      	mov	r1, r3
 80a2a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a2a36:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80a2a3a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80a2a3e:	fa29 f902 	lsr.w	r9, r9, r2
 80a2a42:	ea10 0f09 	tst.w	r0, r9
 80a2a46:	d0f2      	beq.n	80a2a2e <floor+0x5e>
 80a2a48:	a321      	add	r3, pc, #132	; (adr r3, 80a2ad0 <floor+0x100>)
 80a2a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2a4e:	f000 f84d 	bl	80a2aec <__adddf3>
 80a2a52:	2200      	movs	r2, #0
 80a2a54:	2300      	movs	r3, #0
 80a2a56:	f000 fc8b 	bl	80a3370 <__aeabi_dcmpgt>
 80a2a5a:	2800      	cmp	r0, #0
 80a2a5c:	d0de      	beq.n	80a2a1c <floor+0x4c>
 80a2a5e:	2d00      	cmp	r5, #0
 80a2a60:	db20      	blt.n	80a2aa4 <floor+0xd4>
 80a2a62:	4645      	mov	r5, r8
 80a2a64:	ea27 0709 	bic.w	r7, r7, r9
 80a2a68:	4638      	mov	r0, r7
 80a2a6a:	4629      	mov	r1, r5
 80a2a6c:	e7d8      	b.n	80a2a20 <floor+0x50>
 80a2a6e:	a318      	add	r3, pc, #96	; (adr r3, 80a2ad0 <floor+0x100>)
 80a2a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2a74:	f000 f83a 	bl	80a2aec <__adddf3>
 80a2a78:	2200      	movs	r2, #0
 80a2a7a:	2300      	movs	r3, #0
 80a2a7c:	f000 fc78 	bl	80a3370 <__aeabi_dcmpgt>
 80a2a80:	2800      	cmp	r0, #0
 80a2a82:	d0cb      	beq.n	80a2a1c <floor+0x4c>
 80a2a84:	2d00      	cmp	r5, #0
 80a2a86:	db18      	blt.n	80a2aba <floor+0xea>
 80a2a88:	2700      	movs	r7, #0
 80a2a8a:	463d      	mov	r5, r7
 80a2a8c:	e7c6      	b.n	80a2a1c <floor+0x4c>
 80a2a8e:	4602      	mov	r2, r0
 80a2a90:	460b      	mov	r3, r1
 80a2a92:	f000 f82b 	bl	80a2aec <__adddf3>
 80a2a96:	e7cc      	b.n	80a2a32 <floor+0x62>
 80a2a98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80a2a9c:	fa43 f606 	asr.w	r6, r3, r6
 80a2aa0:	44b0      	add	r8, r6
 80a2aa2:	e7b8      	b.n	80a2a16 <floor+0x46>
 80a2aa4:	2e14      	cmp	r6, #20
 80a2aa6:	d010      	beq.n	80a2aca <floor+0xfa>
 80a2aa8:	2301      	movs	r3, #1
 80a2aaa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80a2aae:	fa03 f606 	lsl.w	r6, r3, r6
 80a2ab2:	1937      	adds	r7, r6, r4
 80a2ab4:	bf28      	it	cs
 80a2ab6:	4498      	addcs	r8, r3
 80a2ab8:	e7d3      	b.n	80a2a62 <floor+0x92>
 80a2aba:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80a2abe:	4b07      	ldr	r3, [pc, #28]	; (80a2adc <floor+0x10c>)
 80a2ac0:	4322      	orrs	r2, r4
 80a2ac2:	bf18      	it	ne
 80a2ac4:	461d      	movne	r5, r3
 80a2ac6:	2700      	movs	r7, #0
 80a2ac8:	e7a8      	b.n	80a2a1c <floor+0x4c>
 80a2aca:	f105 0801 	add.w	r8, r5, #1
 80a2ace:	e7c8      	b.n	80a2a62 <floor+0x92>
 80a2ad0:	8800759c 	.word	0x8800759c
 80a2ad4:	7e37e43c 	.word	0x7e37e43c
 80a2ad8:	000fffff 	.word	0x000fffff
 80a2adc:	bff00000 	.word	0xbff00000

080a2ae0 <__aeabi_drsub>:
 80a2ae0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2ae4:	e002      	b.n	80a2aec <__adddf3>
 80a2ae6:	bf00      	nop

080a2ae8 <__aeabi_dsub>:
 80a2ae8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a2aec <__adddf3>:
 80a2aec:	b530      	push	{r4, r5, lr}
 80a2aee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a2af2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a2af6:	ea94 0f05 	teq	r4, r5
 80a2afa:	bf08      	it	eq
 80a2afc:	ea90 0f02 	teqeq	r0, r2
 80a2b00:	bf1f      	itttt	ne
 80a2b02:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2b06:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a2b0a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a2b0e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2b12:	f000 80e2 	beq.w	80a2cda <__adddf3+0x1ee>
 80a2b16:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2b1a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a2b1e:	bfb8      	it	lt
 80a2b20:	426d      	neglt	r5, r5
 80a2b22:	dd0c      	ble.n	80a2b3e <__adddf3+0x52>
 80a2b24:	442c      	add	r4, r5
 80a2b26:	ea80 0202 	eor.w	r2, r0, r2
 80a2b2a:	ea81 0303 	eor.w	r3, r1, r3
 80a2b2e:	ea82 0000 	eor.w	r0, r2, r0
 80a2b32:	ea83 0101 	eor.w	r1, r3, r1
 80a2b36:	ea80 0202 	eor.w	r2, r0, r2
 80a2b3a:	ea81 0303 	eor.w	r3, r1, r3
 80a2b3e:	2d36      	cmp	r5, #54	; 0x36
 80a2b40:	bf88      	it	hi
 80a2b42:	bd30      	pophi	{r4, r5, pc}
 80a2b44:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2b48:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2b4c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2b50:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2b54:	d002      	beq.n	80a2b5c <__adddf3+0x70>
 80a2b56:	4240      	negs	r0, r0
 80a2b58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2b5c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2b60:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2b64:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2b68:	d002      	beq.n	80a2b70 <__adddf3+0x84>
 80a2b6a:	4252      	negs	r2, r2
 80a2b6c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2b70:	ea94 0f05 	teq	r4, r5
 80a2b74:	f000 80a7 	beq.w	80a2cc6 <__adddf3+0x1da>
 80a2b78:	f1a4 0401 	sub.w	r4, r4, #1
 80a2b7c:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2b80:	db0d      	blt.n	80a2b9e <__adddf3+0xb2>
 80a2b82:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a2b86:	fa22 f205 	lsr.w	r2, r2, r5
 80a2b8a:	1880      	adds	r0, r0, r2
 80a2b8c:	f141 0100 	adc.w	r1, r1, #0
 80a2b90:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2b94:	1880      	adds	r0, r0, r2
 80a2b96:	fa43 f305 	asr.w	r3, r3, r5
 80a2b9a:	4159      	adcs	r1, r3
 80a2b9c:	e00e      	b.n	80a2bbc <__adddf3+0xd0>
 80a2b9e:	f1a5 0520 	sub.w	r5, r5, #32
 80a2ba2:	f10e 0e20 	add.w	lr, lr, #32
 80a2ba6:	2a01      	cmp	r2, #1
 80a2ba8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2bac:	bf28      	it	cs
 80a2bae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a2bb2:	fa43 f305 	asr.w	r3, r3, r5
 80a2bb6:	18c0      	adds	r0, r0, r3
 80a2bb8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2bbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2bc0:	d507      	bpl.n	80a2bd2 <__adddf3+0xe6>
 80a2bc2:	f04f 0e00 	mov.w	lr, #0
 80a2bc6:	f1dc 0c00 	rsbs	ip, ip, #0
 80a2bca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a2bce:	eb6e 0101 	sbc.w	r1, lr, r1
 80a2bd2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a2bd6:	d31b      	bcc.n	80a2c10 <__adddf3+0x124>
 80a2bd8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a2bdc:	d30c      	bcc.n	80a2bf8 <__adddf3+0x10c>
 80a2bde:	0849      	lsrs	r1, r1, #1
 80a2be0:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2be4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2be8:	f104 0401 	add.w	r4, r4, #1
 80a2bec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2bf0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2bf4:	f080 809a 	bcs.w	80a2d2c <__adddf3+0x240>
 80a2bf8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2bfc:	bf08      	it	eq
 80a2bfe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2c02:	f150 0000 	adcs.w	r0, r0, #0
 80a2c06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2c0a:	ea41 0105 	orr.w	r1, r1, r5
 80a2c0e:	bd30      	pop	{r4, r5, pc}
 80a2c10:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2c14:	4140      	adcs	r0, r0
 80a2c16:	eb41 0101 	adc.w	r1, r1, r1
 80a2c1a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2c1e:	f1a4 0401 	sub.w	r4, r4, #1
 80a2c22:	d1e9      	bne.n	80a2bf8 <__adddf3+0x10c>
 80a2c24:	f091 0f00 	teq	r1, #0
 80a2c28:	bf04      	itt	eq
 80a2c2a:	4601      	moveq	r1, r0
 80a2c2c:	2000      	moveq	r0, #0
 80a2c2e:	fab1 f381 	clz	r3, r1
 80a2c32:	bf08      	it	eq
 80a2c34:	3320      	addeq	r3, #32
 80a2c36:	f1a3 030b 	sub.w	r3, r3, #11
 80a2c3a:	f1b3 0220 	subs.w	r2, r3, #32
 80a2c3e:	da0c      	bge.n	80a2c5a <__adddf3+0x16e>
 80a2c40:	320c      	adds	r2, #12
 80a2c42:	dd08      	ble.n	80a2c56 <__adddf3+0x16a>
 80a2c44:	f102 0c14 	add.w	ip, r2, #20
 80a2c48:	f1c2 020c 	rsb	r2, r2, #12
 80a2c4c:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2c50:	fa21 f102 	lsr.w	r1, r1, r2
 80a2c54:	e00c      	b.n	80a2c70 <__adddf3+0x184>
 80a2c56:	f102 0214 	add.w	r2, r2, #20
 80a2c5a:	bfd8      	it	le
 80a2c5c:	f1c2 0c20 	rsble	ip, r2, #32
 80a2c60:	fa01 f102 	lsl.w	r1, r1, r2
 80a2c64:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2c68:	bfdc      	itt	le
 80a2c6a:	ea41 010c 	orrle.w	r1, r1, ip
 80a2c6e:	4090      	lslle	r0, r2
 80a2c70:	1ae4      	subs	r4, r4, r3
 80a2c72:	bfa2      	ittt	ge
 80a2c74:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2c78:	4329      	orrge	r1, r5
 80a2c7a:	bd30      	popge	{r4, r5, pc}
 80a2c7c:	ea6f 0404 	mvn.w	r4, r4
 80a2c80:	3c1f      	subs	r4, #31
 80a2c82:	da1c      	bge.n	80a2cbe <__adddf3+0x1d2>
 80a2c84:	340c      	adds	r4, #12
 80a2c86:	dc0e      	bgt.n	80a2ca6 <__adddf3+0x1ba>
 80a2c88:	f104 0414 	add.w	r4, r4, #20
 80a2c8c:	f1c4 0220 	rsb	r2, r4, #32
 80a2c90:	fa20 f004 	lsr.w	r0, r0, r4
 80a2c94:	fa01 f302 	lsl.w	r3, r1, r2
 80a2c98:	ea40 0003 	orr.w	r0, r0, r3
 80a2c9c:	fa21 f304 	lsr.w	r3, r1, r4
 80a2ca0:	ea45 0103 	orr.w	r1, r5, r3
 80a2ca4:	bd30      	pop	{r4, r5, pc}
 80a2ca6:	f1c4 040c 	rsb	r4, r4, #12
 80a2caa:	f1c4 0220 	rsb	r2, r4, #32
 80a2cae:	fa20 f002 	lsr.w	r0, r0, r2
 80a2cb2:	fa01 f304 	lsl.w	r3, r1, r4
 80a2cb6:	ea40 0003 	orr.w	r0, r0, r3
 80a2cba:	4629      	mov	r1, r5
 80a2cbc:	bd30      	pop	{r4, r5, pc}
 80a2cbe:	fa21 f004 	lsr.w	r0, r1, r4
 80a2cc2:	4629      	mov	r1, r5
 80a2cc4:	bd30      	pop	{r4, r5, pc}
 80a2cc6:	f094 0f00 	teq	r4, #0
 80a2cca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a2cce:	bf06      	itte	eq
 80a2cd0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a2cd4:	3401      	addeq	r4, #1
 80a2cd6:	3d01      	subne	r5, #1
 80a2cd8:	e74e      	b.n	80a2b78 <__adddf3+0x8c>
 80a2cda:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2cde:	bf18      	it	ne
 80a2ce0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2ce4:	d029      	beq.n	80a2d3a <__adddf3+0x24e>
 80a2ce6:	ea94 0f05 	teq	r4, r5
 80a2cea:	bf08      	it	eq
 80a2cec:	ea90 0f02 	teqeq	r0, r2
 80a2cf0:	d005      	beq.n	80a2cfe <__adddf3+0x212>
 80a2cf2:	ea54 0c00 	orrs.w	ip, r4, r0
 80a2cf6:	bf04      	itt	eq
 80a2cf8:	4619      	moveq	r1, r3
 80a2cfa:	4610      	moveq	r0, r2
 80a2cfc:	bd30      	pop	{r4, r5, pc}
 80a2cfe:	ea91 0f03 	teq	r1, r3
 80a2d02:	bf1e      	ittt	ne
 80a2d04:	2100      	movne	r1, #0
 80a2d06:	2000      	movne	r0, #0
 80a2d08:	bd30      	popne	{r4, r5, pc}
 80a2d0a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a2d0e:	d105      	bne.n	80a2d1c <__adddf3+0x230>
 80a2d10:	0040      	lsls	r0, r0, #1
 80a2d12:	4149      	adcs	r1, r1
 80a2d14:	bf28      	it	cs
 80a2d16:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2d1a:	bd30      	pop	{r4, r5, pc}
 80a2d1c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2d20:	bf3c      	itt	cc
 80a2d22:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2d26:	bd30      	popcc	{r4, r5, pc}
 80a2d28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2d2c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2d30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2d34:	f04f 0000 	mov.w	r0, #0
 80a2d38:	bd30      	pop	{r4, r5, pc}
 80a2d3a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2d3e:	bf1a      	itte	ne
 80a2d40:	4619      	movne	r1, r3
 80a2d42:	4610      	movne	r0, r2
 80a2d44:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2d48:	bf1c      	itt	ne
 80a2d4a:	460b      	movne	r3, r1
 80a2d4c:	4602      	movne	r2, r0
 80a2d4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2d52:	bf06      	itte	eq
 80a2d54:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2d58:	ea91 0f03 	teqeq	r1, r3
 80a2d5c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2d60:	bd30      	pop	{r4, r5, pc}
 80a2d62:	bf00      	nop

080a2d64 <__aeabi_ui2d>:
 80a2d64:	f090 0f00 	teq	r0, #0
 80a2d68:	bf04      	itt	eq
 80a2d6a:	2100      	moveq	r1, #0
 80a2d6c:	4770      	bxeq	lr
 80a2d6e:	b530      	push	{r4, r5, lr}
 80a2d70:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2d74:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2d78:	f04f 0500 	mov.w	r5, #0
 80a2d7c:	f04f 0100 	mov.w	r1, #0
 80a2d80:	e750      	b.n	80a2c24 <__adddf3+0x138>
 80a2d82:	bf00      	nop

080a2d84 <__aeabi_i2d>:
 80a2d84:	f090 0f00 	teq	r0, #0
 80a2d88:	bf04      	itt	eq
 80a2d8a:	2100      	moveq	r1, #0
 80a2d8c:	4770      	bxeq	lr
 80a2d8e:	b530      	push	{r4, r5, lr}
 80a2d90:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2d94:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2d98:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2d9c:	bf48      	it	mi
 80a2d9e:	4240      	negmi	r0, r0
 80a2da0:	f04f 0100 	mov.w	r1, #0
 80a2da4:	e73e      	b.n	80a2c24 <__adddf3+0x138>
 80a2da6:	bf00      	nop

080a2da8 <__aeabi_f2d>:
 80a2da8:	0042      	lsls	r2, r0, #1
 80a2daa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2dae:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2db2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a2db6:	bf1f      	itttt	ne
 80a2db8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2dbc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2dc0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a2dc4:	4770      	bxne	lr
 80a2dc6:	f092 0f00 	teq	r2, #0
 80a2dca:	bf14      	ite	ne
 80a2dcc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2dd0:	4770      	bxeq	lr
 80a2dd2:	b530      	push	{r4, r5, lr}
 80a2dd4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2dd8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2ddc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2de0:	e720      	b.n	80a2c24 <__adddf3+0x138>
 80a2de2:	bf00      	nop

080a2de4 <__aeabi_ul2d>:
 80a2de4:	ea50 0201 	orrs.w	r2, r0, r1
 80a2de8:	bf08      	it	eq
 80a2dea:	4770      	bxeq	lr
 80a2dec:	b530      	push	{r4, r5, lr}
 80a2dee:	f04f 0500 	mov.w	r5, #0
 80a2df2:	e00a      	b.n	80a2e0a <__aeabi_l2d+0x16>

080a2df4 <__aeabi_l2d>:
 80a2df4:	ea50 0201 	orrs.w	r2, r0, r1
 80a2df8:	bf08      	it	eq
 80a2dfa:	4770      	bxeq	lr
 80a2dfc:	b530      	push	{r4, r5, lr}
 80a2dfe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2e02:	d502      	bpl.n	80a2e0a <__aeabi_l2d+0x16>
 80a2e04:	4240      	negs	r0, r0
 80a2e06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2e0a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2e0e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2e12:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2e16:	f43f aedc 	beq.w	80a2bd2 <__adddf3+0xe6>
 80a2e1a:	f04f 0203 	mov.w	r2, #3
 80a2e1e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2e22:	bf18      	it	ne
 80a2e24:	3203      	addne	r2, #3
 80a2e26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2e2a:	bf18      	it	ne
 80a2e2c:	3203      	addne	r2, #3
 80a2e2e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2e32:	f1c2 0320 	rsb	r3, r2, #32
 80a2e36:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2e3a:	fa20 f002 	lsr.w	r0, r0, r2
 80a2e3e:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2e42:	ea40 000e 	orr.w	r0, r0, lr
 80a2e46:	fa21 f102 	lsr.w	r1, r1, r2
 80a2e4a:	4414      	add	r4, r2
 80a2e4c:	e6c1      	b.n	80a2bd2 <__adddf3+0xe6>
 80a2e4e:	bf00      	nop

080a2e50 <__aeabi_dmul>:
 80a2e50:	b570      	push	{r4, r5, r6, lr}
 80a2e52:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2e56:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2e5a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2e5e:	bf1d      	ittte	ne
 80a2e60:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2e64:	ea94 0f0c 	teqne	r4, ip
 80a2e68:	ea95 0f0c 	teqne	r5, ip
 80a2e6c:	f000 f8de 	bleq	80a302c <__aeabi_dmul+0x1dc>
 80a2e70:	442c      	add	r4, r5
 80a2e72:	ea81 0603 	eor.w	r6, r1, r3
 80a2e76:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a2e7a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a2e7e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a2e82:	bf18      	it	ne
 80a2e84:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a2e88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2e8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2e90:	d038      	beq.n	80a2f04 <__aeabi_dmul+0xb4>
 80a2e92:	fba0 ce02 	umull	ip, lr, r0, r2
 80a2e96:	f04f 0500 	mov.w	r5, #0
 80a2e9a:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a2e9e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a2ea2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a2ea6:	f04f 0600 	mov.w	r6, #0
 80a2eaa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a2eae:	f09c 0f00 	teq	ip, #0
 80a2eb2:	bf18      	it	ne
 80a2eb4:	f04e 0e01 	orrne.w	lr, lr, #1
 80a2eb8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a2ebc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a2ec0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a2ec4:	d204      	bcs.n	80a2ed0 <__aeabi_dmul+0x80>
 80a2ec6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a2eca:	416d      	adcs	r5, r5
 80a2ecc:	eb46 0606 	adc.w	r6, r6, r6
 80a2ed0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a2ed4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a2ed8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a2edc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a2ee0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a2ee4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2ee8:	bf88      	it	hi
 80a2eea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2eee:	d81e      	bhi.n	80a2f2e <__aeabi_dmul+0xde>
 80a2ef0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a2ef4:	bf08      	it	eq
 80a2ef6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a2efa:	f150 0000 	adcs.w	r0, r0, #0
 80a2efe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2f02:	bd70      	pop	{r4, r5, r6, pc}
 80a2f04:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a2f08:	ea46 0101 	orr.w	r1, r6, r1
 80a2f0c:	ea40 0002 	orr.w	r0, r0, r2
 80a2f10:	ea81 0103 	eor.w	r1, r1, r3
 80a2f14:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a2f18:	bfc2      	ittt	gt
 80a2f1a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2f1e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2f22:	bd70      	popgt	{r4, r5, r6, pc}
 80a2f24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2f28:	f04f 0e00 	mov.w	lr, #0
 80a2f2c:	3c01      	subs	r4, #1
 80a2f2e:	f300 80ab 	bgt.w	80a3088 <__aeabi_dmul+0x238>
 80a2f32:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a2f36:	bfde      	ittt	le
 80a2f38:	2000      	movle	r0, #0
 80a2f3a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a2f3e:	bd70      	pople	{r4, r5, r6, pc}
 80a2f40:	f1c4 0400 	rsb	r4, r4, #0
 80a2f44:	3c20      	subs	r4, #32
 80a2f46:	da35      	bge.n	80a2fb4 <__aeabi_dmul+0x164>
 80a2f48:	340c      	adds	r4, #12
 80a2f4a:	dc1b      	bgt.n	80a2f84 <__aeabi_dmul+0x134>
 80a2f4c:	f104 0414 	add.w	r4, r4, #20
 80a2f50:	f1c4 0520 	rsb	r5, r4, #32
 80a2f54:	fa00 f305 	lsl.w	r3, r0, r5
 80a2f58:	fa20 f004 	lsr.w	r0, r0, r4
 80a2f5c:	fa01 f205 	lsl.w	r2, r1, r5
 80a2f60:	ea40 0002 	orr.w	r0, r0, r2
 80a2f64:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a2f68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2f6c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2f70:	fa21 f604 	lsr.w	r6, r1, r4
 80a2f74:	eb42 0106 	adc.w	r1, r2, r6
 80a2f78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2f7c:	bf08      	it	eq
 80a2f7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2f82:	bd70      	pop	{r4, r5, r6, pc}
 80a2f84:	f1c4 040c 	rsb	r4, r4, #12
 80a2f88:	f1c4 0520 	rsb	r5, r4, #32
 80a2f8c:	fa00 f304 	lsl.w	r3, r0, r4
 80a2f90:	fa20 f005 	lsr.w	r0, r0, r5
 80a2f94:	fa01 f204 	lsl.w	r2, r1, r4
 80a2f98:	ea40 0002 	orr.w	r0, r0, r2
 80a2f9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2fa0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2fa4:	f141 0100 	adc.w	r1, r1, #0
 80a2fa8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2fac:	bf08      	it	eq
 80a2fae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2fb2:	bd70      	pop	{r4, r5, r6, pc}
 80a2fb4:	f1c4 0520 	rsb	r5, r4, #32
 80a2fb8:	fa00 f205 	lsl.w	r2, r0, r5
 80a2fbc:	ea4e 0e02 	orr.w	lr, lr, r2
 80a2fc0:	fa20 f304 	lsr.w	r3, r0, r4
 80a2fc4:	fa01 f205 	lsl.w	r2, r1, r5
 80a2fc8:	ea43 0302 	orr.w	r3, r3, r2
 80a2fcc:	fa21 f004 	lsr.w	r0, r1, r4
 80a2fd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2fd4:	fa21 f204 	lsr.w	r2, r1, r4
 80a2fd8:	ea20 0002 	bic.w	r0, r0, r2
 80a2fdc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a2fe0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2fe4:	bf08      	it	eq
 80a2fe6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2fea:	bd70      	pop	{r4, r5, r6, pc}
 80a2fec:	f094 0f00 	teq	r4, #0
 80a2ff0:	d10f      	bne.n	80a3012 <__aeabi_dmul+0x1c2>
 80a2ff2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a2ff6:	0040      	lsls	r0, r0, #1
 80a2ff8:	eb41 0101 	adc.w	r1, r1, r1
 80a2ffc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3000:	bf08      	it	eq
 80a3002:	3c01      	subeq	r4, #1
 80a3004:	d0f7      	beq.n	80a2ff6 <__aeabi_dmul+0x1a6>
 80a3006:	ea41 0106 	orr.w	r1, r1, r6
 80a300a:	f095 0f00 	teq	r5, #0
 80a300e:	bf18      	it	ne
 80a3010:	4770      	bxne	lr
 80a3012:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a3016:	0052      	lsls	r2, r2, #1
 80a3018:	eb43 0303 	adc.w	r3, r3, r3
 80a301c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a3020:	bf08      	it	eq
 80a3022:	3d01      	subeq	r5, #1
 80a3024:	d0f7      	beq.n	80a3016 <__aeabi_dmul+0x1c6>
 80a3026:	ea43 0306 	orr.w	r3, r3, r6
 80a302a:	4770      	bx	lr
 80a302c:	ea94 0f0c 	teq	r4, ip
 80a3030:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3034:	bf18      	it	ne
 80a3036:	ea95 0f0c 	teqne	r5, ip
 80a303a:	d00c      	beq.n	80a3056 <__aeabi_dmul+0x206>
 80a303c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3040:	bf18      	it	ne
 80a3042:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3046:	d1d1      	bne.n	80a2fec <__aeabi_dmul+0x19c>
 80a3048:	ea81 0103 	eor.w	r1, r1, r3
 80a304c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3050:	f04f 0000 	mov.w	r0, #0
 80a3054:	bd70      	pop	{r4, r5, r6, pc}
 80a3056:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a305a:	bf06      	itte	eq
 80a305c:	4610      	moveq	r0, r2
 80a305e:	4619      	moveq	r1, r3
 80a3060:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3064:	d019      	beq.n	80a309a <__aeabi_dmul+0x24a>
 80a3066:	ea94 0f0c 	teq	r4, ip
 80a306a:	d102      	bne.n	80a3072 <__aeabi_dmul+0x222>
 80a306c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a3070:	d113      	bne.n	80a309a <__aeabi_dmul+0x24a>
 80a3072:	ea95 0f0c 	teq	r5, ip
 80a3076:	d105      	bne.n	80a3084 <__aeabi_dmul+0x234>
 80a3078:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a307c:	bf1c      	itt	ne
 80a307e:	4610      	movne	r0, r2
 80a3080:	4619      	movne	r1, r3
 80a3082:	d10a      	bne.n	80a309a <__aeabi_dmul+0x24a>
 80a3084:	ea81 0103 	eor.w	r1, r1, r3
 80a3088:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a308c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a3090:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3094:	f04f 0000 	mov.w	r0, #0
 80a3098:	bd70      	pop	{r4, r5, r6, pc}
 80a309a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a309e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a30a2:	bd70      	pop	{r4, r5, r6, pc}

080a30a4 <__aeabi_ddiv>:
 80a30a4:	b570      	push	{r4, r5, r6, lr}
 80a30a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a30aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a30ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a30b2:	bf1d      	ittte	ne
 80a30b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a30b8:	ea94 0f0c 	teqne	r4, ip
 80a30bc:	ea95 0f0c 	teqne	r5, ip
 80a30c0:	f000 f8a7 	bleq	80a3212 <__aeabi_ddiv+0x16e>
 80a30c4:	eba4 0405 	sub.w	r4, r4, r5
 80a30c8:	ea81 0e03 	eor.w	lr, r1, r3
 80a30cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a30d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a30d4:	f000 8088 	beq.w	80a31e8 <__aeabi_ddiv+0x144>
 80a30d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a30dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a30e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a30e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a30e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a30ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a30f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a30f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a30f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a30fc:	429d      	cmp	r5, r3
 80a30fe:	bf08      	it	eq
 80a3100:	4296      	cmpeq	r6, r2
 80a3102:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a3106:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a310a:	d202      	bcs.n	80a3112 <__aeabi_ddiv+0x6e>
 80a310c:	085b      	lsrs	r3, r3, #1
 80a310e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3112:	1ab6      	subs	r6, r6, r2
 80a3114:	eb65 0503 	sbc.w	r5, r5, r3
 80a3118:	085b      	lsrs	r3, r3, #1
 80a311a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a311e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a3122:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a3126:	ebb6 0e02 	subs.w	lr, r6, r2
 80a312a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a312e:	bf22      	ittt	cs
 80a3130:	1ab6      	subcs	r6, r6, r2
 80a3132:	4675      	movcs	r5, lr
 80a3134:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3138:	085b      	lsrs	r3, r3, #1
 80a313a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a313e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3142:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3146:	bf22      	ittt	cs
 80a3148:	1ab6      	subcs	r6, r6, r2
 80a314a:	4675      	movcs	r5, lr
 80a314c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3150:	085b      	lsrs	r3, r3, #1
 80a3152:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3156:	ebb6 0e02 	subs.w	lr, r6, r2
 80a315a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a315e:	bf22      	ittt	cs
 80a3160:	1ab6      	subcs	r6, r6, r2
 80a3162:	4675      	movcs	r5, lr
 80a3164:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3168:	085b      	lsrs	r3, r3, #1
 80a316a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a316e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3172:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3176:	bf22      	ittt	cs
 80a3178:	1ab6      	subcs	r6, r6, r2
 80a317a:	4675      	movcs	r5, lr
 80a317c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3180:	ea55 0e06 	orrs.w	lr, r5, r6
 80a3184:	d018      	beq.n	80a31b8 <__aeabi_ddiv+0x114>
 80a3186:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a318a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a318e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a3192:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a3196:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a319a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a319e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a31a2:	d1c0      	bne.n	80a3126 <__aeabi_ddiv+0x82>
 80a31a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a31a8:	d10b      	bne.n	80a31c2 <__aeabi_ddiv+0x11e>
 80a31aa:	ea41 0100 	orr.w	r1, r1, r0
 80a31ae:	f04f 0000 	mov.w	r0, #0
 80a31b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a31b6:	e7b6      	b.n	80a3126 <__aeabi_ddiv+0x82>
 80a31b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a31bc:	bf04      	itt	eq
 80a31be:	4301      	orreq	r1, r0
 80a31c0:	2000      	moveq	r0, #0
 80a31c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a31c6:	bf88      	it	hi
 80a31c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a31cc:	f63f aeaf 	bhi.w	80a2f2e <__aeabi_dmul+0xde>
 80a31d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80a31d4:	bf04      	itt	eq
 80a31d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a31da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a31de:	f150 0000 	adcs.w	r0, r0, #0
 80a31e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a31e6:	bd70      	pop	{r4, r5, r6, pc}
 80a31e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a31ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a31f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a31f4:	bfc2      	ittt	gt
 80a31f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a31fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a31fe:	bd70      	popgt	{r4, r5, r6, pc}
 80a3200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3204:	f04f 0e00 	mov.w	lr, #0
 80a3208:	3c01      	subs	r4, #1
 80a320a:	e690      	b.n	80a2f2e <__aeabi_dmul+0xde>
 80a320c:	ea45 0e06 	orr.w	lr, r5, r6
 80a3210:	e68d      	b.n	80a2f2e <__aeabi_dmul+0xde>
 80a3212:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3216:	ea94 0f0c 	teq	r4, ip
 80a321a:	bf08      	it	eq
 80a321c:	ea95 0f0c 	teqeq	r5, ip
 80a3220:	f43f af3b 	beq.w	80a309a <__aeabi_dmul+0x24a>
 80a3224:	ea94 0f0c 	teq	r4, ip
 80a3228:	d10a      	bne.n	80a3240 <__aeabi_ddiv+0x19c>
 80a322a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a322e:	f47f af34 	bne.w	80a309a <__aeabi_dmul+0x24a>
 80a3232:	ea95 0f0c 	teq	r5, ip
 80a3236:	f47f af25 	bne.w	80a3084 <__aeabi_dmul+0x234>
 80a323a:	4610      	mov	r0, r2
 80a323c:	4619      	mov	r1, r3
 80a323e:	e72c      	b.n	80a309a <__aeabi_dmul+0x24a>
 80a3240:	ea95 0f0c 	teq	r5, ip
 80a3244:	d106      	bne.n	80a3254 <__aeabi_ddiv+0x1b0>
 80a3246:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a324a:	f43f aefd 	beq.w	80a3048 <__aeabi_dmul+0x1f8>
 80a324e:	4610      	mov	r0, r2
 80a3250:	4619      	mov	r1, r3
 80a3252:	e722      	b.n	80a309a <__aeabi_dmul+0x24a>
 80a3254:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3258:	bf18      	it	ne
 80a325a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a325e:	f47f aec5 	bne.w	80a2fec <__aeabi_dmul+0x19c>
 80a3262:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a3266:	f47f af0d 	bne.w	80a3084 <__aeabi_dmul+0x234>
 80a326a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a326e:	f47f aeeb 	bne.w	80a3048 <__aeabi_dmul+0x1f8>
 80a3272:	e712      	b.n	80a309a <__aeabi_dmul+0x24a>

080a3274 <__gedf2>:
 80a3274:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a3278:	e006      	b.n	80a3288 <__cmpdf2+0x4>
 80a327a:	bf00      	nop

080a327c <__ledf2>:
 80a327c:	f04f 0c01 	mov.w	ip, #1
 80a3280:	e002      	b.n	80a3288 <__cmpdf2+0x4>
 80a3282:	bf00      	nop

080a3284 <__cmpdf2>:
 80a3284:	f04f 0c01 	mov.w	ip, #1
 80a3288:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a328c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3290:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3294:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3298:	bf18      	it	ne
 80a329a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a329e:	d01b      	beq.n	80a32d8 <__cmpdf2+0x54>
 80a32a0:	b001      	add	sp, #4
 80a32a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a32a6:	bf0c      	ite	eq
 80a32a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a32ac:	ea91 0f03 	teqne	r1, r3
 80a32b0:	bf02      	ittt	eq
 80a32b2:	ea90 0f02 	teqeq	r0, r2
 80a32b6:	2000      	moveq	r0, #0
 80a32b8:	4770      	bxeq	lr
 80a32ba:	f110 0f00 	cmn.w	r0, #0
 80a32be:	ea91 0f03 	teq	r1, r3
 80a32c2:	bf58      	it	pl
 80a32c4:	4299      	cmppl	r1, r3
 80a32c6:	bf08      	it	eq
 80a32c8:	4290      	cmpeq	r0, r2
 80a32ca:	bf2c      	ite	cs
 80a32cc:	17d8      	asrcs	r0, r3, #31
 80a32ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a32d2:	f040 0001 	orr.w	r0, r0, #1
 80a32d6:	4770      	bx	lr
 80a32d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a32dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a32e0:	d102      	bne.n	80a32e8 <__cmpdf2+0x64>
 80a32e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a32e6:	d107      	bne.n	80a32f8 <__cmpdf2+0x74>
 80a32e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a32ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a32f0:	d1d6      	bne.n	80a32a0 <__cmpdf2+0x1c>
 80a32f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a32f6:	d0d3      	beq.n	80a32a0 <__cmpdf2+0x1c>
 80a32f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a32fc:	4770      	bx	lr
 80a32fe:	bf00      	nop

080a3300 <__aeabi_cdrcmple>:
 80a3300:	4684      	mov	ip, r0
 80a3302:	4610      	mov	r0, r2
 80a3304:	4662      	mov	r2, ip
 80a3306:	468c      	mov	ip, r1
 80a3308:	4619      	mov	r1, r3
 80a330a:	4663      	mov	r3, ip
 80a330c:	e000      	b.n	80a3310 <__aeabi_cdcmpeq>
 80a330e:	bf00      	nop

080a3310 <__aeabi_cdcmpeq>:
 80a3310:	b501      	push	{r0, lr}
 80a3312:	f7ff ffb7 	bl	80a3284 <__cmpdf2>
 80a3316:	2800      	cmp	r0, #0
 80a3318:	bf48      	it	mi
 80a331a:	f110 0f00 	cmnmi.w	r0, #0
 80a331e:	bd01      	pop	{r0, pc}

080a3320 <__aeabi_dcmpeq>:
 80a3320:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3324:	f7ff fff4 	bl	80a3310 <__aeabi_cdcmpeq>
 80a3328:	bf0c      	ite	eq
 80a332a:	2001      	moveq	r0, #1
 80a332c:	2000      	movne	r0, #0
 80a332e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3332:	bf00      	nop

080a3334 <__aeabi_dcmplt>:
 80a3334:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3338:	f7ff ffea 	bl	80a3310 <__aeabi_cdcmpeq>
 80a333c:	bf34      	ite	cc
 80a333e:	2001      	movcc	r0, #1
 80a3340:	2000      	movcs	r0, #0
 80a3342:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3346:	bf00      	nop

080a3348 <__aeabi_dcmple>:
 80a3348:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a334c:	f7ff ffe0 	bl	80a3310 <__aeabi_cdcmpeq>
 80a3350:	bf94      	ite	ls
 80a3352:	2001      	movls	r0, #1
 80a3354:	2000      	movhi	r0, #0
 80a3356:	f85d fb08 	ldr.w	pc, [sp], #8
 80a335a:	bf00      	nop

080a335c <__aeabi_dcmpge>:
 80a335c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3360:	f7ff ffce 	bl	80a3300 <__aeabi_cdrcmple>
 80a3364:	bf94      	ite	ls
 80a3366:	2001      	movls	r0, #1
 80a3368:	2000      	movhi	r0, #0
 80a336a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a336e:	bf00      	nop

080a3370 <__aeabi_dcmpgt>:
 80a3370:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3374:	f7ff ffc4 	bl	80a3300 <__aeabi_cdrcmple>
 80a3378:	bf34      	ite	cc
 80a337a:	2001      	movcc	r0, #1
 80a337c:	2000      	movcs	r0, #0
 80a337e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3382:	bf00      	nop

080a3384 <__aeabi_dcmpun>:
 80a3384:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3388:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a338c:	d102      	bne.n	80a3394 <__aeabi_dcmpun+0x10>
 80a338e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3392:	d10a      	bne.n	80a33aa <__aeabi_dcmpun+0x26>
 80a3394:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3398:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a339c:	d102      	bne.n	80a33a4 <__aeabi_dcmpun+0x20>
 80a339e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a33a2:	d102      	bne.n	80a33aa <__aeabi_dcmpun+0x26>
 80a33a4:	f04f 0000 	mov.w	r0, #0
 80a33a8:	4770      	bx	lr
 80a33aa:	f04f 0001 	mov.w	r0, #1
 80a33ae:	4770      	bx	lr

080a33b0 <__aeabi_d2iz>:
 80a33b0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a33b4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a33b8:	d215      	bcs.n	80a33e6 <__aeabi_d2iz+0x36>
 80a33ba:	d511      	bpl.n	80a33e0 <__aeabi_d2iz+0x30>
 80a33bc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a33c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a33c4:	d912      	bls.n	80a33ec <__aeabi_d2iz+0x3c>
 80a33c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a33ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a33ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a33d2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a33d6:	fa23 f002 	lsr.w	r0, r3, r2
 80a33da:	bf18      	it	ne
 80a33dc:	4240      	negne	r0, r0
 80a33de:	4770      	bx	lr
 80a33e0:	f04f 0000 	mov.w	r0, #0
 80a33e4:	4770      	bx	lr
 80a33e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a33ea:	d105      	bne.n	80a33f8 <__aeabi_d2iz+0x48>
 80a33ec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a33f0:	bf08      	it	eq
 80a33f2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a33f6:	4770      	bx	lr
 80a33f8:	f04f 0000 	mov.w	r0, #0
 80a33fc:	4770      	bx	lr
 80a33fe:	bf00      	nop

080a3400 <__aeabi_d2uiz>:
 80a3400:	004a      	lsls	r2, r1, #1
 80a3402:	d211      	bcs.n	80a3428 <__aeabi_d2uiz+0x28>
 80a3404:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3408:	d211      	bcs.n	80a342e <__aeabi_d2uiz+0x2e>
 80a340a:	d50d      	bpl.n	80a3428 <__aeabi_d2uiz+0x28>
 80a340c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3410:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3414:	d40e      	bmi.n	80a3434 <__aeabi_d2uiz+0x34>
 80a3416:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a341a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a341e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3422:	fa23 f002 	lsr.w	r0, r3, r2
 80a3426:	4770      	bx	lr
 80a3428:	f04f 0000 	mov.w	r0, #0
 80a342c:	4770      	bx	lr
 80a342e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3432:	d102      	bne.n	80a343a <__aeabi_d2uiz+0x3a>
 80a3434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a3438:	4770      	bx	lr
 80a343a:	f04f 0000 	mov.w	r0, #0
 80a343e:	4770      	bx	lr

080a3440 <__aeabi_d2f>:
 80a3440:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3444:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a3448:	bf24      	itt	cs
 80a344a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a344e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a3452:	d90d      	bls.n	80a3470 <__aeabi_d2f+0x30>
 80a3454:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3458:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a345c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a3460:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a3464:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a3468:	bf08      	it	eq
 80a346a:	f020 0001 	biceq.w	r0, r0, #1
 80a346e:	4770      	bx	lr
 80a3470:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a3474:	d121      	bne.n	80a34ba <__aeabi_d2f+0x7a>
 80a3476:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a347a:	bfbc      	itt	lt
 80a347c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a3480:	4770      	bxlt	lr
 80a3482:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3486:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a348a:	f1c2 0218 	rsb	r2, r2, #24
 80a348e:	f1c2 0c20 	rsb	ip, r2, #32
 80a3492:	fa10 f30c 	lsls.w	r3, r0, ip
 80a3496:	fa20 f002 	lsr.w	r0, r0, r2
 80a349a:	bf18      	it	ne
 80a349c:	f040 0001 	orrne.w	r0, r0, #1
 80a34a0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a34a4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a34a8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a34ac:	ea40 000c 	orr.w	r0, r0, ip
 80a34b0:	fa23 f302 	lsr.w	r3, r3, r2
 80a34b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a34b8:	e7cc      	b.n	80a3454 <__aeabi_d2f+0x14>
 80a34ba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a34be:	d107      	bne.n	80a34d0 <__aeabi_d2f+0x90>
 80a34c0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a34c4:	bf1e      	ittt	ne
 80a34c6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a34ca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a34ce:	4770      	bxne	lr
 80a34d0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a34d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a34d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a34dc:	4770      	bx	lr
 80a34de:	bf00      	nop

080a34e0 <__aeabi_fmul>:
 80a34e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a34e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a34e8:	bf1e      	ittt	ne
 80a34ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a34ee:	ea92 0f0c 	teqne	r2, ip
 80a34f2:	ea93 0f0c 	teqne	r3, ip
 80a34f6:	d06f      	beq.n	80a35d8 <__aeabi_fmul+0xf8>
 80a34f8:	441a      	add	r2, r3
 80a34fa:	ea80 0c01 	eor.w	ip, r0, r1
 80a34fe:	0240      	lsls	r0, r0, #9
 80a3500:	bf18      	it	ne
 80a3502:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a3506:	d01e      	beq.n	80a3546 <__aeabi_fmul+0x66>
 80a3508:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a350c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a3510:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a3514:	fba0 3101 	umull	r3, r1, r0, r1
 80a3518:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a351c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a3520:	bf3e      	ittt	cc
 80a3522:	0049      	lslcc	r1, r1, #1
 80a3524:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a3528:	005b      	lslcc	r3, r3, #1
 80a352a:	ea40 0001 	orr.w	r0, r0, r1
 80a352e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a3532:	2afd      	cmp	r2, #253	; 0xfd
 80a3534:	d81d      	bhi.n	80a3572 <__aeabi_fmul+0x92>
 80a3536:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a353a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a353e:	bf08      	it	eq
 80a3540:	f020 0001 	biceq.w	r0, r0, #1
 80a3544:	4770      	bx	lr
 80a3546:	f090 0f00 	teq	r0, #0
 80a354a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a354e:	bf08      	it	eq
 80a3550:	0249      	lsleq	r1, r1, #9
 80a3552:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3556:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a355a:	3a7f      	subs	r2, #127	; 0x7f
 80a355c:	bfc2      	ittt	gt
 80a355e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3562:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a3566:	4770      	bxgt	lr
 80a3568:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a356c:	f04f 0300 	mov.w	r3, #0
 80a3570:	3a01      	subs	r2, #1
 80a3572:	dc5d      	bgt.n	80a3630 <__aeabi_fmul+0x150>
 80a3574:	f112 0f19 	cmn.w	r2, #25
 80a3578:	bfdc      	itt	le
 80a357a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a357e:	4770      	bxle	lr
 80a3580:	f1c2 0200 	rsb	r2, r2, #0
 80a3584:	0041      	lsls	r1, r0, #1
 80a3586:	fa21 f102 	lsr.w	r1, r1, r2
 80a358a:	f1c2 0220 	rsb	r2, r2, #32
 80a358e:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3592:	ea5f 0031 	movs.w	r0, r1, rrx
 80a3596:	f140 0000 	adc.w	r0, r0, #0
 80a359a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a359e:	bf08      	it	eq
 80a35a0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a35a4:	4770      	bx	lr
 80a35a6:	f092 0f00 	teq	r2, #0
 80a35aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a35ae:	bf02      	ittt	eq
 80a35b0:	0040      	lsleq	r0, r0, #1
 80a35b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a35b6:	3a01      	subeq	r2, #1
 80a35b8:	d0f9      	beq.n	80a35ae <__aeabi_fmul+0xce>
 80a35ba:	ea40 000c 	orr.w	r0, r0, ip
 80a35be:	f093 0f00 	teq	r3, #0
 80a35c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a35c6:	bf02      	ittt	eq
 80a35c8:	0049      	lsleq	r1, r1, #1
 80a35ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a35ce:	3b01      	subeq	r3, #1
 80a35d0:	d0f9      	beq.n	80a35c6 <__aeabi_fmul+0xe6>
 80a35d2:	ea41 010c 	orr.w	r1, r1, ip
 80a35d6:	e78f      	b.n	80a34f8 <__aeabi_fmul+0x18>
 80a35d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a35dc:	ea92 0f0c 	teq	r2, ip
 80a35e0:	bf18      	it	ne
 80a35e2:	ea93 0f0c 	teqne	r3, ip
 80a35e6:	d00a      	beq.n	80a35fe <__aeabi_fmul+0x11e>
 80a35e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a35ec:	bf18      	it	ne
 80a35ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a35f2:	d1d8      	bne.n	80a35a6 <__aeabi_fmul+0xc6>
 80a35f4:	ea80 0001 	eor.w	r0, r0, r1
 80a35f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a35fc:	4770      	bx	lr
 80a35fe:	f090 0f00 	teq	r0, #0
 80a3602:	bf17      	itett	ne
 80a3604:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a3608:	4608      	moveq	r0, r1
 80a360a:	f091 0f00 	teqne	r1, #0
 80a360e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a3612:	d014      	beq.n	80a363e <__aeabi_fmul+0x15e>
 80a3614:	ea92 0f0c 	teq	r2, ip
 80a3618:	d101      	bne.n	80a361e <__aeabi_fmul+0x13e>
 80a361a:	0242      	lsls	r2, r0, #9
 80a361c:	d10f      	bne.n	80a363e <__aeabi_fmul+0x15e>
 80a361e:	ea93 0f0c 	teq	r3, ip
 80a3622:	d103      	bne.n	80a362c <__aeabi_fmul+0x14c>
 80a3624:	024b      	lsls	r3, r1, #9
 80a3626:	bf18      	it	ne
 80a3628:	4608      	movne	r0, r1
 80a362a:	d108      	bne.n	80a363e <__aeabi_fmul+0x15e>
 80a362c:	ea80 0001 	eor.w	r0, r0, r1
 80a3630:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3634:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3638:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a363c:	4770      	bx	lr
 80a363e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3642:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a3646:	4770      	bx	lr

080a3648 <__aeabi_fdiv>:
 80a3648:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a364c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3650:	bf1e      	ittt	ne
 80a3652:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a3656:	ea92 0f0c 	teqne	r2, ip
 80a365a:	ea93 0f0c 	teqne	r3, ip
 80a365e:	d069      	beq.n	80a3734 <__aeabi_fdiv+0xec>
 80a3660:	eba2 0203 	sub.w	r2, r2, r3
 80a3664:	ea80 0c01 	eor.w	ip, r0, r1
 80a3668:	0249      	lsls	r1, r1, #9
 80a366a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a366e:	d037      	beq.n	80a36e0 <__aeabi_fdiv+0x98>
 80a3670:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a3674:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a3678:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a367c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3680:	428b      	cmp	r3, r1
 80a3682:	bf38      	it	cc
 80a3684:	005b      	lslcc	r3, r3, #1
 80a3686:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a368a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a368e:	428b      	cmp	r3, r1
 80a3690:	bf24      	itt	cs
 80a3692:	1a5b      	subcs	r3, r3, r1
 80a3694:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3698:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a369c:	bf24      	itt	cs
 80a369e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a36a2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a36a6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a36aa:	bf24      	itt	cs
 80a36ac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a36b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a36b4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a36b8:	bf24      	itt	cs
 80a36ba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a36be:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a36c2:	011b      	lsls	r3, r3, #4
 80a36c4:	bf18      	it	ne
 80a36c6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a36ca:	d1e0      	bne.n	80a368e <__aeabi_fdiv+0x46>
 80a36cc:	2afd      	cmp	r2, #253	; 0xfd
 80a36ce:	f63f af50 	bhi.w	80a3572 <__aeabi_fmul+0x92>
 80a36d2:	428b      	cmp	r3, r1
 80a36d4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a36d8:	bf08      	it	eq
 80a36da:	f020 0001 	biceq.w	r0, r0, #1
 80a36de:	4770      	bx	lr
 80a36e0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a36e4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a36e8:	327f      	adds	r2, #127	; 0x7f
 80a36ea:	bfc2      	ittt	gt
 80a36ec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a36f0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a36f4:	4770      	bxgt	lr
 80a36f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a36fa:	f04f 0300 	mov.w	r3, #0
 80a36fe:	3a01      	subs	r2, #1
 80a3700:	e737      	b.n	80a3572 <__aeabi_fmul+0x92>
 80a3702:	f092 0f00 	teq	r2, #0
 80a3706:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a370a:	bf02      	ittt	eq
 80a370c:	0040      	lsleq	r0, r0, #1
 80a370e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a3712:	3a01      	subeq	r2, #1
 80a3714:	d0f9      	beq.n	80a370a <__aeabi_fdiv+0xc2>
 80a3716:	ea40 000c 	orr.w	r0, r0, ip
 80a371a:	f093 0f00 	teq	r3, #0
 80a371e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3722:	bf02      	ittt	eq
 80a3724:	0049      	lsleq	r1, r1, #1
 80a3726:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a372a:	3b01      	subeq	r3, #1
 80a372c:	d0f9      	beq.n	80a3722 <__aeabi_fdiv+0xda>
 80a372e:	ea41 010c 	orr.w	r1, r1, ip
 80a3732:	e795      	b.n	80a3660 <__aeabi_fdiv+0x18>
 80a3734:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3738:	ea92 0f0c 	teq	r2, ip
 80a373c:	d108      	bne.n	80a3750 <__aeabi_fdiv+0x108>
 80a373e:	0242      	lsls	r2, r0, #9
 80a3740:	f47f af7d 	bne.w	80a363e <__aeabi_fmul+0x15e>
 80a3744:	ea93 0f0c 	teq	r3, ip
 80a3748:	f47f af70 	bne.w	80a362c <__aeabi_fmul+0x14c>
 80a374c:	4608      	mov	r0, r1
 80a374e:	e776      	b.n	80a363e <__aeabi_fmul+0x15e>
 80a3750:	ea93 0f0c 	teq	r3, ip
 80a3754:	d104      	bne.n	80a3760 <__aeabi_fdiv+0x118>
 80a3756:	024b      	lsls	r3, r1, #9
 80a3758:	f43f af4c 	beq.w	80a35f4 <__aeabi_fmul+0x114>
 80a375c:	4608      	mov	r0, r1
 80a375e:	e76e      	b.n	80a363e <__aeabi_fmul+0x15e>
 80a3760:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3764:	bf18      	it	ne
 80a3766:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a376a:	d1ca      	bne.n	80a3702 <__aeabi_fdiv+0xba>
 80a376c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a3770:	f47f af5c 	bne.w	80a362c <__aeabi_fmul+0x14c>
 80a3774:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a3778:	f47f af3c 	bne.w	80a35f4 <__aeabi_fmul+0x114>
 80a377c:	e75f      	b.n	80a363e <__aeabi_fmul+0x15e>
 80a377e:	bf00      	nop

080a3780 <__cxa_atexit>:
 80a3780:	b510      	push	{r4, lr}
 80a3782:	4c05      	ldr	r4, [pc, #20]	; (80a3798 <__cxa_atexit+0x18>)
 80a3784:	4613      	mov	r3, r2
 80a3786:	b12c      	cbz	r4, 80a3794 <__cxa_atexit+0x14>
 80a3788:	460a      	mov	r2, r1
 80a378a:	4601      	mov	r1, r0
 80a378c:	2002      	movs	r0, #2
 80a378e:	f3af 8000 	nop.w
 80a3792:	bd10      	pop	{r4, pc}
 80a3794:	4620      	mov	r0, r4
 80a3796:	bd10      	pop	{r4, pc}
 80a3798:	00000000 	.word	0x00000000

080a379c <memcpy>:
 80a379c:	b510      	push	{r4, lr}
 80a379e:	1e43      	subs	r3, r0, #1
 80a37a0:	440a      	add	r2, r1
 80a37a2:	4291      	cmp	r1, r2
 80a37a4:	d004      	beq.n	80a37b0 <memcpy+0x14>
 80a37a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a37aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a37ae:	e7f8      	b.n	80a37a2 <memcpy+0x6>
 80a37b0:	bd10      	pop	{r4, pc}

080a37b2 <memset>:
 80a37b2:	4603      	mov	r3, r0
 80a37b4:	4402      	add	r2, r0
 80a37b6:	4293      	cmp	r3, r2
 80a37b8:	d002      	beq.n	80a37c0 <memset+0xe>
 80a37ba:	f803 1b01 	strb.w	r1, [r3], #1
 80a37be:	e7fa      	b.n	80a37b6 <memset+0x4>
 80a37c0:	4770      	bx	lr
	...

080a37c4 <srand>:
 80a37c4:	b538      	push	{r3, r4, r5, lr}
 80a37c6:	4b12      	ldr	r3, [pc, #72]	; (80a3810 <srand+0x4c>)
 80a37c8:	4605      	mov	r5, r0
 80a37ca:	681c      	ldr	r4, [r3, #0]
 80a37cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a37ce:	b9d3      	cbnz	r3, 80a3806 <srand+0x42>
 80a37d0:	2018      	movs	r0, #24
 80a37d2:	f7fe f9b1 	bl	80a1b38 <malloc>
 80a37d6:	f243 330e 	movw	r3, #13070	; 0x330e
 80a37da:	63a0      	str	r0, [r4, #56]	; 0x38
 80a37dc:	8003      	strh	r3, [r0, #0]
 80a37de:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a37e2:	8043      	strh	r3, [r0, #2]
 80a37e4:	f241 2334 	movw	r3, #4660	; 0x1234
 80a37e8:	8083      	strh	r3, [r0, #4]
 80a37ea:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a37ee:	80c3      	strh	r3, [r0, #6]
 80a37f0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a37f4:	8103      	strh	r3, [r0, #8]
 80a37f6:	2305      	movs	r3, #5
 80a37f8:	8143      	strh	r3, [r0, #10]
 80a37fa:	230b      	movs	r3, #11
 80a37fc:	8183      	strh	r3, [r0, #12]
 80a37fe:	2201      	movs	r2, #1
 80a3800:	2300      	movs	r3, #0
 80a3802:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a3806:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a3808:	2200      	movs	r2, #0
 80a380a:	611d      	str	r5, [r3, #16]
 80a380c:	615a      	str	r2, [r3, #20]
 80a380e:	bd38      	pop	{r3, r4, r5, pc}
 80a3810:	2000008c 	.word	0x2000008c

080a3814 <strlen>:
 80a3814:	4603      	mov	r3, r0
 80a3816:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a381a:	2a00      	cmp	r2, #0
 80a381c:	d1fb      	bne.n	80a3816 <strlen+0x2>
 80a381e:	1a18      	subs	r0, r3, r0
 80a3820:	3801      	subs	r0, #1
 80a3822:	4770      	bx	lr

080a3824 <dynalib_user>:
 80a3824:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a3834:	0000 0000                                   ....

080a3838 <CSWTCH.210>:
 80a3838:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a3848:	0050 0000 6143 696c 7262 7461 0065 6152     P...Calibrate.Ra
 80a3858:	2077 6152 676e 7365 203a 3a58 0020 002d     w Ranges: X: .-.
 80a3868:	202c 3a59 0020 202c 3a5a 0020 3a20 203a     , Y: ., Z: . :: 
 80a3878:	4700 202c 4700 0000                         .G, .G..

080a3880 <_ZTV7TwoWire>:
	...
 80a3888:	1b89 080a 1bd3 080a 1bab 080a 1b8b 080a     ................
 80a3898:	1bb3 080a 1bbb 080a 1bc3 080a 1bcb 080a     ................

080a38a8 <_ZTV9IPAddress>:
	...
 80a38b0:	1c1d 080a 1c0d 080a 1c0f 080a 6162 6475     ............baud
 80a38c0:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a38d0:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a38e0:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a38f0:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a3900:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a3910:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a3920:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a3930:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a3940:	6425 2800 3a29 0020 5b20 6300 646f 2065     %d.(): . [.code 
 80a3950:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
 80a3960:	0d00 000a 6e6c 6600 006e 6f63 6564 6400     ....ln.fn.code.d
 80a3970:	7465 6961 006c 6f6e 656e 7400 6172 6563     etail.none.trace
 80a3980:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
 80a3990:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

080a399c <_ZTVN5spark12NetworkClassE>:
	...
 80a39a4:	1ce5 080a 1cef 080a 1cf9 080a 1d03 080a     ................
 80a39b4:	1d0d 080a 1d19 080a 1d25 080a 1d31 080a     ........%...1...
 80a39c4:	1d39 080a 1d43 080a 1d4d 080a 616e 006e     9...C...M...nan.
 80a39d4:	766f 0066 002e 6e69 0066 005a 2b25 3330     ovf...inf.Z.%+03
 80a39e4:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
 80a39f4:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
 80a3a04:	656d 0000                                   me..

080a3a08 <_ZTV11USARTSerial>:
	...
 80a3a10:	209d 080a 20ed 080a 20fb 080a 1db1 080a     . ... ... ......
 80a3a20:	20b1 080a 20d3 080a 20bf 080a 20e7 080a     . ... ... ... ..
 80a3a30:	209f 080a 20a3 080a                         . ... ..

080a3a38 <_ZTV9USBSerial>:
	...
 80a3a40:	21d9 080a 2229 080a 2237 080a 1db1 080a     .!..)"..7"......
 80a3a50:	2215 080a 21db 080a 21f1 080a 2223 080a     ."...!...!..#"..
 80a3a60:	2207 080a 21d5 080a                         ."...!..

080a3a68 <_ZTVN5spark9WiFiClassE>:
	...
 80a3a70:	23e3 080a 23d9 080a 23cf 080a 2341 080a     .#...#...#..A#..
 80a3a80:	23c3 080a 23b7 080a 23ab 080a 23a3 080a     .#...#...#...#..
 80a3a90:	2399 080a 238f 080a 234b 080a               .#...#..K#..

080a3a9c <_ZSt7nothrow>:
 80a3a9c:	0000 0000                                   ....

080a3aa0 <__sf_fake_stdin>:
	...

080a3ac0 <__sf_fake_stdout>:
	...

080a3ae0 <__sf_fake_stderr>:
	...
 80a3b00:	0043                                        C.

080a3b02 <link_const_variable_data_end>:
	...

080a3b04 <link_constructors_location>:
 80a3b04:	080a01dd 	.word	0x080a01dd
 80a3b08:	080a14d5 	.word	0x080a14d5
 80a3b0c:	080a17f5 	.word	0x080a17f5
 80a3b10:	080a17f9 	.word	0x080a17f9
 80a3b14:	080a1cd5 	.word	0x080a1cd5
 80a3b18:	080a1d9d 	.word	0x080a1d9d
 80a3b1c:	080a2015 	.word	0x080a2015
 80a3b20:	080a2055 	.word	0x080a2055
 80a3b24:	080a2089 	.word	0x080a2089
 80a3b28:	080a23ed 	.word	0x080a23ed
 80a3b2c:	080a26c9 	.word	0x080a26c9
 80a3b30:	080a273d 	.word	0x080a273d
 80a3b34:	080a2801 	.word	0x080a2801
 80a3b38:	080a2885 	.word	0x080a2885
 80a3b3c:	080a2909 	.word	0x080a2909
